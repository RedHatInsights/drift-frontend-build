{"version":3,"sources":["webpack:///./src/SmartComponents/ExportCSVButton/ExportCSVButton.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js","webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["ExportCSVButton","props","this","dropdownItems","isOpen","onToggle","toggle","toggleIndicator","className","isPlain","position","DropdownPosition","left","ouiaId","Component","propTypes","PropTypes","array","bool","func","ErrorAlert","closeToast","tableId","onClose","addNotification","error","Fragment","status","variant","title","description","detail","dismissable","object","string","connect","dispatch","payload","baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","categoryMessage","factMessage","deleteFactModalHelpers","DropdownItem","component","onClick","DeleteFactModal","toggleModal","bind","Dropdown","style","float","KebabToggle","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","editBaselineEmptyState","hasWritePermissions","undefined","Button","Tooltip","content","editBaselineActions","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","onBulkSelect","exportToCSV","tableData","baselineData","totalFacts","Toolbar","ToolbarContent","ToolbarItem","count","items","checked","helpers","findCheckedValue","onSelect","ToolbarGroup","any","number","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","inlineError","FormGroup","isRequired","helperTextInvalid","validated","fieldId","onKeyPress","TextInput","type","placeholder","ValidatedOptions","isSubFact","Alert","isInline","Form","factModalOpened","Modal","ModalVariant","small","actions","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","hasError","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","renderPageHeader","hasReadPermissions","baselineDataLoading","SkeletonSize","lg","renderBreadcrumb","renderPageTitle","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","errorMessage","loadingColumns","transforms","cellWidth","goToBaselinesList","params","match","window","insights","chrome","auth","getUser","appAction","appObjectId","document","clearBaselineData","fetchBaselines","history","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","columns","rowSize","canSelectAll","isSelectable","expandedRows","includes","expandRow","row","rows","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","rowData","i","renderRowData","editBaselineError","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","renderHeaderRow","renderRows","findSelected","Consumer","permissions","baselinesRead","baselinesWrite","LockIcon","renderEmptyState","Card","CardBody","findFactCount","renderLoadingRows","renderTable","withRouter","baselinesTableActions","exportData","baselineRowData"],"mappings":"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","file":"js/3-0d9521504a9966761253.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Dropdown, DropdownToggle, DropdownPosition } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nclass ExportCSVButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { dropdownItems, isOpen, onToggle } = this.props;\n\n        return (\n            <Dropdown\n                toggle={ <DropdownToggle\n                    toggleIndicator={ null }\n                    onToggle={ onToggle }>\n                    <ExportIcon className='pointer not-active'/>\n                </DropdownToggle> }\n                isOpen={ isOpen }\n                isPlain\n                position={ DropdownPosition.left }\n                dropdownItems={ dropdownItems }\n                ouiaId=\"export\"\n            />\n        );\n    }\n}\n\nExportCSVButton.propTypes = {\n    dropdownItems: PropTypes.array,\n    isOpen: PropTypes.bool,\n    onToggle: PropTypes.func\n};\n\nexport default ExportCSVButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                    ouiaId=\"actions\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { editBaselineEmptyState, hasWritePermissions, isDisabled } = this.props;\n\n        return (\n            <React.Fragment>\n                { !hasWritePermissions && hasWritePermissions !== undefined\n                    ? <Tooltip\n                        content={\n                            <div>You do not have permissions to perform this action</div>\n                        }\n                    >\n                        <div className={ editBaselineEmptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }\n                                ouiaId=\"add_fact\"\n                            >\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }\n                        ouiaId=\"add_fact\"\n                    >\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    editBaselineEmptyState: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { hasWritePermissions, isDisabled, onBulkSelect, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ isDisabled }\n                            hasWritePermissions={ hasWritePermissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    hasWritePermissions: PropTypes.bool\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            className=\"sm-padding-bottom\"\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { inlineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label={ isCategory ? 'Category name' : 'Fact name' }\n                    isRequired\n                    helperTextInvalid={ inlineError.hasOwnProperty('detail') ? inlineError.detail : null }\n                    validated={ inlineError.hasOwnProperty('status') ? 'error' : null }\n                    fieldId='fact name'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ factName }\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        onChange={ this.handleNewName }\n                        validated={ inlineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                        aria-label=\"fact name\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { inlineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label='Value'\n                    isRequired\n                    helperTextInvalid={ inlineError.hasOwnProperty('detail') ? inlineError.detail : null }\n                    validated={ inlineError.hasOwnProperty('status') ? 'error' : null }\n                    fieldId='fact value'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ factValue }\n                        type=\"text\"\n                        placeholder=\"Value\"\n                        onChange={ this.handleNewValue }\n                        validated={ inlineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                        aria-label=\"value\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { inlineError, isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                <Form>\n                    { this.renderFactInput() }\n                    { isCategory ? null : this.renderValueInput() }\n                </Form>\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"save\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"cancel\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    inlineError: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = error.hasOwnProperty('status') ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"save\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"cancel\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox, BreadcrumbHeading } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize, SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../ErrorAlert/ErrorAlert';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ]\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        const { match: { params }} = this.props;\n\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-view');\n        await window.insights?.chrome?.appObjectId(params.id);\n    }\n\n    componentDidUpdate() {\n        if (this.props.baselineData) {\n            document.title = this.props.baselineData.display_name + ' - Baselines - Drift | Red Hat Insights';\n        }\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { clearBaselineData, fetchBaselines, history } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        fetchBaselines('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData, hasReadPermissions) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData && hasReadPermissions\n                ? <BreadcrumbHeading>\n                    { baselineData.display_name }\n                </BreadcrumbHeading>\n                : null\n            }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageTitle(baselineData, hasReadPermissions, hasWritePermissions) {\n        let pageTitle;\n\n        if (hasReadPermissions) {\n            if (hasWritePermissions) {\n                pageTitle = <React.Fragment>\n                    <span className='pf-c-title pf-m-2xl'>\n                        { !_.isEmpty(baselineData) ? baselineData.display_name : null }\n                    </span>\n                    <span>\n                        { <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } /> }\n                    </span>\n                </React.Fragment>;\n            } else {\n                pageTitle = <React.Fragment>{ !_.isEmpty(baselineData) ? baselineData.display_name : null }</React.Fragment>;\n            }\n        } else {\n            pageTitle = <React.Fragment>{ 'Baseline' }</React.Fragment>;\n        }\n\n        return pageTitle;\n    }\n\n    renderPageHeader = (hasReadPermissions, hasWritePermissions) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader>\n                        { this.renderBreadcrumb(baselineData, hasReadPermissions) }\n                        <div id=\"edit-baseline-title\">\n                            { this.renderPageTitle(baselineData, hasReadPermissions, hasWritePermissions) }\n                        </div>\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderHeaderRow(hasWritePermissions) {\n        return (\n            <tr key='edit-baseline-table-header'>\n                { hasWritePermissions ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        const { loadingColumns } = this.state;\n\n        return <SkeletonTable\n            columns={ loadingColumns }\n            rowSize={ 8 }\n            onSelect={ true }\n            canSelectAll={ false }\n            isSelectable={ true }\n        />;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, hasWritePermissions) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        hasWritePermissions\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    hasWritePermissions\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        hasWritePermissions\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(hasWritePermissions) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], hasWritePermissions);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState(hasWritePermissions) {\n        const { editBaselineEmptyState, editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + editBaselineError.status + ': ' + editBaselineError.detail\n                }\n                button={\n                    <a onClick={ () => this.retryBaselineFetch() }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton\n                    hasWritePermissions={ hasWritePermissions }\n                    editBaselineEmptyState={ editBaselineEmptyState }\n                /> }\n            />;\n        }\n    }\n\n    renderTable(hasWritePermissions) {\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table\">\n                <thead>\n                    { this.renderHeaderRow(hasWritePermissions) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { this.renderRows(hasWritePermissions) }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, baselineDataLoading, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions.baselinesRead, value.permissions.baselinesWrite) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to view this Baseline' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    { factModalOpened\n                                        ? <FactModal />\n                                        : <div></div>\n                                    }\n                                    <ErrorAlert\n                                        error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                                        onClose={ clearErrorData }\n                                    />\n                                    { editBaselineEmptyState\n                                        ? this.renderEmptyState(value.permissions.baselinesWrite)\n                                        : <Card className='pf-t-light pf-m-opaque-100'>\n                                            <CardBody>\n                                                <EditBaselineToolbar\n                                                    selected={ selected }\n                                                    onBulkSelect={ this.onBulkSelect }\n                                                    isDisabled={ editBaselineTableData.length === 0 || !value.permissions.baselinesWrite }\n                                                    totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                                    baselineData={ baselineData }\n                                                    exportToCSV={ exportToCSV }\n                                                    tableData={ editBaselineTableData }\n                                                    hasWritePermissions={ value.permissions.baselinesWrite }\n                                                />\n                                                { baselineDataLoading\n                                                    ? this.renderLoadingRows()\n                                                    : this.renderTable(value.permissions.baselinesWrite)\n                                                }\n                                            </CardBody>\n                                        </Card>\n                                    }\n                                </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    hasWritePermissions: PropTypes.bool,\n    fetchBaselines: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        },\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}