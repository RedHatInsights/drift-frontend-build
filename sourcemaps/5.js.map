{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","props","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","categoryMessage","factMessage","this","deleteFactModalHelpers","DropdownItem","component","onClick","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","hasWritePermissions","undefined","Button","variant","Tooltip","content","bool","dispatch","editBaselineActions","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","title","onBulkSelect","exportToCSV","tableData","baselineData","totalFacts","Toolbar","className","ToolbarContent","ToolbarItem","count","items","checked","helpers","findCheckedValue","onSelect","ToolbarGroup","ExportCSVButton","any","number","object","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","inlineError","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","error","response","data","status","detail","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","editBaselineError","Form","FormGroup","isRequired","helperTextInvalid","validated","fieldId","onKeyPress","TextInput","type","placeholder","ValidatedOptions","isSubFact","Alert","isInline","factModalOpened","Modal","ModalVariant","small","onClose","actions","string","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","hasError","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","renderPageHeader","hasReadPermissions","baselineDataLoading","SkeletonSize","lg","renderBreadcrumb","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","errorMessage","goToBaselinesList","window","insights","chrome","auth","getUser","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","rows","rowData","i","md","expandedRows","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","renderRowData","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","renderHeaderRow","renderLoadingRows","renderRows","editBaselineEmptyState","findSelected","Consumer","permissions","baselinesRead","baselinesWrite","LockIcon","ErrorAlert","renderEmptyState","Card","CardBody","findFactCount","renderTable","withRouter","tableId","baselinesTableActions","exportData","baselineRowData"],"mappings":"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","file":"js/5-a8ce1421196d8a373667.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { hasWritePermissions, isDisabled } = this.props;\n\n        return (\n            <React.Fragment>\n                { !hasWritePermissions && hasWritePermissions !== undefined\n                    ? <Tooltip\n                        content={\n                            <div>You do not have permissions to perform this action</div>\n                        }\n                    >\n                        <div>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }>\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }>\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { hasWritePermissions, isDisabled, onBulkSelect, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ totalFacts > 0 ? false : true }\n                            hasWritePermissions={ hasWritePermissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    hasWritePermissions: PropTypes.bool\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory,\n            inlineError: {}\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n        let error;\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            error = e.response.data;\n            this.setState({\n                inlineError: { status: error.status, detail: error.detail }\n            });\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { editBaselineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ editBaselineError.hasOwnProperty('detail') ? editBaselineError.detail : null }\n                        validated={ editBaselineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            validated={ editBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { editBaselineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ editBaselineError.hasOwnProperty('detail') ? editBaselineError.detail : null }\n                        validated={ editBaselineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            validated={ editBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { inlineError, isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                { this.renderFactInput() }\n                <br></br>\n                { isCategory ? null : this.renderValueInput() }\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        editBaselineError: state.editBaselineState.editBaselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = error.hasOwnProperty('status') ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox, BreadcrumbHeading } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../ErrorAlert/ErrorAlert';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData ? <BreadcrumbHeading>{ baselineData.display_name }</BreadcrumbHeading> : null }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageHeader = (hasReadPermissions, hasWritePermissions) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader>\n                        { this.renderBreadcrumb(baselineData) }\n                        <PageHeaderTitle title={ !_.isEmpty(baselineData) ? baselineData.display_name : null }/>\n                        { hasReadPermissions && hasWritePermissions\n                            ? <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } />\n                            : null\n                        }\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderHeaderRow(hasWritePermissions) {\n        return (\n            <tr key='edit-baseline-table-header'>\n                { hasWritePermissions ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, hasWritePermissions) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        hasWritePermissions\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    hasWritePermissions\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        hasWritePermissions\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(hasWritePermissions) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], hasWritePermissions);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState() {\n        const { editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + editBaselineError.status + ': ' + editBaselineError.detail\n                }\n                button={\n                    <a onClick={ () => this.retryBaselineFetch() }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton /> }\n            />;\n        }\n    }\n\n    renderTable(hasWritePermissions) {\n        const { baselineDataLoading } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow(hasWritePermissions) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { !baselineDataLoading\n                        ? this.renderRows(hasWritePermissions)\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions.baselinesRead, value.permissions.baselinesWrite) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    { factModalOpened\n                                        ? <FactModal />\n                                        : <div></div>\n                                    }\n                                    <ErrorAlert\n                                        error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                                        onClose={ clearErrorData }\n                                    />\n                                    { editBaselineEmptyState\n                                        ? this.renderEmptyState()\n                                        : <Card className='pf-t-light pf-m-opaque-100'>\n                                            <CardBody>\n                                                <EditBaselineToolbar\n                                                    selected={ selected }\n                                                    onBulkSelect={ this.onBulkSelect }\n                                                    isDisabled={ editBaselineTableData.length === 0 || !value.permissions.baselinesWrite }\n                                                    totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                                    baselineData={ baselineData }\n                                                    exportToCSV={ exportToCSV }\n                                                    tableData={ editBaselineTableData }\n                                                    hasWritePermissions={ value.permissions.baselinesWrite }\n                                                />\n                                                { this.renderTable(value.permissions.baselinesWrite) }\n                                            </CardBody>\n                                        </Card>\n                                    }\n                                </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.array,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    hasWritePermissions: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}