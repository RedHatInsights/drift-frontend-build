{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","key","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","className","Form","FormGroup","label","isRequired","type","helperTextInvalid","hasOwnProperty","detail","fieldId","validated","onKeyPress","TextInput","placeholder","value","onChange","ValidatedOptions","error","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","cellWidth","setState","handleChecked","_","currentTarget","this","createBaseline","selectedBaselineIds","history","entities","selectedHSPIds","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","hsp_uuid","push","baselineData","id","Radio","isChecked","name","createBaselineModalOpened","hasReadPermissions","hasWritePermissions","loading","totalBaselines","BaselinesTable","tableId","tableData","hasMultiSelect","hasInventoryReadPermissions","historicalProfiles","SystemsTable","createBaselineModal","hasHistoricalDropdown","selectVariant","undefined","Button","variant","isDisabled","ouiaId","onClick","globalFilterState","Modal","width","isOpen","onClose","actions","renderActions","GlobalFilterAlert","status","Alert","isInline","Component","propTypes","PropTypes","bool","func","object","array","number","updatePagination","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","historicProfilesState","dispatch","createBaselineModalActions","uuid","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","map","item","onBulkSelect","ids","forEach","baseline","renderEmptyState","hasBaselinesWritePermissions","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","AddCircleOIcon","CreateBaselineButton","window","insights","chrome","auth","getUser","clearEditBaselineData","CardBody","kebab","createButton","exportButton","Consumer","permissions","inventoryRead","baselinesRead","baselinesWrite","LockIcon","ErrorAlert","Card","renderTable","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/5-34c380640d0cee81df6d.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../../GlobalFilterAlert/GlobalFilterAlert';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(40) ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectedHSPIds } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedHSPIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = selectedHSPIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n\n        let id = [ baselineTableData[rowId][0] ];\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, createBaselineModalOpened, hasReadPermissions, hasWritePermissions, loading, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n                hasReadPermissions={ hasReadPermissions }\n                hasWritePermissions={ hasWritePermissions }\n                hasMultiSelect={ false }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { hasInventoryReadPermissions, entities, historicalProfiles } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <br></br>\n            <SystemsTable\n                selectedSystemIds={ [] }\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ historicalProfiles }\n                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                entities={ entities }\n                selectVariant='radio'\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <div className='md-padding-top md-padding-bottom'>\n                <Form>\n                    <FormGroup\n                        label='Baseline name'\n                        isRequired\n                        type=\"text\"\n                        helperTextInvalid={ createBaselineError.hasOwnProperty('detail') ? createBaselineError.detail : null }\n                        fieldId=\"name\"\n                        validated={ createBaselineError.hasOwnProperty('status') ? 'error' : null }\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            className=\"fact-value\"\n                            placeholder=\"Baseline name\"\n                            value={ baselineName }\n                            type=\"text\"\n                            onChange={ this.updateBaselineName }\n                            validated={ createBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"baseline name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, selectedHSPIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n        let selectedSystemIds = entities === undefined || entities.selectedSystemIds === undefined ? [] : entities.selectedSystemIds;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                (selectedSystemIds.length === 0 && selectedHSPIds.length === 0)\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled\n                    ouiaId=\"create_baseline\"\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"cancel\"\n                >\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }\n                    ouiaId=\"create_baseline\"\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"cancel\"\n                >\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened, globalFilterState } = this.props;\n        const { copySystemChecked } = this.state;\n\n        return (\n            <Modal\n                width={ '1200px' }\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { copySystemChecked\n                    ? <GlobalFilterAlert globalFilterState={ globalFilterState }/>\n                    : null\n                }\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                        ouiaId=\"status\"\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasReadPermissions: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable, cellWidth(40) ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable(hasReadPermissions, hasWritePermissions) {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                        hasReadPermissions={ hasReadPermissions }\n                        hasWritePermissions={ hasWritePermissions }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = (hasBaselinesWritePermissions) => {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton\n                    emptyState={ emptyState }\n                    hasWritePermissions={ hasBaselinesWritePermissions }\n                    loading={ loading } />\n                }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + baselineError.status + ': ' + baselineError.detail\n                }\n                button={\n                    <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        <CreateBaselineModal\n                            hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                            hasReadPermissions={ value.permissions.baselinesRead }\n                            hasWritePermissions={ value.permissions.baselinesWrite }\n                        />\n                        <PageHeader>\n                            <PageHeaderTitle title='Baselines'/>\n                        </PageHeader>\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState(value.permissions.baselinesWrite)\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable(value.permissions.baselinesRead, value.permissions.baselinesWrite)\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}