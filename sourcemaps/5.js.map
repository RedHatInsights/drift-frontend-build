{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","onSelect","_","event","selectBaseline","currentTarget","id","checked","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","key","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","error","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","type","helperTextInvalid","hasOwnProperty","detail","fieldId","isValid","onKeyPress","TextInput","className","placeholder","value","onChange","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","setState","handleChecked","this","createBaseline","selectedBaselineIds","history","entities","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","push","baselineData","Radio","isChecked","name","label","baselineTableData","loading","createBaselineModalOpened","BaselinesTable","tableId","tableData","SystemsTable","createBaselineModal","undefined","Button","variant","isDisabled","onClick","Modal","isOpen","onClose","isFooterLeftAligned","actions","renderActions","Component","propTypes","PropTypes","bool","func","object","array","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","dispatch","createBaselineModalActions","uuid","isSelected","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","rowId","map","item","onBulkSelect","ids","forEach","baseline","renderCardBody","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","EmptyStateDisplay","icon","AddCircleOIcon","text","button","CreateBaselineButton","status","ExclamationCircleIcon","color","renderTable","window","insights","chrome","auth","getUser","clearEditBaselineData","CardBody","hasMultiSelect","kebab","createButton","exportButton","Card","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/5-a8cea49c9cda1e12131a.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, Radio, TextInput, Form, FormGroup } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: '' },\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds, history, entities, clearSelectedBaselines } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (_, event) => {\n        const { selectBaseline } = this.props;\n\n        let id = [ event.currentTarget.id ];\n        let isSelected = event.currentTarget.checked;\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, loading, createBaselineModalOpened } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable selectedSystemIds={ [] } createBaselineModal={ true } />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { error } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <b>Baseline name</b>\n            <br></br>\n            <Form>\n                <FormGroup\n                    type=\"text\"\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    fieldId=\"name\"\n                    isValid={ !error.hasOwnProperty('status') }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeholder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked && entities && entities.selectedSystemIds !== undefined && entities.selectedSystemIds.length === 0)\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"create-baseline-modal\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                isFooterLeftAligned\n                actions={ this.renderActions() }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.array,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    error: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        error: state.createBaselineModalState.error,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]},\n                { title: '' }\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable() {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderCardBody = () => {\n        const { emptyState, loading, baselineError, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (emptyState && !loading) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton /> }\n            />;\n        } else if (loading && baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + this.props.baselineError.status + ': ' + this.props.baselineError.detail\n                }\n                button={\n                    <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return this.renderTable();\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        {\n                            this.renderCardBody()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}