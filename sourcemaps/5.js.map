{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","cancelModal","toggleCreateBaselineModal","updateBaselineName","renderModalBody","modalBody","state","baselineName","copyBaselineChecked","copySystemChecked","error","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","type","helperTextInvalid","hasOwnProperty","detail","fieldId","isValid","TextInput","className","placeHolder","value","onChange","aria-label","submitBaselineName","bind","fromScratchChecked","setState","handleChecked","_","event","currentTarget","clearSelectedBaselines","this","createBaseline","selectedBaselineIds","history","entities","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","push","baselineData","id","Radio","isChecked","name","label","BaselinesTable","hasSelect","SystemsTable","createBaselineModal","undefined","Button","key","variant","isDisabled","onClick","createBaselineModalOpened","Modal","title","isOpen","onClose","width","isFooterLeftAligned","actions","renderActions","Component","propTypes","PropTypes","bool","func","object","array","withRouter","connect","createBaselineModalState","baselinesTableState","dispatch","createBaselineModalActions","uuid","baselinesTableActions","BaselinesPage","window","insights","chrome","auth","getUser","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","size","EmptyStateBody","CreateBaselineButton","CardBody","kebab","createButton","exportButton","emptyState","baselineListLoading","Card","renderEmptyState","renderTable","fullBaselineListData"],"mappings":"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","file":"js/5-bb94744f6ff16778c2d3.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, Radio, TextInput, Form, FormGroup } from '@patternfly/react-core';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nclass CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const { value } = event.currentTarget;\n            this.props.clearSelectedBaselines();\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds, history, entities } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (fromScratchChecked) {\n                newBaselineObject.baseline_facts = [];\n                await createBaseline(newBaselineObject);\n            } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                newBaselineObject = { display_name: baselineName };\n                await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n            } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                await createBaseline(newBaselineObject);\n            }\n\n            history.push('baselines/' + this.props.baselineData.id);\n            toggleCreateBaselineModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal/*, clearSelectedBaselines*/ } = this.props;\n\n        this.updateBaselineName('');\n        //clearSelectedBaselines();\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable hasSelect={ true } />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable selectedSystemIds={ [] } createBaselineModal={ true } />\n        </React.Fragment>\n        );\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { error } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <b>Baseline name</b>\n            <br></br>\n            <Form>\n                <FormGroup\n                    type=\"text\"\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    fieldId=\"name\"\n                    isValid={ !error.hasOwnProperty('status') }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeHolder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked && entities && entities.selectedSystemIds !== undefined && entities.selectedSystemIds.length === 0)\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"create-baseline-modal\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ this.renderActions() }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    error: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.selectedBaselineIds,\n        error: state.createBaselineModalState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        clearSelectedBaselines: () => dispatch(baselinesTableActions.clearSelectedBaselines())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\n\nclass BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    renderEmptyState() {\n        return (\n            <center>\n                <EmptyState>\n                    <EmptyStateIcon icon={ AddCircleOIcon } />\n                    <br></br>\n                    <Title size=\"lg\">No baselines</Title>\n                    <EmptyStateBody>\n                        You currently have no baselines displayed.\n                        <br/>\n                        Create a baseline to use in your System Comparison analysis.\n                    </EmptyStateBody>\n                    <CreateBaselineButton />\n                </EmptyState>\n            </center>\n        );\n    }\n\n    renderTable() {\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable kebab={ true } createButton={ true } exportButton={ true } hasSelect={ true }/>\n                </div>\n            </CardBody>\n        );\n    }\n\n    render() {\n        const { emptyState, baselineListLoading } = this.props;\n\n        /*eslint-disable camelcase*/\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        { (emptyState && baselineListLoading === false)\n                            ? this.renderEmptyState() : this.renderTable()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n        /*eslint-enable camelcase*/\n    }\n}\n\nBaselinesPage.propTypes = {\n    baselineListLoading: PropTypes.bool,\n    fullBaselineListData: PropTypes.array,\n    emptyState: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineListLoading: state.baselinesTableState.baselineListLoading,\n        fullBaselineListData: state.baselinesTableState.fullBaselineListData,\n        emptyState: state.baselinesTableState.emptyState\n    };\n}\n\nexport default connect(mapStateToProps, null)(BaselinesPage);\n"],"sourceRoot":""}