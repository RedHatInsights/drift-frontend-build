{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","props","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","categoryMessage","factMessage","this","deleteFactModalHelpers","DropdownItem","component","onClick","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","Button","variant","bool","dispatch","editBaselineActions","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","title","onBulkSelect","exportToCSV","tableData","baselineData","totalFacts","Toolbar","className","ToolbarContent","ToolbarItem","count","items","checked","helpers","findCheckedValue","onSelect","ToolbarGroup","ExportCSVButton","any","number","object","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","inlineError","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","error","response","data","status","detail","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","editBaselineError","Form","FormGroup","isRequired","helperTextInvalid","validated","fieldId","onKeyPress","TextInput","type","placeholder","ValidatedOptions","isSubFact","Alert","isInline","factModalOpened","Modal","ModalVariant","small","onClose","actions","string","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","hasError","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","renderPageHeader","baselineDataLoading","SkeletonSize","lg","undefined","renderBreadcrumb","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","errorMessage","goToBaselinesList","window","insights","chrome","auth","getUser","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","rows","rowData","i","md","expandedRows","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","renderRowData","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","renderHeaderRow","renderLoadingRows","renderRows","editBaselineEmptyState","findSelected","ErrorAlert","renderEmptyState","Card","CardBody","findFactCount","renderTable","withRouter","tableId","baselinesTableActions","exportData","baselineRowData"],"mappings":"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","file":"js/5-62840823a49d88c7121d.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { isDisabled } = this.props;\n\n        return (\n            isDisabled\n                ? <Button\n                    variant='primary'\n                    isDisabled\n                    onClick={ this.handleAddFact }>\n                    Add fact or category\n                </Button>\n                : <Button\n                    variant='primary'\n                    onClick={ this.handleAddFact }>\n                    Add fact or category\n                </Button>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { isDisabled, onBulkSelect, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ totalFacts > 0 ? false : true }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory,\n            inlineError: {}\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n        let error;\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            error = e.response.data;\n            this.setState({\n                inlineError: { status: error.status, detail: error.detail }\n            });\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { editBaselineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ editBaselineError.hasOwnProperty('detail') ? editBaselineError.detail : null }\n                        validated={ editBaselineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            validated={ editBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { editBaselineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ editBaselineError.hasOwnProperty('detail') ? editBaselineError.detail : null }\n                        validated={ editBaselineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            validated={ editBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { inlineError, isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                { this.renderFactInput() }\n                <br></br>\n                { isCategory ? null : this.renderValueInput() }\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        editBaselineError: state.editBaselineState.editBaselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = error.hasOwnProperty('status') ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox, BreadcrumbHeading } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../ErrorAlert/ErrorAlert';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\n\nimport _ from 'lodash';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData ? <BreadcrumbHeading>{ baselineData.display_name }</BreadcrumbHeading> : null }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageHeader = () => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader>\n                        { this.renderBreadcrumb(baselineData) }\n                        <PageHeaderTitle title={ !_.isEmpty(baselineData) ? baselineData.display_name : null }/>\n                        <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } />\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr key='edit-baseline-table-header'>\n                <th></th>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        row.push(<td\n            className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n            { this.renderCheckbox(fact) }\n        </td>);\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>);\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState() {\n        const { editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + editBaselineError.status + ': ' + editBaselineError.detail\n                }\n                button={\n                    <a onClick={ () => this.retryBaselineFetch() }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton /> }\n            />;\n        }\n    }\n\n    renderTable() {\n        const { baselineDataLoading } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { !baselineDataLoading\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <React.Fragment>\n                { this.renderPageHeader() }\n                <Main>\n                    { factModalOpened\n                        ? <FactModal />\n                        : <div></div>\n                    }\n                    <ErrorAlert\n                        error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                        onClose={ clearErrorData }\n                    />\n                    { editBaselineEmptyState\n                        ? this.renderEmptyState()\n                        : <Card className='pf-t-light pf-m-opaque-100'>\n                            <CardBody>\n                                <EditBaselineToolbar\n                                    selected={ selected }\n                                    onBulkSelect={ this.onBulkSelect }\n                                    isDisabled={ editBaselineTableData.length === 0 }\n                                    totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                    baselineData={ baselineData }\n                                    exportToCSV={ exportToCSV }\n                                    tableData={ editBaselineTableData }\n                                />\n                                { this.renderTable() }\n                            </CardBody>\n                        </Card>\n                    }\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.array,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}