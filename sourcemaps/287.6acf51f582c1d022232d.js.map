{"version":3,"sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","aria-label","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","onToggle","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","toggleBasketVisible","find","hspContent","item","clearDeselected","newArray","toggleSelected","array","removeId","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","position","PopoverPosition","bodyContent","maxHeight","overflowY","onClick","findSelected","AddSystemModal","basketIsVisible","disableSystemTable","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","onBulkSelect","systemContentSelect","data","handleSystemSelection","selectedSystems","row","display_name","ServerIcon","confirmModal","bind","cancelSelection","changeActiveTab","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","updateColumns","entityListener","addNewListener","actionType","callback","addSystemModalOpened","baselines","historicalProfiles","systems","content","updated","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","tabIndex","selectActiveTab","activeTab","globalFilterState","loading","permissions","setSelectedSystemIds","totalBaselines","Modal","width","ouiaId","isOpen","onClose","actions","Button","key","variant","isDisabled","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","data-ouia-component-id","SystemsTable","hasHistoricalDropdown","hspRead","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","showModal","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","Tooltip","tooltip","ReferenceSelector","isReference","updateReferenceId","StarIcon","data-ouia-component-type","OutlinedStarIcon","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","header-id","TimesIcon","system_profile_exists","ExclamationTriangleIcon","last_updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","hasHSPReadPermissions","DriftTable","shiftReferenceToFront","index","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","concat","entries","searchParams","URLSearchParams","getAll","Array","isArray","setSelectedBaselines","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","renderState","comparison","renderRowChild","category","multivalues","subFactItem","rowValue","cell","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","AddSystemButton","isTable","types","FilterDropDown","createDropdownItem","toggleDropDown","DropdownItem","display","label","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","prevProps","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","clearAllFilters","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","loadEntities","PageHeader","PageHeaderTitle","Main","compareRead","ErrorAlert","Card","CardBody","pagination"],"mappings":"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","file":"js/287.53b6a4aa57a6660d3c67.js","sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    onToggle = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    render() {\n        const { entities, isVisible, selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.onToggle() }\n                        headerContent={ <div>Selected items</div> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            <SelectedTable\n                                selectedBaselineContent={ selectedBaselineContent }\n                                entities={ entities }\n                                selectedHSPContent={ selectedHSPContent }\n                                findType={ this.findType }\n                                handleDeselect={ this.handleDeselect }\n                                selectedSystemContent={ selectedSystemContent }\n                            />\n                        </div> }\n                    >\n                        <a onClick={ () => this.onToggle() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    entities: PropTypes.object,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ],\n            basketIsVisible: false\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.updateColumns('display_name');\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    /*eslint-disable camelcase*/\n    componentDidUpdate() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectedBaselineContent, selectedHSPContent, selectedSystemContent, systems } = this.props;\n        let newSelectedSystems = [];\n        let newSelectedBaselines = [];\n\n        if ((baselines.length || historicalProfiles.length || systems.length)\n            && (!selectedBaselineContent.length && !selectedHSPContent.length && !selectedSystemContent.length)) {\n            newSelectedSystems = systems.map(function(system) {\n                return { id: system.id, icon: <ServerIcon />, name: system.display_name };\n            });\n\n            handleSystemSelection(newSelectedSystems, true);\n\n            newSelectedBaselines = baselines.map(function(baseline) {\n                return { id: baseline.id, icon: <BlueprintIcon />, name: baseline.display_name };\n            });\n\n            handleBaselineSelection(newSelectedBaselines, true);\n\n            historicalProfiles.forEach(function(hsp) {\n                let content = {\n                    system_name: hsp.display_name,\n                    captured_date: hsp.updated,\n                    id: hsp.id,\n                    system_id: hsp.system_id\n                };\n\n                handleHSPSelection(content);\n            });\n        }\n    }\n    /*eslint-enable camelcase*/\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return { id: item[0], icon: <BlueprintIcon />, name: item[1] };\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push({\n                id: baselineTableData[rowId][0], icon: <BlueprintIcon />, name: baselineTableData[rowId][1]\n            });\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return { id: baseline[0], icon: <BlueprintIcon />, name: baseline[1] };\n        });\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            selectedSystems = entities.rows.map(function(row) {\n                return { id: row.id, name: row.display_name, icon: <ServerIcon /> };\n            });\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({ id: row.id, name: row.display_name, icon: <ServerIcon /> });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, handleBaselineSelection, handleHSPSelection,\n            historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles, selectedBaselineIds, selectedBaselineContent,\n            selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent, selectedSystemIds, setSelectedSystemIds,\n            totalBaselines } = this.props;\n        const { columns, basketIsVisible } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                hasHistoricalDropdown={ permissions.hspRead }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                let rowValue = subFactItem.systems.filter(cell => cell.value !== '')[0].value;\n                                rows.push(<tr\n                                    className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }\n                                    data-ouia-component-type='PF4/TableRow'\n                                    data-ouia-component-id={ 'comparison-table-row-multivalue-' + comparison.name + '-' + rowValue }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                permissions={ permissions }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                                selectedHSPIds={ selectedHSPIds }\n                                selectHistoricProfiles={ selectHistoricProfiles }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(async function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            await addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    await clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    await handleFactFilter(id);\n                } else {\n                    await filterByFact('');\n                }\n            }\n        } else {\n            await this.clearAllStateChips();\n            await this.clearAllFactChips();\n        }\n\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.loadEntities();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location.search !== '' && this.props.location.search === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, factSort, filterByFact, handleFactFilter, historicalProfiles, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, history, loading, page, perPage, referenceId, selectedBaselineIds, selectedHSPIds,\n            stateFilters, stateSort, systems, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                        setHistory={ this.setHistory }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    handleBaselineSelection={ handleBaselineSelection }\n                                                    handleHSPSelection={ handleHSPSelection }\n                                                    handleSystemSelection={ handleSystemSelection }\n                                                    permissions={ value.permissions }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    addStateFilter={ addStateFilter }\n                                                    stateFilters={ stateFilters }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    factFilter={ factFilter }\n                                                    setHistory={ this.setHistory }\n                                                    factSort={ factSort }\n                                                    stateSort={ stateSort }\n                                                    referenceId={ referenceId }\n                                                    systems={ systems }\n                                                    baselines={ baselines }\n                                                    historicalProfiles={ historicalProfiles }\n                                                    selectedHSPIds={ selectedHSPIds }\n                                                    selectedBaselineIds={ selectedBaselineIds }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    ouiaId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}