{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaseline/EditBaseline.js","webpack:///./src/SmartComponents/SystemsTable/NotificationsSystemsTable.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/DeleteNotificationModal/DeleteNotificationModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/SystemNotification.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselinePage.js"],"names":["EditBaselineNameModal","props","cancelModal","toggleEditNameModal","baselineData","updateBaselineName","display_name","checkKeyPress","event","key","preventDefault","confirmModal","state","baselineName","value","setState","bind","this","patchBaseline","id","facts_patch","error","hasError","Object","prototype","hasOwnProperty","call","ValidatedOptions","className","Form","FormGroup","label","isRequired","fieldId","helperTextInvalid","detail","validated","onKeyPress","TextInput","type","onChange","aria-label","modalOpened","Modal","variant","ModalVariant","title","isOpen","onClose","actions","Button","ouiaId","onClick","status","Alert","isInline","renderModalBody","Component","propTypes","PropTypes","connect","dispatch","baselineId","newBaselineBody","editBaselineActions","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","subFact","EditBaselineKebab","isDisabled","kebabOpened","toggleKebab","toggleModalOpened","dropdownItems","categoryMessage","factMessage","deleteFactModalHelpers","DropdownItem","component","data-ouia-component-id","length","DeleteFactModal","toggleModal","Dropdown","style","float","toggle","KebabToggle","data-ouia-component-type","onToggle","isPlain","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","editBaselineEmptyState","hasWritePermissions","undefined","Tooltip","content","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","onBulkSelect","exportToCSV","tableData","totalFacts","Toolbar","ToolbarContent","ToolbarItem","BulkSelect","count","items","checked","helpers","onSelect","ToolbarGroup","ExportCSVButton","FactModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","isCategory","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","fetchBaselineData","newAPIBody","addFact","editFact","newFactData","editedFactData","Checkbox","name","isChecked","inlineError","placeholder","isSubFact","factModalOpened","baselineUUID","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","FACT_NAME","errorMessage","loadingColumns","transforms","cellWidth","SkeletonTable","columns","rowSize","canSelectAll","isSelectable","expandedRows","includes","AngleDownIcon","expandRow","AngleRightIcon","row","rows","baseline_facts","find","baselineFact","renderExpandableRowButton","category","rowData","i","renderRowData","editBaselineError","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","UndoIcon","renderHeaderRow","renderRows","baselineDataLoading","ErrorAlert","renderEmptyState","Card","CardBody","renderLoadingRows","renderTable","history","match","SystemsTable","setSelectedSystemIds","systemIds","compareActions","driftClearFilters","systemsTableActions","updateColumns","selectEntities","toSelect","payload","createBaselineModal","hasHistoricalDropdown","historicalProfiles","hasMultiSelect","selectHistoricProfiles","hasInventoryReadPermissions","selectVariant","systemNotificationIds","toolbarButton","isAddSystemNotifications","registry","onSystemSelect","selectSystemsToAdd","deleteNotifications","addNewListener","tagsFilter","useSelector","globalFilterState","workloadsFilter","sidsFilter","entities","selectedSystemIds","getEntities","useRef","selectedRef","deselectHistoricalProfiles","bulk","useEffect","window","entityListener","on","callback","isEqual","current","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","selectedReducer","showTags","noDetail","customFilters","tags","filter","system_profile","SAP","sap_system","sap_sids","tableProps","_items","config","currIds","slice","page","per_page","hasItems","data","results","map","system","uuid","total","bulkSelect","actionsConfig","LockIcon","selectedHSPIds","toolbarDropdown","defaultProps","useState","setRegistry","listener","MiddlewareListener","ReducerRegistry","getMiddleware","promiseMiddleware","store","Provider","addNew","DeleteNotificationModal","deleteNotification","fetchSystems","systemsToDelete","toggleDeleteNotificationsModal","deleteNotificationsModalOpened","types","systemsToAdd","SystemNotification","setSystemsToDelete","array","newIds","newId","some","existingId","addNotification","addNotifications","buildNotificationsButton","getNotifications","systemNotificationLoaded","NotificationsSystemsTable","Bullseye","Spinner","size","setSystemsToAdd","systemNotificationsState","systemNotificationsActions","EditBaselinePage","changeActiveTab","tabIndex","activeTab","renderPageHeader","hasReadPermissions","PageHeader","Skeleton","SkeletonSize","renderBreadcrumb","renderPageTitle","renderTabs","PageHeaderTitle","goToBaselinesList","params","insights","chrome","auth","getUser","appAction","appObjectId","document","clearBaselineData","fetchBaselines","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","EditAltIcon","Tabs","activeKey","Tab","eventKey","baselinesWrite","inventoryRead","permissions","baselinesRead","Main","renderMain","withRouter","tableId","baselinesTableActions","exportData","baselineRowData","historicProfileIds","historicProfilesActions"],"mappings":"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","file":"js/215.31f0734dab0c9ab7d7db.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = Object.prototype.hasOwnProperty.call(error, 'status')  ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(error, 'detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"save\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"cancel\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import editBaselineHelpers from '../EditBaseline/helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../EditBaseline/helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                data-ouia-component-id='delete-facts-dropdown-item'\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={{ float: 'left' }}\n                    toggle={ <KebabToggle\n                        data-ouia-component-id='delete-facts-dropdown-toggle'\n                        data-ouia-component-type='PF4/DropdownToggle'\n                        onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                    ouiaId='delete-facts-dropdown'\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { editBaselineEmptyState, hasWritePermissions, isDisabled } = this.props;\n\n        return (\n            <React.Fragment>\n                { !hasWritePermissions && hasWritePermissions !== undefined\n                    ? <Tooltip\n                        content={ <div>You do not have permissions to perform this action</div> }\n                    >\n                        <div className={ editBaselineEmptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }\n                                ouiaId='add-fact-or-category-button'\n                            >\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }\n                        ouiaId='add-fact-or-category-button'\n                    >\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    editBaselineEmptyState: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    ouiaId='edit-baseline-export-to-csv'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { hasWritePermissions, isDisabled, onBulkSelect, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                            ouiaId='edit-baseline-bulk-selector-dropdown'\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ isDisabled }\n                            hasWritePermissions={ hasWritePermissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                                ouiaId='edit-baseline-export-dropdown'\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    hasWritePermissions: PropTypes.bool\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../EditBaseline/helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            data-ouia-component-type='PF4/Checkbox'\n            data-ouia-component-id='category-checkbox'\n            className=\"sm-padding-bottom\"\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { inlineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label={ isCategory ? 'Category name' : 'Fact name' }\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact name'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='fact-name-input'\n                        value={ factName }\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        onChange={ this.handleNewName }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"fact name\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { inlineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label='Value'\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact value'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='value-input'\n                        value={ factValue }\n                        type=\"text\"\n                        placeholder=\"Value\"\n                        onChange={ this.handleNewValue }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"value\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { inlineError, isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                <Form>\n                    { this.renderFactInput() }\n                    { isCategory ? null : this.renderValueInput() }\n                </Form>\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                ouiaId='add-fact-modal'\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"fact-modal-save-button\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"fact-modal-cancel-button\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    inlineError: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineToolbar from '../EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../../ErrorAlert/ErrorAlert';\nimport FactModal from '../FactModal/FactModal';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../../constants';\nimport EmptyStateDisplay from '../../../EmptyStateDisplay/EmptyStateDisplay';\n\nclass EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ]\n        };\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderHeaderRow(hasWritePermissions) {\n        return (\n            <tr\n                key='edit-baseline-table-header'\n                data-ouia-component-type='PF4/TableHeaderRow'\n                data-ouia-component-id='edit-baseline-table-header-row'>\n                { hasWritePermissions ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        const { loadingColumns } = this.state;\n\n        return <SkeletonTable\n            columns={ loadingColumns }\n            rowSize={ 8 }\n            onSelect={ true }\n            canSelectAll={ false }\n            isSelectable={ true }\n        />;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className=\"pointer active-blue\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className=\"pointer\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                data-ouia-component-type='PF4/Checkbox'\n                data-ouia-component-id={ 'checkbox-' + fact[FACT_NAME] }\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, hasWritePermissions) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        hasWritePermissions\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, hasWritePermissions }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    hasWritePermissions\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        hasWritePermissions\n                    }));\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'edit-baseline-table-row-' + subFact[FACT_NAME] }\n                        category={ factData?.name }\n                        key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, hasWritePermissions }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(hasWritePermissions) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], hasWritePermissions);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState(hasWritePermissions) {\n        const { editBaselineEmptyState, editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + editBaselineError.status + ': ' + editBaselineError.detail }\n                button={ <a onClick={ () => this.retryBaselineFetch() }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton\n                    hasWritePermissions={ hasWritePermissions }\n                    editBaselineEmptyState={ editBaselineEmptyState }\n                /> }\n            />;\n        }\n    }\n\n    renderTable(hasWritePermissions) {\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table\">\n                <thead>\n                    { this.renderHeaderRow(hasWritePermissions) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { this.renderRows(hasWritePermissions) }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, baselineDataLoading, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData, hasWritePermissions } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <React.Fragment>\n                { factModalOpened\n                    ? <FactModal />\n                    : <div></div>\n                }\n                <ErrorAlert\n                    error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                    onClose={ clearErrorData }\n                />\n                { editBaselineEmptyState\n                    ? this.renderEmptyState(hasWritePermissions)\n                    : <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            <EditBaselineToolbar\n                                selected={ selected }\n                                onBulkSelect={ this.onBulkSelect }\n                                isDisabled={ editBaselineTableData.length === 0 || !hasWritePermissions }\n                                totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                baselineData={ baselineData }\n                                exportToCSV={ exportToCSV }\n                                tableData={ editBaselineTableData }\n                                hasWritePermissions={ hasWritePermissions }\n                            />\n                            { baselineDataLoading\n                                ? this.renderLoadingRows()\n                                : this.renderTable(hasWritePermissions)\n                            }\n                        </CardBody>\n                    </Card>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    hasWritePermissions: PropTypes.bool\n};\n\nexport default EditBaseline;\n","/*eslint-disable camelcase*/\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { Provider } from 'react-redux';\nimport MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/files/MiddlewareListener';\n\nimport selectedReducer from '../../store/reducers';\nimport { compareActions } from '../modules';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport helpers from '../helpers';\nimport isEqual from 'lodash/isEqual';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key)),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport const SystemsTable = connect(null, mapDispatchToProps)(({\n    baselineId,\n    setSelectedSystemIds,\n    driftClearFilters,\n    createBaselineModal,\n    hasHistoricalDropdown,\n    historicalProfiles,\n    hasMultiSelect,\n    selectHistoricProfiles,\n    updateColumns,\n    hasInventoryReadPermissions,\n    selectEntities,\n    selectVariant,\n    systemNotificationIds,\n    toolbarButton,\n    isAddSystemNotifications,\n    registry,\n    onSystemSelect,\n    selectSystemsToAdd,\n    deleteNotifications,\n    addNewListener\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n    const entities = useSelector(({ entities }) => entities);\n    const selected = useSelector(({ entities }) => entities?.selectedSystemIds || []);\n    const getEntities = useRef(() => undefined);\n    const selectedRef = useRef([]);\n\n    const deselectHistoricalProfiles = () => {\n        if (!hasMultiSelect) {\n            updateColumns('display_name');\n            selectHistoricProfiles([]);\n        }\n    };\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    useEffect(() => {\n        window.entityListener = addNewListener({\n            on: 'SELECT_ENTITY',\n            callback: () => {\n                !hasMultiSelect ? deselectHistoricalProfiles() : null;\n            }\n        });\n    });\n\n    useEffect(() => {\n        if (!isEqual(selectedRef.current, selected)) {\n            selectedRef.current = [ ...selected ];\n            onSystemSelect(selected);\n        }\n    });\n\n    return (\n        hasInventoryReadPermissions ? (\n            <InventoryTable\n                onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                    getEntities.current = api?.getEntities;\n                    driftClearFilters();\n                    registry.register(mergeWithEntities(\n                        selectedReducer(\n                            INVENTORY_ACTION_TYPES, baselineId, createBaselineModal, historicalProfiles,\n                            hasMultiSelect, hasHistoricalDropdown, deselectHistoricalProfiles, isAddSystemNotifications,\n                            selectHistoricProfiles, systemNotificationIds, selectSystemsToAdd, deleteNotifications\n                        )\n                    ));\n                    setSelectedSystemIds(selected);\n                } }\n                showTags\n                noDetail\n                customFilters={{\n                    tags: tagsFilter,\n                    filter: {\n                        system_profile: {\n                            ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                            ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                        }\n                    }\n                }}\n                tableProps={{\n                    canSelectAll: false,\n                    selectVariant,\n                    ouiaId: 'systems-table'\n                }}\n                getEntities={ async (_items, config) => {\n                    const currIds = (systemNotificationIds || [])\n                    .slice((config.page - 1) * config.per_page, config.page * config.per_page);\n                    const data = await getEntities.current?.(\n                        currIds,\n                        {\n                            hasItems: true\n                        },\n                        true\n                    );\n                    return {\n                        ...data,\n                        results: data.results.map((system) => ({\n                            ...system,\n                            ...currIds.find(({ uuid }) => uuid === system.id) || {}\n                        })),\n                        total: (systemNotificationIds || []).length,\n                        page: config.page,\n                        per_page: config.per_page\n                    };\n                } }\n                bulkSelect={ onSelect && {\n                    isDisabled: !hasMultiSelect,\n                    count: entities?.selectedSystemIds ? entities.selectedSystemIds.length : 0,\n                    items: [{\n                        title: `Select none (0)`,\n                        onClick: () => {\n                            onSelect('none');\n                        }\n                    }, {\n                        title: `Select page (${ entities?.count || 0 })`,\n                        onClick: () => {\n                            onSelect('page');\n                        }\n                    }],\n                    onSelect: (value) => {\n                        value ? onSelect('page') : onSelect('none');\n                    },\n                    checked: entities?.selectedSystemIds\n                        ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                        : null\n                } }\n                actionsConfig={{\n                    actions: [\n                        toolbarButton,\n                        <div\n                            className='pointer'\n                            key=\"delete-baseline-notification\"\n                            onClick={ () => deleteNotifications(entities?.selectedSystemIds) }\n                            isDisabled={ !entities?.selectedSystemIds?.length }\n                        >\n                            { entities?.selectedSystemIds?.length > 1 ? 'Delete notifications' : 'Delete notification' }\n                        </div>\n                    ]\n                }}\n            />\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n});\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    hasHistoricalDropdown: PropTypes.bool,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    updateColumns: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    hasInventoryReadPermissions: PropTypes.bool,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string,\n    systemNotificationIds: PropTypes.array,\n    baselineId: PropTypes.string,\n    toolbarDropdown: PropTypes.array,\n    isAddSystemNotifications: PropTypes.bool,\n    registry: PropTypes.shape({\n        register: PropTypes.func\n    }),\n    onSystemSelect: PropTypes.func\n};\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst SystemsTableWithContext = (props) => {\n    const [ registry, setRegistry ] = useState();\n    const listener = useRef();\n\n    useEffect(() => {\n        listener.current = new MiddlewareListener();\n        setRegistry(() => new ReducerRegistry({}, [ listener.current.getMiddleware(), promiseMiddleware() ]));\n    }, []);\n    return registry?.store ? <Provider store={ registry.store }>\n        <SystemsTable { ...props } registry={ registry } addNewListener={ (...args) => listener.current.addNew(...args) } />\n    </Provider> : null;\n};\n\nexport default SystemsTableWithContext;\n/*eslint-enable camelcase*/\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport class DeleteNotificationModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    /*eslint-disable camelcase*/\n    deleteNotification = async () => {\n        const { baselineId, deleteNotifications, fetchSystems, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        await deleteNotifications(baselineId, systemsToDelete);\n        fetchSystems(baselineId);\n        toggleDeleteNotificationsModal();\n    }\n    /*eslint-enable camelcase*/\n\n    render() {\n        const { deleteNotificationsModalOpened, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    ouiaId='delete-baseline-notification-modal'\n                    variant={ ModalVariant.small }\n                    title={ systemsToDelete?.length === 1 ? 'Delete baseline notification' : 'Delete baseline notifications' }\n                    isOpen={ deleteNotificationsModalOpened }\n                    onClose={ () => toggleDeleteNotificationsModal() }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='delete-baseline-notification-button'\n                            variant=\"danger\"\n                            onClick={ this.deleteNotification }\n                        >\n                            Delete\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='delete-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ () => toggleDeleteNotificationsModal() }\n                        >\n                        Cancel\n                        </Button>\n                    ] }\n                >\n                    You have selected { ' ' } { systemsToDelete?.length === 1 ? 'a baseline notification' : 'multiple baseline notifications' }\n                    { ' ' } to be deleted.\n                    <br></br>\n                    { <div className=\"md-padding-top\">Deleting a baseline notification cannot be undone.</div> }\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nDeleteNotificationModal.propTypes = {\n    baselineId: PropTypes.string,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    deleteNotifications: PropTypes.func,\n    fetchSystems: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    toggleDeleteNotificationsModal: PropTypes.func\n};\n\nexport default DeleteNotificationModal;\n","import types from './types';\nimport api from '../../../../../api';\n\nfunction toggleDeleteNotificationsModal() {\n    return {\n        type: types.TOGGLE_DELETE_NOTIFICATION_MODAL\n    };\n}\n\nfunction setSystemsToDelete(systemIds) {\n    return {\n        type: types.SET_SYSTEMS_TO_DELETE,\n        payload: systemIds\n    };\n}\n\nfunction deleteNotifications(baselineId, systemIds) {\n    return {\n        type: types.DELETE_NOTIFICATIONS,\n        payload: api.deleteSystemNotifications(baselineId, systemIds)\n    };\n}\n\nfunction getNotifications(baselineId) {\n    return {\n        type: types.GET_NOTIFICATIONS,\n        payload: api.getBaselineNotification(baselineId)\n    };\n}\n\nfunction addNotifications(baselineId, systemsToAdd) {\n    return {\n        type: types.ADD_NOTIFICATIONS,\n        payload: api.addSystemNotification(baselineId, systemsToAdd)\n    };\n}\n\nexport default {\n    toggleDeleteNotificationsModal,\n    setSystemsToDelete,\n    deleteNotifications,\n    getNotifications,\n    addNotifications\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Bullseye, Button, Modal, ModalVariant, Spinner } from '@patternfly/react-core';\nimport NotificationsSystemsTable from '../../../SystemsTable/NotificationsSystemsTable';\nimport SystemsTable from '../../../SystemsTable/SystemsTable';\nimport DeleteNotificationModal from './DeleteNotificationModal/DeleteNotificationModal';\nimport { systemNotificationsActions } from './redux';\n\nexport class SystemNotification extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            systemsToAdd: []\n        };\n\n        this.toggleModal = () => {\n            const { setSelectedSystemIds } = this.props;\n            const { modalOpened } = this.state;\n\n            setSelectedSystemIds([]);\n            this.setState({ modalOpened: !modalOpened });\n        };\n    }\n\n    deleteNotifications = async (systemIds) => {\n        const { setSystemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        toggleDeleteNotificationsModal();\n        setSystemsToDelete(systemIds);\n    }\n\n    selectSystemsToAdd = (systemIds) => {\n        const { systemNotificationIds } = this.props;\n        let array = [ ...systemNotificationIds ];\n\n        const newIds = systemIds.filter((newId) => !array.some((existingId) => existingId === newId));\n\n        this.setState({ systemsToAdd: newIds });\n    }\n\n    addNotification = async () => {\n        const { systemsToAdd } = this.state;\n        const { addNotifications, baselineId } = this.props;\n\n        await addNotifications(baselineId, systemsToAdd);\n        this.setState({ systemsToAdd: []});\n\n        this.toggleModal();\n        this.fetchSystems(baselineId);\n    }\n\n    buildNotificationsButton = () => {\n        return <Button\n            key=\"add-baseline-notification\"\n            variant=\"primary\"\n            onClick={ this.toggleModal }\n            ouiaId=\"add-baseline-notification-button\"\n        >\n            Add system\n        </Button>;\n    }\n\n    fetchSystems = async (baselineId) => {\n        const { getNotifications } = this.props;\n\n        getNotifications(baselineId);\n    }\n\n    async componentDidMount() {\n        await this.fetchSystems(this.props.baselineId);\n    }\n\n    render() {\n        const { baselineId, baselineName, deleteNotifications, deleteNotificationsModalOpened, driftClearFilters, entities,\n            hasInventoryReadPermissions, selectEntities, selectHistoricProfiles, setSelectedSystemIds, systemNotificationIds,\n            systemsToDelete, toggleDeleteNotificationsModal, updateColumns, systemNotificationLoaded } = this.props;\n        const { modalOpened } = this.state;\n\n        return (\n            <React.Fragment>\n                <DeleteNotificationModal\n                    baselineId={ baselineId }\n                    deleteNotifications={ deleteNotifications }\n                    deleteNotificationsModalOpened={ deleteNotificationsModalOpened }\n                    systemsToDelete={ systemsToDelete }\n                    toggleDeleteNotificationsModal={ toggleDeleteNotificationsModal }\n                    fetchSystems={ this.fetchSystems }\n                />\n                <Modal\n                    className=\"drift\"\n                    ouiaId='add-baseline-notification-modal'\n                    variant={ ModalVariant.medium }\n                    title={ 'Associate system with ' + baselineName }\n                    isOpen={ modalOpened }\n                    onClose={ this.toggleModal }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='add-baseline-notification-button'\n                            variant=\"primary\"\n                            onClick={ this.addNotification }\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='add-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ this.toggleModal }\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <SystemsTable\n                        hasMultiSelect={ true }\n                        hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                        entities={ entities }\n                        selectVariant='checkbox'\n                        systemNotificationIds={ systemNotificationIds }\n                        baselineId={ baselineId }\n                        isAddSystemNotifications={ true }\n                        driftClearFilters={ driftClearFilters }\n                        selectEntities={ selectEntities }\n                        selectHistoricProfiles={ selectHistoricProfiles }\n                        updateColumns={ updateColumns }\n                        selectSystemsToAdd={ this.selectSystemsToAdd }\n                        selectedSystemIds={ entities?.selectedSystemIds || [] }\n                    />\n                </Modal>\n                { systemNotificationLoaded ? <NotificationsSystemsTable\n                    hasMultiSelect={ true }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    selectVariant='checkbox'\n                    systemNotificationIds={ systemNotificationIds }\n                    baselineId={ baselineId }\n                    toolbarButton={ this.buildNotificationsButton() }\n                    driftClearFilters={ driftClearFilters }\n                    selectEntities={ selectEntities }\n                    selectHistoricProfiles={ selectHistoricProfiles }\n                    onSystemSelect={ setSelectedSystemIds }\n                    updateColumns={ updateColumns }\n                    deleteNotifications={ this.deleteNotifications }\n                /> : <Bullseye><Spinner size=\"xl\"/></Bullseye> }\n            </React.Fragment>\n        );\n    }\n}\n\nSystemNotification.propTypes = {\n    addNotifications: PropTypes.func,\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    hasInventoryReadPermissions: PropTypes.bool,\n    entities: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectEntities: PropTypes.func,\n    toggleDeleteNotificationsModal: PropTypes.func,\n    setSystemsToDelete: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    deleteNotifications: PropTypes.func,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    getNotifications: PropTypes.func,\n    setSystemsToAdd: PropTypes.func,\n    systemNotificationIds: PropTypes.array,\n    systemNotificationLoaded: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        deleteNotificationsModalOpened: state.systemNotificationsState.deleteNotificationsModalOpened,\n        systemNotificationIds: state.systemNotificationsState.systemNotificationIds,\n        systemNotificationLoaded: state.systemNotificationsState.systemNotificationLoaded,\n        systemsToDelete: state.systemNotificationsState.systemsToDelete\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotifications: (baselineId, systemsToAdd) => dispatch(systemNotificationsActions.addNotifications(baselineId, systemsToAdd)),\n        toggleDeleteNotificationsModal: () => dispatch(systemNotificationsActions.toggleDeleteNotificationsModal()),\n        setSystemsToDelete: (systemIds) => dispatch(systemNotificationsActions.setSystemsToDelete(systemIds)),\n        deleteNotifications: (baselineId, systemIds) => dispatch(systemNotificationsActions.deleteNotifications(baselineId, systemIds)),\n        getNotifications: (baselineId) => dispatch(systemNotificationsActions.getNotifications(baselineId)),\n        setSelectedSystemIds: (systemIds) => dispatch({ type: 'SET_SELECTED_SYSTEM_IDS', payload: systemIds })\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemNotification);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbHeading, Tab, Tabs } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { EditAltIcon, LockIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport EditBaseline from './EditBaseline/EditBaseline';\nimport SystemNotification from './SystemNotification/SystemNotification';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport systemsTableActions from '../../SystemsTable/actions';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaselinePage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            activeTab: 0\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        const { match: { params }} = this.props;\n\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-view');\n        await window.insights?.chrome?.appObjectId(params.id);\n    }\n\n    componentDidUpdate() {\n        if (this.props.baselineData) {\n            document.title = this.props.baselineData.display_name + ' - Baselines - Drift | Red Hat Insights';\n        }\n    }\n\n    changeActiveTab = (event, tabIndex) => {\n        this.setState({ activeTab: tabIndex });\n    }\n\n    async fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        await fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { clearBaselineData, fetchBaselines, history } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        fetchBaselines('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData, hasReadPermissions) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb ouiaId='edit-baseline-breadcrumb'>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData && hasReadPermissions\n                ? <BreadcrumbHeading>\n                    { baselineData.display_name }\n                </BreadcrumbHeading>\n                : null\n            }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageTitle(baselineData, hasReadPermissions, hasWritePermissions) {\n        let pageTitle;\n\n        if (hasReadPermissions) {\n            if (hasWritePermissions) {\n                pageTitle = <React.Fragment>\n                    <span className='pf-c-title pf-m-2xl'>\n                        { !_.isEmpty(baselineData) ? baselineData.display_name : null }\n                    </span>\n                    <span>\n                        { <EditAltIcon\n                            className='pointer not-active edit-icon-margin'\n                            data-ouia-component-id='edit-baseline-name-button'\n                            data-ouia-component-type='PF4/Button'\n                            onClick={ () => this.toggleEditNameModal() } /> }\n                    </span>\n                </React.Fragment>;\n            } else {\n                pageTitle = <React.Fragment>{ !_.isEmpty(baselineData) ? baselineData.display_name : null }</React.Fragment>;\n            }\n        } else {\n            pageTitle = <React.Fragment>{ 'Baseline' }</React.Fragment>;\n        }\n\n        return pageTitle;\n    }\n\n    renderPageHeader = (hasReadPermissions, hasWritePermissions) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader className='bottom-padding-0'>\n                        { this.renderBreadcrumb(baselineData, hasReadPermissions) }\n                        <div id=\"edit-baseline-title\">\n                            { this.renderPageTitle(baselineData, hasReadPermissions, hasWritePermissions) }\n                        </div>\n                        { this.renderTabs() }\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderTabs() {\n        const { activeTab } = this.state;\n\n        return <div>\n            <Tabs\n                activeKey={ activeTab }\n                onSelect={ this.changeActiveTab }\n            >\n                <Tab\n                    eventKey={ 0 }\n                    title=\"Facts\"\n                    id=\"baseline-tab\"\n                    data-ouia-component-id=\"baseline-tab-button\"\n                >\n                </Tab>\n                <Tab\n                    eventKey={ 1 }\n                    title=\"Systems\"\n                    id=\"system-notifications-tab\"\n                    data-ouia-component-id=\"\"\n                >\n                </Tab>\n            </Tabs>\n        </div>;\n    }\n\n    renderMain(baselinesWrite, inventoryRead) {\n        const { baselineData, baselineDataLoading, clearErrorData, driftClearFilters, editBaselineEmptyState, editBaselineError,\n            editBaselineTableData, entities, expandRow, expandedRows, exportToCSV, factModalOpened, selectFact,\n            match: { params }, selectEntities, selectHistoricProfiles, setSelectedSystemIds, updateColumns } = this.props;\n        const { activeTab } = this.state;\n        let body;\n\n        if (activeTab === 0) {\n            body = <EditBaseline\n                baselineData={ baselineData }\n                baselineDataLoading={ baselineDataLoading }\n                clearErrorData={ clearErrorData }\n                editBaselineEmptyState={ editBaselineEmptyState }\n                editBaselineError={ editBaselineError }\n                editBaselineTableData={ editBaselineTableData }\n                expandRow={ expandRow }\n                expandedRows={ expandedRows }\n                exportToCSV={ exportToCSV }\n                factModalOpened={ factModalOpened }\n                hasWritePermissions={ baselinesWrite }\n                history={ history }\n                selectFact={ selectFact }\n            />;\n        } else {\n            body = <SystemNotification\n                baselineId={ params.id }\n                baselineName={ baselineData?.display_name }\n                hasInventoryReadPermissions={ inventoryRead }\n                entities={ entities }\n                driftClearFilters={ driftClearFilters }\n                selectEntities={ selectEntities }\n                selectHistoricProfiles={ selectHistoricProfiles }\n                setSelectedSystemIds={ setSelectedSystemIds }\n                updateColumns={ updateColumns }\n            />;\n        }\n\n        return body;\n    }\n\n    /*eslint-disable*/\n    render() {\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions.baselinesRead, value.permissions.baselinesWrite) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to view this Baseline' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : this.renderMain(value.permissions.baselinesWrite, value.permissions.inventoryRead)\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n/*eslint-enable*/\n\nEditBaselinePage.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    hasWritePermissions: PropTypes.bool,\n    fetchBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectEntities: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError,\n        entities: state.entities\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        },\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key)),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaselinePage));\n"],"sourceRoot":""}