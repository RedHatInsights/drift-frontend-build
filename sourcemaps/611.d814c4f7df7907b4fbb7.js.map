{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","buildSystemColumns","originalColumns","permissions","columns","map","column","key","title","width","renderFunc","value","_id","display_selected_hsp","hspRead","push","isStatic","deselectHistoricalProfiles","selectSingleHSP","updateColumns","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","renderRadioButtons","className","Form","FormGroup","label","isRequired","type","helperTextInvalid","Object","prototype","hasOwnProperty","call","detail","fieldId","validated","onKeyPress","TextInput","placeholder","onChange","ValidatedOptions","bind","fromScratchChecked","transforms","sortable","cellWidth","setState","handleChecked","_","currentTarget","window","entityListener","addNewListener","actionType","callback","createBaselineModalOpened","removeEventListener","this","selectedKey","radioChecked","keys","forEach","substring","length","toLowerCase","createBaseline","selectedBaselineIds","history","entities","newBaselineObject","display_name","baseline_facts","selectedSystemIds","inventory_uuid","selectedHSP","hsp_uuid","id","baselineData","Radio","isChecked","ouiaId","name","loading","totalBaselines","BaselinesTable","tableId","tableData","hasMultiSelect","SystemsTable","createBaselineModal","historicalProfiles","selectVariant","systemColumns","Button","variant","isDisabled","findSelectedRadio","onClick","globalFilterState","Modal","isOpen","onClose","actions","renderActions","GlobalFilterAlert","status","Alert","isInline","Component","propTypes","PropTypes","updatePagination","selectHistoricProfiles","setSelectedSystemIds","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","dispatch","createBaselineModalActions","uuid","baselinesTableActions","profile","systemsTableActions","BaselinesPage","fetchBaseline","baselineId","item","onBulkSelect","ids","baseline","renderEmptyState","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","undefined","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","error","button","UndoIcon","AddCircleOIcon","CreateBaselineButton","insights","chrome","auth","getUser","appAction","clearEditBaselineData","CardBody","kebab","createButton","exportButton","PageHeader","PageHeaderTitle","Main","baselinesRead","LockIcon","ErrorAlert","Card","renderTable","entitiesLoading","checkboxTable","editBaselineActions","historicProfileIds","historicProfilesActions","addSystemModalActions"],"mappings":"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","file":"js/611.4cb38f653184d2278686.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../../store';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../../GlobalFilterAlert/GlobalFilterAlert';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport systemsTableActions from '../../SystemsTable/actions';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(40) ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    buildSystemColumns = (originalColumns) => {\n        const { permissions } = this.props;\n        let columns = originalColumns.map(function(column) {\n            if (column.key === 'display_name' || column.key === 'display_selected_hsp') {\n                return {\n                    title: 'Name',\n                    key: column.key,\n                    props: { width: 20 },\n                    renderFunc: (value, _id, { display_selected_hsp: selectedHSP }) => {\n                        return selectedHSP || value;\n                    }\n                };\n            } else {\n                return column;\n            }\n        });\n\n        if (permissions.hspRead) {\n            columns.push({ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' });\n        }\n\n        return columns;\n    };\n\n    async componentDidMount() {\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: () => {\n                this.props.createBaselineModalOpened ? this.deselectHistoricalProfiles() : null;\n            }\n        });\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_SINGLE_HSP',\n            callback: () => {\n                this.props.updateColumns('display_selected_hsp');\n            }\n        });\n    }\n\n    async componentWillUnmount() {\n        window.removeEventListener('SELECT_ENTITY', this.deselectHistoricalProfiles);\n        window.removeEventListener('SELECT_SINGLE_HSP', this.props.updateColumns);\n    }\n\n    deselectHistoricalProfiles = async () => {\n        const { selectSingleHSP, updateColumns } = this.props;\n\n        await updateColumns('display_name');\n        selectSingleHSP();\n    };\n\n    findSelectedRadio() {\n        const { copyBaselineChecked, copySystemChecked, fromScratchChecked } = this.state;\n        const radioChecked = { copyBaselineChecked, copySystemChecked, fromScratchChecked };\n        let keys = Object.keys(radioChecked);\n        let selectedKey;\n\n        keys.forEach(function(key) {\n            if (radioChecked[key]) {\n                selectedKey = key.substring(0, key.length - 7).toLowerCase();\n            }\n        });\n\n        return selectedKey;\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectSingleHSP } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities?.selectedSystemIds.length && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities?.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (entities?.selectedHSP && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = entities.selectedHSP.id;\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                selectSingleHSP();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n\n        let id = [ baselineTableData[rowId][0] ];\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines, selectSingleHSP } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        selectSingleHSP();\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                ouiaId='create-baseline-from-scratch-radio'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                ouiaId='create-baseline-copy-baseline-radio'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                ouiaId='create-baseline-copy-system-radio'\n                name='baseline-create-options'\n                label='Copy an existing system or historical profile'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, createBaselineModalOpened, loading, permissions, selectedBaselineIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n                permissions={ permissions }\n                hasMultiSelect={ false }\n                selectedBaselineIds={ selectedBaselineIds }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { entities, permissions } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system or historical profile to copy from</b>\n            <br></br>\n            <SystemsTable\n                createBaselineModal={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ entities?.selectedHSP ? [ entities.selectedHSP ] : [] }\n                permissions={ permissions }\n                entities={ entities }\n                selectVariant='radio'\n                systemColumns={ this.buildSystemColumns }\n                deselectHistoricalProfiles={ this.deselectHistoricalProfiles }\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <div className='md-padding-top md-padding-bottom'>\n                <Form>\n                    <FormGroup\n                        label='Baseline name'\n                        isRequired\n                        type=\"text\"\n                        helperTextInvalid={ Object.prototype.hasOwnProperty.call(createBaselineError, 'detail') ? createBaselineError.detail : null }\n                        fieldId=\"name\"\n                        validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? 'error' : null }\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            className=\"fact-value\"\n                            placeholder=\"Baseline name\"\n                            value={ baselineName }\n                            type=\"text\"\n                            onChange={ this.updateBaselineName }\n                            validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? ValidatedOptions.error : null }\n                            aria-label=\"baseline name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                (!entities?.selectedSystemIds.length && !entities?.selectedHSP)\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled\n                    ouiaId={ 'create-baseline-button-' + this.findSelectedRadio() }\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"create-baseline-modal-cancel-button\"\n                >\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }\n                    ouiaId={ 'create-baseline-button-' + this.findSelectedRadio() }\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"create-baseline-modal-cancel-button\"\n                >\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened, globalFilterState } = this.props;\n        const { copySystemChecked } = this.state;\n\n        return (\n            <Modal\n                className=\"drift\"\n                width=\"1200px\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { copySystemChecked\n                    ? <GlobalFilterAlert globalFilterState={ globalFilterState }/>\n                    : null\n                }\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                        ouiaId=\"status\"\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    selectSingleHSP: PropTypes.func,\n    updateColumns: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        selectSingleHSP: (profile) => dispatch(systemsTableActions.selectSingleHSP(profile)),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaselinePage/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable, cellWidth(40) ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-list');\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable(permissions) {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                        permissions={ permissions }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = (permissions) => {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton\n                    emptyState={ emptyState }\n                    permissions={ permissions }\n                    loading={ loading } /> }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + baselineError.status + ': ' + baselineError.detail }\n                button={ <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch, selectHistoricProfiles, setSelectedSystemIds } = this.props;\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        <CreateBaselineModal\n                            permissions={ value.permissions }\n                            selectHistoricProfiles={ selectHistoricProfiles }\n                            setSelectedSystemIds={ setSelectedSystemIds }\n                        />\n                        <PageHeader>\n                            <PageHeaderTitle title='Baselines'/>\n                        </PageHeader>\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState(value.permissions)\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable(value.permissions)\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    entitiesLoading: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}