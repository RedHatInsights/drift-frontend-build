{"version":3,"file":"js/149.1698321385215.afbb0a92d2d6cf117c07.js","mappings":"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","sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/RowFact.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/DriftTableRow.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterDropdown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterValue.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilter.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js"],"sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    navigate, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, factTypeFilters, stateFilters, factSort,\n    stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let filterFactType = factTypeFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    let searchString = searchPrefix + queryString.stringify({\n        system_ids: systemIds,\n        baseline_ids: baselineIds,\n        hsp_ids: hspIds,\n        reference_id: referenceId\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    navigate({\n        search: searchString + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            'filter[show]': filterFactType,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport addSystemModalHelpers from '../redux/helpers';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    async componentDidMount() {\n        addSystemModalHelpers.setContent({\n            systems: this.props.systems,\n            baselines: this.props.baselines,\n            historicalProfiles: this.props.historicalProfiles\n        }, this.props.handleSystemSelection, this.props.handleBaselineSelection, this.props.handleHSPSelection, this.props.selectedHSPContent);\n    }\n\n    toggleBasket = () => {\n        const { toggleBasketVisible } = this.props;\n\n        this.clearDeselected();\n        toggleBasketVisible();\n    }\n\n    applyChanges = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    displayBodyContent = (isEmpty) => {\n        const { entities, selectedSystemContent, selectedBaselineContent, selectedHSPContent } = this.props;\n        let bodyContent;\n\n        if (isEmpty) {\n            bodyContent = <EmptyStateDisplay\n                title='Nothing selected'\n                text={ [ 'Select systems and baselines to compare.' ] }\n            />;\n        } else {\n            bodyContent = <SelectedTable\n                selectedBaselineContent={ selectedBaselineContent }\n                entities={ entities }\n                selectedHSPContent={ selectedHSPContent }\n                findType={ this.findType }\n                handleDeselect={ this.handleDeselect }\n                selectedSystemContent={ selectedSystemContent }\n            />;\n        }\n\n        return bodyContent;\n    }\n\n    render() {\n        const { isVisible } = this.props;\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.toggleBasket() }\n                        headerContent={ <div>Selected items ({ this.findSelected() })</div> }\n                        footerContent={ <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ () => this.applyChanges() }\n                            ouiaId=\"confirm-selected-basket-button\"\n                            isDisabled={ !systemsToDeselect.length && !baselinesToDeselect.length && !hspsToDeselect.length }\n                        >\n                            Apply changes\n                        </Button> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            { this.displayBodyContent(this.findSelected() === 0) }\n                        </div> }\n                    >\n                        <a onClick={ () => this.toggleBasket() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    baselines: PropTypes.array,\n    entities: PropTypes.object,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    systems: PropTypes.array,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\nimport { RegistryContext } from '../../Utilities/registry';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]},\n                { title: 'Associated systems', transforms: [ cellWidth(20) ]}\n            ],\n            basketIsVisible: false,\n            previousSelectedBaselineIds: []\n        };\n\n        this.addSystemModal = React.createRef();\n    }\n\n    async componentDidMount() {\n\n        if (this.props.middlewareListener) {\n            window.entityListener = addNewListener(this.props.middlewareListener, {\n                actionType: 'SELECT_ENTITY',\n                callback: ({ data }) => {\n                    this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n                }\n            });\n        }\n    }\n\n    closePopover = () => {\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(false);\n        this.setState({ basketIsVisible: false });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setState({ previousSelectedBaselineIds: this.props.selectedBaselineIds });\n        }\n    }\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal, setSelectedBaselines } = this.props;\n        const { previousSelectedBaselineIds } = this.state;\n\n        setSelectedBaselines(previousSelectedBaselineIds, 'COMPARISON');\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    bulkSelectBasket = (baselineTableData, isSelected) => {\n        const { handleBaselineSelection } = this.props;\n        let selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselines, baselineTableData, emptyState, globalFilterState, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles,\n            selectedBaselineIds, selectedBaselineContent, selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent,\n            selectedSystemIds, setSelectedSystemIds, systems, totalBaselines, baselineError, revertBaselineFetch } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className='drift'\n                    ref={ this.addSystemModal }\n                    onScroll={ basketIsVisible ? this.closePopover : null }\n                    style={{ maxHeight: '600px' }}\n                    width={ '1200px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleSystemSelection={ handleSystemSelection }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                    systems={ systems }\n                                    baselines={ baselines }\n                                    historicalProfiles={ historicalProfiles }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                bulkSelectBasket={ this.bulkSelectBasket }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                                leftAlignToolbar={ true }\n                                hasSwitch={ false }\n                                emptyState={ emptyState }\n                                baselineError={ baselineError }\n                                revertBaselineFetch={ revertBaselineFetch }\n                                selectBaseline={ selectBaseline }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func,\n    setSelectedBaselines: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    emptyState: PropTypes.bool,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    middlewareListener: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.comparisonTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent,\n        emptyState: state.baselinesTableState.comparisonTable.emptyState,\n        baselineError: state.baselinesTableState.comparisonTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        setSelectedBaselines: (ids, tableId) => dispatch(baselinesTableActions.setSelectedBaselines(ids, tableId)),\n        revertBaselineFetch: () => dispatch(baselinesTableActions.revertBaselineFetch('COMPARISON'))\n    };\n}\n\nconst WrappedAddSystemModal = (props) => {\n    return <RegistryContext.Consumer>\n        {\n            registryContextValue =>\n                <AddSystemModal\n                    { ...props }\n                    middlewareListener={ registryContextValue?.middlewareListener } />\n        }\n    </RegistryContext.Consumer>;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedAddSystemModal);\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\nimport debounce from 'lodash/debounce';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.columnWidth = React.createRef();\n\n        this.state = {\n            refState: null\n        };\n    }\n\n    setColumnWidth = () => {\n        if (this.columnWidth?.current) {\n            this.props.setColumnHeaderWidth(this.columnWidth.current.offsetWidth);\n            this.setState({ refState: this.columnWidth });\n        }\n    };\n\n    componentDidMount() {\n        this.setColumnWidth();\n        window.addEventListener('resize', debounce(this.setColumnWidth, 250));\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderLoadingSystems() {\n        return [ <td key='loading-systems-header'><Skeleton size={ SkeletonSize.md } /></td> ];\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    ref={ this.columnWidth }\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header right-border reference-header sticky-header'\n                        : `drift-header right-border ${item.type}-header sticky-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div>\n                            <span className=\"drift-header-icon\">\n                                { typeIcon }\n                            </span>\n                            <span className=\"system-name\">{ item.display_name }</span>\n                        </div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            <span className='margin-right-4-px'>\n                                { item.last_updated\n                                    ? this.formatDate(item.last_updated)\n                                    : this.formatDate(item.updated)\n                                }\n                            </span>\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        if (this.state.refState === null && this.columnWidth?.current !== null) {\n            this.setColumnWidth();\n        }\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, masterList, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer sticky-header\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer right-border sticky-header\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { masterList.length ? this.renderSystemHeaders() : this.renderLoadingSystems() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    columnWidth: PropTypes.number,\n    setColumnHeaderWidth: PropTypes.func.isRequired\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#6A6E73' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\nfunction RowFact(props) {\n    const { expandedRows, expandRow, factName, type } = props;\n\n    const buildClassName = () => {\n        if (type === 'fact' || (type === 'category' && !expandedRows.includes(factName))) {\n            return 'sticky-column fixed-column-1';\n        } else {\n            return 'nested-fact sticky-column fixed-column-1';\n        }\n    };\n\n    const renderExpandableRowButton = () => {\n        if (expandedRows.includes(factName)) {\n            return <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        } else {\n            return <AngleRightIcon\n                className={ 'carat-margin pointer' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        }\n    };\n\n    const renderFact = () => {\n        let fact;\n\n        if (type === 'category' || type === 'multi fact') {\n            let button = renderExpandableRowButton();\n            fact = <span>{ button } { factName }</span>;\n        } else if (type === 'sub fact') {\n            fact = <p className='child-row'>{ factName }</p>;\n        } else {\n            fact = factName;\n        }\n\n        return fact;\n    };\n\n    return (\n        <td className={ buildClassName() }>\n            { renderFact() }\n        </td>\n    );\n}\n\nRowFact.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    factName: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default RowFact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport StateIcon from '../../../StateIcon/StateIcon';\nimport RowFact from './RowFact';\n\nfunction DriftTableRow(props) {\n    const { columnWidth, expandedRows, expandRow, fact, masterList, referenceId, stateSort, type } = props;\n\n    const findSystem = (systems, id) => {\n        return systems.find(system => system.id === id);\n    };\n\n    const renderState = () => {\n        return <td className='fact-state sticky-column fixed-column-2'>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    };\n\n    const createClassname = (system) => {\n        let className = [ 'comparison-cell' ];\n\n        if (system?.is_obfuscated) {\n            className.push('obfuscated');\n        }\n\n        if (referenceId && system?.state === 'DIFFERENT') {\n            className.push('highlight');\n            className.push('different-fact-cell');\n        } else if (!referenceId && fact.state === 'DIFFERENT') {\n            className.push('highlight');\n        }\n\n        return className;\n    };\n\n    const createCells = () => {\n        let cell = [];\n        let system;\n        let cellWidth;\n\n        for (let i = 0; i < masterList.length; i++) {\n            if (fact.systems) {\n                system = findSystem(fact.systems, masterList[i].id);\n            }\n\n            let className = createClassname(system);\n            if (className.includes('comparison-cell')) {\n                cellWidth = columnWidth;\n            }\n\n            cell.push(<td style={{ width: cellWidth }} className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        }\n\n        return cell;\n    };\n\n    const createRow = () => {\n        let row = [];\n\n        row.push(<RowFact expandedRows={ expandedRows } expandRow={ expandRow } factName={ fact.name } type={ type } />);\n        row.push(renderState());\n\n        row = row.concat(createCells());\n        return row;\n    };\n\n    return (\n        <tr\n            data-ouia-component-type='PF4/TableRow'\n            data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n            className={ fact.state === 'DIFFERENT' || fact.state === 'INCOMPLETE_DATA_OBFUSCATED' ? 'unexpected-row' : '' }>\n            { createRow() }\n        </tr>\n    );\n}\n\nDriftTableRow.propTypes = {\n    columnWidth: PropTypes.number,\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    fact: PropTypes.object,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    stateSort: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default DriftTableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport DriftTableRow from './DriftTableRow/DriftTableRow';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columnHeaderWidth: 0\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.topScroller = React.createRef();\n        this.headerScroll = React.createRef();\n        this.bottomScroller = React.createRef();\n        this.doubleScroll = this.doubleScroll.bind(this);\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    setColumnHeaderWidth = (width) => {\n        this.setState({ columnHeaderWidth: width });\n    }\n\n    doubleScroll() {\n        let wrapper1 = this.topScroller.current;\n        let wrapper2 = this.headerScroll.current;\n        let wrapper3 = this.bottomScroller.current;\n\n        wrapper1.onscroll = function() {\n            wrapper2.scrollLeft = wrapper1.scrollLeft;\n            wrapper3.scrollLeft = wrapper1.scrollLeft;\n        };\n\n        wrapper3.onscroll = function() {\n            wrapper1.scrollLeft = wrapper3.scrollLeft;\n            wrapper2.scrollLeft = wrapper3.scrollLeft;\n        };\n    }\n\n    async componentDidMount() {\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            await this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (!this.props.emptyState && prevProps.emptyState) {\n            const chrome = this.props.chrome;\n            await chrome?.appAction('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = this.props.searchParams\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds?.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = this.props.searchParams\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds?.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles, searchParams } = this.props;\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds?.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { updateReferenceId, searchParams } = this.props;\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    addFilters(newFilters, filters, addFunction, type) {\n        if (newFilters?.length > 0) {\n            filters.forEach(function(filter) {\n                let x = { ...filter };\n\n                if (newFilters?.includes(filter.filter.toLowerCase())) {\n                    x.selected = false;\n\n                    if (type === 'fact') {\n                        addFunction(x);\n                    }\n                }\n\n                if (type === 'state') {\n                    addFunction(x);\n                }\n            });\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, factTypeFilters, handleFactFilter, stateFilters, toggleFactTypeFilter, searchParams } = this.props;\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n        let newFactTypeFilters = searchParams.get('filter[show]')?.split(',');\n\n        this.addFilters(newStateFilters, stateFilters, addStateFilter, 'state');\n        this.addFilters(newFactTypeFilters, factTypeFilters, toggleFactTypeFilter, 'fact');\n    }\n\n    setSort() {\n        const { toggleFactSort, toggleStateSort, searchParams } = this.props;\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        if (!systemIds.includes(reference) && !baselineIds.includes(reference) && !HSPIds.includes(reference)) {\n            reference = undefined;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        rowData.push(<td className='fact-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td className='state-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, expandRow, referenceId, stateSort } = this.props;\n        const { columnHeaderWidth } = this.state;\n        let rows = [];\n\n        if (fact.comparisons) {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                expandRow={ expandRow }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'category' }\n                columnWidth={ columnHeaderWidth }\n            />);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    if (comparison.multivalues) {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            expandRow={ expandRow }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'multi fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                rows.push(<DriftTableRow\n                                    expandedRows={ expandedRows }\n                                    fact={ subFactItem }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    stateSort={ stateSort }\n                                    type={ 'multi value' }\n                                    columnWidth={ columnHeaderWidth }\n                                />);\n                            });\n                        }\n                    } else {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'sub fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n                    }\n                });\n            }\n        } else {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'fact' }\n                columnWidth={ columnHeaderWidth }\n            />);\n        }\n\n        return rows;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n        let scrollWidth = '';\n\n        if (this.bottomScroller.current) {\n            scrollWidth = this.bottomScroller.current.scrollWidth;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='sticky-table-header'>\n                    <div className='second-scroll-wrapper' onScroll={ this.doubleScroll } ref={ this.topScroller }>\n                        <div\n                            className='second-scroll'\n                            style={{ width: scrollWidth }}\n                        ></div>\n                    </div>\n                    <div\n                        className=\"drift-table-wrapper\"\n                        onScroll={ this.doubleScroll }\n                        ref={ this.headerScroll }>\n                        <table\n                            className=\"pf-c-table pf-m-compact drift-table\"\n                            data-ouia-component-type='PF4/Table'\n                            data-ouia-component-id='comparison-table'>\n                            <thead>\n                                <ComparisonHeader\n                                    factSort={ factSort }\n                                    fetchCompare={ this.fetchCompare }\n                                    permissions={ permissions }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    removeSystem={ this.removeSystem }\n                                    stateSort={ stateSort }\n                                    systemIds={ this.systemIds }\n                                    toggleFactSort={ toggleFactSort }\n                                    toggleStateSort={ toggleStateSort }\n                                    updateReferenceId={ this.updateReferenceId }\n                                    setHistory={ setHistory }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                    setColumnHeaderWidth={ this.setColumnHeaderWidth }\n                                />\n                            </thead>\n                        </table>\n                    </div>\n                </div>\n                <div\n                    className=\"drift-table-wrapper table-body-scroll\"\n                    onScroll={ this.doubleScroll }\n                    ref={ this.bottomScroller }>\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions,\n            updateReferenceId } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                    updateReferenceId={ updateReferenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    factTypeFilters: PropTypes.array,\n    toggleFactTypeFilters: PropTypes.func,\n    chrome: PropTypes.object,\n    searchParams: PropTypes.object\n};\n\nconst DriftTableWithHooks = props => {\n    const chrome = useChrome();\n    return (\n        <DriftTable { ...props } chrome={ chrome } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftTableWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isToolbar } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isToolbar ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isToolbar ? 'Add to comparison' : 'Add systems or baselines' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isToolbar: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\nfunction DriftFilterDropdown(props) {\n    const { filterType, toggleFilterType } = props;\n    const [ isOpen, toggleOpen ] = useState(false);\n\n    const selectFilter = (type) => {\n        toggleFilterType(type);\n        toggleOpen(!isOpen);\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            data-ouia-component-id='fact-name-filter'\n            key='fact-name'\n            onClick={ () => selectFilter('Fact name') }\n        >\n            Fact name\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='fact-type-filter'\n            key='fact-type'\n            onClick={ () => selectFilter('Fact type') }\n        >\n            Fact type\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='state-filter'\n            key='state'\n            onClick={ () => selectFilter('State') }\n        >\n            State\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            ouiaId='drift-filter-dropdown'\n            className='comparison-filter-dropdown-width'\n            toggle={ <DropdownToggle\n                onToggle={ toggleOpen }\n                ouiaId='drift-filter-toggle'\n                icon={ <FilterIcon /> }>\n                { filterType }\n            </DropdownToggle> }\n            isOpen={ isOpen }\n            dropdownItems={ dropdownItems }\n        />\n    );\n}\n\nDriftFilterDropdown.propTypes = {\n    filterType: PropTypes.string,\n    toggleFilterType: PropTypes.func\n};\n\nexport default DriftFilterDropdown;\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addFilter = async (filter) => {\n        const { filterFunction, setHistory } = this.props;\n\n        await filterFunction(filter);\n        setHistory();\n    }\n\n    createDropdownItem(filter, type) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ `${ type }-filter-option-${ filter.display }` } >\n                <Checkbox\n                    id={ filter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ `${ type }-filter-option-checkbox-${ filter.display }` }\n                    label={ filter.display }\n                    isChecked={ filter.selected }\n                    onChange={ () => this.addFilter(filter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(filters, type) {\n        let dropdownItems = [];\n\n        filters.forEach(function(filter) {\n            let dropdownItem = this.createDropdownItem(filter, type);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    render() {\n        const { filters, type } = this.props;\n        let dropdownItems = [];\n        const ouiaPrefix = type.split(' ').join('-').toLowerCase();\n\n        dropdownItems = this.createDropdownArray(filters, type);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId={ ouiaPrefix }\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId={ `${ ouiaPrefix }-toggle` }>\n                        { type === 'State'\n                            ? `Filter by ${ type.toLowerCase() }`\n                            : 'Show'\n                        }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    factTypeFilters: PropTypes.array,\n    filterDropdownOpened: PropTypes.bool,\n    filters: PropTypes.array,\n    filterFunction: PropTypes.func,\n    setHistory: PropTypes.func,\n    type: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown())\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarFilter } from '@patternfly/react-core';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport FilterDropDown from '../../FilterDropDown/FilterDropDown';\n\nfunction DriftFilterValue(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, filterType, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n\n    const setFactFilterChips = () => {\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    };\n\n    const setDropdownChips = (dropdownFilters) => {\n        let chips = [];\n\n        dropdownFilters.forEach(function(filter) {\n            if (filter.selected && filter.display !== 'All facts') {\n                chips.push(filter.display);\n            }\n        });\n\n        return chips;\n    };\n\n    const renderFilterInput = (type) => {\n        return <React.Fragment>\n            <ToolbarFilter\n                chips={ setFactFilterChips() }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"Fact name\"\n            >\n                { type === 'Fact name'\n                    ? <SearchBar\n                        factFilter={ factFilter }\n                        activeFactFilters={ activeFactFilters }\n                        handleFactFilter={ handleFactFilter }\n                        filterByFact={ filterByFact }\n                        setHistory={ setHistory }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(factTypeFilters) }\n                deleteChip={ removeChip }\n                categoryName=\"Fact type\"\n            >\n                { type === 'Fact type'\n                    ? <FilterDropDown\n                        filterFunction={ toggleFactTypeFilter }\n                        filters={ factTypeFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(stateFilters) }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"State\"\n            >\n                { type === 'State'\n                    ? <FilterDropDown\n                        filterFunction={ addStateFilter }\n                        filters={ stateFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n        </React.Fragment>;\n    };\n\n    return (\n        <React.Fragment>\n            { renderFilterInput(filterType) }\n        </React.Fragment>\n    );\n}\n\nDriftFilterValue.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    filterType: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilterValue;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup } from '@patternfly/react-core';\n\nimport DriftFilterDropdown from './DriftFilterDropdown';\nimport DriftFilterValue from './DriftFilterValue';\n\nfunction DriftFilter(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n    const [ filterType, toggleFilterType ] = useState('Fact name');\n\n    return (\n        <ToolbarGroup variant='filter-group'>\n            <DriftFilterDropdown\n                filterType={ filterType }\n                toggleFilterType={ toggleFilterType }\n            />\n            <DriftFilterValue\n                activeFactFilters={ activeFactFilters }\n                addStateFilter={ addStateFilter }\n                factFilter={ factFilter }\n                factTypeFilters={ factTypeFilters }\n                filterByFact={ filterByFact }\n                filterType={ filterType }\n                handleFactFilter={ handleFactFilter }\n                removeChip={ removeChip }\n                setHistory={ setHistory }\n                stateFilters={ stateFilters }\n                toggleFactTypeFilter={ toggleFactTypeFilter }\n            />\n        </ToolbarGroup>\n    );\n}\n\nDriftFilter.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    clearAllStateChips: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent } from '@patternfly/react-core';\n\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport DriftFilter from './DriftFilter/DriftFilter';\nimport { TablePagination } from '../../Pagination/Pagination';\nimport { errorExportNotification, preparingExportNotification, successfulExportNotification } from '../../../constants';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToCSV) }\n                >\n                    Export to CSV\n                </DropdownItem>,\n                <DropdownItem\n                    key='export-to-JSON'\n                    component='button'\n                    data-ouia-component-id='export-to-json-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToJSON) }\n                >\n                    Export to JSON\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { exportStatus, resetExportStatus, store } = this.props;\n\n        if (exportStatus === 'success' && prevProps.exportStatus !== 'success') {\n            successfulExportNotification(store);\n            resetExportStatus();\n        }\n\n        if (exportStatus === 'failure' && prevProps.exportStatus !== 'failure') {\n            errorExportNotification(store);\n            resetExportStatus();\n        }\n    }\n\n    prepareExport = (exportFunc) => {\n        const { store } = this.props;\n\n        preparingExportNotification(store);\n\n        exportFunc();\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearAllSelections, clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        await clearAllSelections();\n        setHistory();\n\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, factTypeFilters, filterByFact, handleFactFilter, setHistory, stateFilters,\n            toggleFactTypeFilter } = this.props;\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else if (type === 'Fact type') {\n            toggleFactTypeFilter(factTypeFilters[1]);\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, toggleFactTypeFilter, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <DriftFilter\n                            activeFactFilters={ activeFactFilters }\n                            addStateFilter={ addStateFilter }\n                            factFilter={ factFilter }\n                            factTypeFilters={ factTypeFilters }\n                            filterByFact={ filterByFact }\n                            handleFactFilter={ handleFactFilter }\n                            removeChip={ this.removeChip }\n                            setHistory={ setHistory }\n                            stateFilters={ stateFilters }\n                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                        />\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } isToolbar={ true } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportStatus: PropTypes.string,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    resetExportStatus: PropTypes.func,\n    store: PropTypes.object\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\nimport { RegistryContext } from '../../Utilities/registry';\n\nimport { EMPTY_COMPARISON_TITLE, EMPTY_COMPARISON_MESSAGE } from '../../constants';\nimport { useSearchParams } from 'react-router-dom';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFirstReference: true\n        };\n    }\n\n    componentDidMount() {\n        document.title = this.props.title;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.searchParams !== '' && this.props.searchParams === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, factTypeFilters, historicalProfiles, referenceId, stateFilters,\n            stateSort, systems, navigate } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            navigate, systemIds, baselineIds, HSPIds, referenceId,\n            activeFactFilters, factFilter, factTypeFilters, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, previousStateSystems, navigate } = this.props;\n\n        revertCompareData();\n        setHistory(navigate, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ EMPTY_COMPARISON_TITLE }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                button={ <AddSystemButton/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearAllSelections, clearComparison, clearComparisonFilters,\n            clearSelectedBaselines, emptyState, error, exportToCSV, exportToJSON, exportStatus, factFilter, factSort, factTypeFilters, filterByFact,\n            handleFactFilter, historicalProfiles, handleBaselineSelection, handleHSPSelection, handleSystemSelection, loading, page, perPage,\n            referenceId, resetComparisonFilters, resetExportStatus, selectedBaselineIds, selectedHSPIds, stateFilters, stateSort, systems,\n            toggleFactTypeFilter, totalFacts, updatePagination, updateReferenceId, searchParams } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <RegistryContext.Consumer>\n                {\n                    registryContextValue =>\n                        (<>\n                            <PageHeader>\n                                <PageHeaderTitle title='Comparison'/>\n                            </PageHeader>\n                            <Main store={ registryContextValue?.registry.getStore() }>\n                                <PermissionContext.Consumer>\n                                    { value =>\n                                        value.permissions.compareRead === false\n                                            ? <EmptyStateDisplay\n                                                icon={ LockIcon }\n                                                color='#6a6e73'\n                                                title={ 'You do not have access to Drift comparison' }\n                                                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                            />\n                                            : <React.Fragment>\n                                                <ErrorAlert\n                                                    error={ error }\n                                                    onClose={ this.onClose }\n                                                />\n                                                { emptyState && !loading\n                                                    ? this.renderEmptyState()\n                                                    : <div></div>\n                                                }\n                                                <Card className='pf-t-light pf-m-opaque-100'>\n                                                    <CardBody>\n                                                        { !emptyState\n                                                            ? <DriftToolbar\n                                                                loading={ loading }\n                                                                history={ history }\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                totalFacts={ totalFacts }\n                                                                updatePagination={ updatePagination }\n                                                                clearComparison={ clearComparison }\n                                                                clearComparisonFilters={ clearComparisonFilters }\n                                                                exportToCSV={ exportToCSV }\n                                                                exportToJSON={ exportToJSON }\n                                                                updateReferenceId={ updateReferenceId }\n                                                                setIsFirstReference={ this.setIsFirstReference }\n                                                                clearSelectedBaselines={ clearSelectedBaselines }\n                                                                factFilter={ factFilter }\n                                                                factTypeFilters={ factTypeFilters }\n                                                                filterByFact={ filterByFact }\n                                                                stateFilters={ stateFilters }\n                                                                addStateFilter={ addStateFilter }\n                                                                toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                                activeFactFilters={ activeFactFilters }\n                                                                handleFactFilter={ handleFactFilter }\n                                                                clearAllFactFilters={ clearAllFactFilters }\n                                                                setHistory={ this.setHistory }\n                                                                resetComparisonFilters={ resetComparisonFilters }\n                                                                clearAllSelections={ clearAllSelections }\n                                                                exportStatus={ exportStatus }\n                                                                resetExportStatus={ resetExportStatus }\n                                                                store={ registryContextValue?.registry.getStore() }\n                                                            />\n                                                            : null\n                                                        }\n                                                        <DriftTable\n                                                            updateReferenceId={ updateReferenceId }\n                                                            error={ error }\n                                                            isFirstReference={ isFirstReference }\n                                                            setIsFirstReference={ this.setIsFirstReference }\n                                                            clearComparison= { clearComparison }\n                                                            handleBaselineSelection={ handleBaselineSelection }\n                                                            handleHSPSelection={ handleHSPSelection }\n                                                            handleSystemSelection={ handleSystemSelection }\n                                                            permissions={ value.permissions }\n                                                            handleFactFilter={ handleFactFilter }\n                                                            addStateFilter={ addStateFilter }\n                                                            stateFilters={ stateFilters }\n                                                            activeFactFilters={ activeFactFilters }\n                                                            factFilter={ factFilter }\n                                                            setHistory={ this.setHistory }\n                                                            factSort={ factSort }\n                                                            stateSort={ stateSort }\n                                                            referenceId={ referenceId }\n                                                            systems={ systems }\n                                                            baselines={ baselines }\n                                                            historicalProfiles={ historicalProfiles }\n                                                            selectedHSPIds={ selectedHSPIds }\n                                                            selectedBaselineIds={ selectedBaselineIds }\n                                                            factTypeFilters={ factTypeFilters }\n                                                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                            searchParams={ searchParams }\n                                                        />\n                                                        { !emptyState && !loading ?\n                                                            <Toolbar className=\"drift-toolbar\">\n                                                                <ToolbarGroup className=\"pf-c-pagination\">\n                                                                    <ToolbarItem>\n                                                                        <TablePagination\n                                                                            page={ page }\n                                                                            perPage={ perPage }\n                                                                            total={ totalFacts }\n                                                                            isCompact={ false }\n                                                                            updatePagination={ updatePagination }\n                                                                            widgetId='drift-pagination-bottom'\n                                                                            ouiaId='drift-pagination-bottom'\n                                                                            variant={ PaginationVariant.bottom }\n                                                                        />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                            </Toolbar>\n                                                            : null\n                                                        }\n                                                    </CardBody>\n                                                </Card>\n                                            </React.Fragment>\n                                    }\n                                </PermissionContext.Consumer>\n                            </Main>\n                        </>)}\n            </RegistryContext.Consumer>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.string,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    exportStatus: PropTypes.string,\n    resetExportStatus: PropTypes.func,\n    searchParams: PropTypes.object,\n    navigate: PropTypes.func,\n    title: PropTypes.string\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        exportToJSON: () => dispatch(compareActions.exportToJSON()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        toggleFactTypeFilter: (filter) => dispatch(compareActions.toggleFactTypeFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters()),\n        clearAllSelections: () => dispatch(addSystemModalActions.clearAllSelections()),\n        resetExportStatus: () => dispatch(compareActions.resetExportStatus())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        factTypeFilters: state.compareState.factTypeFilters,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        exportStatus: state.compareState.exportStatus\n    };\n}\n\nconst DriftPageWithHooks = props => {\n    const [ searchParams ] = useSearchParams();\n    const navigate = useInsightsNavigate();\n    return (\n        <DriftPage { ...props } searchParams={ searchParams } navigate={ navigate } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftPageWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n"],"names":["setHistory","navigate","_stateFilters$filter","_factTypeFilters$filt","systemIds","arguments","length","undefined","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","factTypeFilters","stateFilters","factSort","stateSort","nameFilters","concat","_toConsumableArray","includes","filterState","filter","_ref","selected","map","_ref2","toLowerCase","filterFactType","_ref3","_ref4","sort","ASC","DESC","searchPrefix","searchString","queryString","system_ids","baseline_ids","hsp_ids","reference_id","search","arrayFormat","encode","SelectedBasketCheckbox","_Component","_inherits","_super","props","_this","_classCallCheck","call","handleChange","_this$props","findType","id","type","isChecked","state","setState","_createClass","key","value","this","React","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","push","icon","style","system","hsp","system_id","moment","captured_date","format","_entities$selectedSys","selectedSystemIds","system_name","className","SelectedBasket","_componentDidMount","toggleBasket","toggleBasketVisible","clearDeselected","applyChanges","_asyncToGenerator","_regeneratorRuntime","_callee3","_this$state","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","_context3","prev","next","_callee","_context","find","hspContent","stop","_x","apply","item","_callee2","_context2","_x2","newArray","_this$state2","toggleSelected","array","removeId","displayBodyContent","isEmpty","_this$props2","EmptyStateDisplay","title","text","_callee4","_context4","addSystemModalHelpers","systems","baselines","historicalProfiles","handleSystemSelection","_this$props3","selectedCount","_this2","isVisible","_this$state3","Popover","minWidth","shouldClose","headerContent","findSelected","footerContent","Button","variant","onClick","ouiaId","isDisabled","position","PopoverPosition","bodyContent","maxHeight","overflowY","AddSystemModal","closePopover","disableSystemTable","basketIsVisible","createContent","content","body","DriftTooltip","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","_assertThisInitialized","bulkSelectBasket","systemContentSelect","data","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","transforms","sortable","cellWidth","previousSelectedBaselineIds","addSystemModal","middlewareListener","window","entityListener","addNewListener","actionType","callback","addSystemModalOpened","width","isStatic","hspRead","prevProps","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","_this$props4","findNotInComparison","baselinesToRemove","_this$props5","setSelectedBaselines","setSelectedContent","tabIndex","selectActiveTab","_this$props6","activeTab","emptyState","globalFilterState","loading","setSelectedSystemIds","totalBaselines","baselineError","revertBaselineFetch","Modal","ref","onScroll","isOpen","onClose","actions","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","leftAlignToolbar","hasSwitch","showModal","updateReferenceId","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","RegistryContext","registryContextValue","_extends","ReferenceSelector","isReference","StarIcon","OutlinedStarIcon","Tooltip","renderMessage","renderIcon","ComparisonHeader","_toggleSort","setColumnWidth","_this$columnWidth","columnWidth","current","setColumnHeaderWidth","offsetWidth","refState","formatDate","dateString","addEventListener","debounce","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","Skeleton","size","SkeletonSize","_this$columnWidth2","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","color","last_updated","updated","HistoricalProfilesPopover","systemName","hasCompareButton","_this3","toggleSort","renderSortButton","renderSystemHeaders","renderLoadingSystems","renderHeaderRow","hasHSPReadPermissions","StateIcon","fact","CheckCircleIcon","height","ExclamationCircleIcon","QuestionCircleIcon","tooltip","RowFact","expandedRows","expandRow","factName","button","AngleDownIcon","AngleRightIcon","renderFact","DriftTableRow","findSystem","createClassname","is_obfuscated","cell","i","_system","_system2","_system3","join","float","LockIcon","createCells","DriftTable","_fetchCompare","_removeSystem","_componentDidUpdate","columnHeaderWidth","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","topScroller","headerScroll","bottomScroller","doubleScroll","wrapper1","wrapper2","wrapper3","onscroll","scrollLeft","chrome","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i","hsps","indexOf","slice","entries","_this$systemIds","searchParams","getAll","Array","isArray","_this$baselineIds","_this$HSPIds","get","newFilters","filters","addFunction","x","_objectSpread","_searchParams$get","_searchParams$get2","_searchParams$get3","addStateFilter","handleFactFilter","toggleFactTypeFilter","split","newStateFilters","newFactTypeFilters","addFilters","_searchParams$get4","_sort$","isFirstReference","setIsFirstReference","hspsToRemove","sent","profile","clearComparison","reference","_args4","facts","renderRow","rowData","_this$props7","comparisons","comparison","multivalues","subFactItem","compareData","_this$props8","scrollWidth","renderLoadingRows","renderRows","_this$props9","filteredCompareData","formatEntities","renderTable","history","fullCompareData","error","toggleFactTypeFilters","compareActions","useChrome","AddSystemButton","isToolbar","DriftFilterDropdown","filterType","toggleFilterType","_useState","useState","_useState2","toggleOpen","selectFilter","dropdownItems","DropdownItem","Dropdown","toggle","DropdownToggle","onToggle","FilterIcon","SearchBar","_addToActiveFactFilters","updateFactFilter","setFactFilter","_debounce","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","types","FilterDropDown","addFilter","filterFunction","createDropdownItem","toggleDropDown","display","label","dropdownItem","ouiaPrefix","createDropdownArray","filterDropdownOpened","filterDropdownActions","DriftFilterValue","factFilterChips","removeChip","setDropdownChips","dropdownFilters","chips","ToolbarFilter","deleteChip","deleteChipGroup","categoryName","DriftFilter","ToolbarGroup","clearAllFactFilters","clearAllStateChips","DriftToolbar","prepareExport","exportFunc","store","preparingExportNotification","stateFilter","resetFilters","resetComparisonFilters","dropdownOpen","clearFilters","clearComparisonFilters","clearAllSelections","clearSelectedBaselines","_callee6","_args6","_context6","_ref6","_callee5","_context5","actionKebabItems","component","exportToCSV","exportToJSON","exportStatus","resetExportStatus","successfulExportNotification","errorExportNotification","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ExportCSVButton","ActionKebab","align","default","TablePagination","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EMPTY_COMPARISON_MESSAGE","detail","PlusCircleIcon","EMPTY_COMPARISON_TITLE","document","PageHeader","PageHeaderTitle","Main","registry","getStore","PermissionContext","compareRead","ErrorAlert","Card","CardBody","loadEntities","pagination","_useSearchParams","useSearchParams","useInsightsNavigate","closeToast","addNotification","description","dismissable"],"sourceRoot":""}