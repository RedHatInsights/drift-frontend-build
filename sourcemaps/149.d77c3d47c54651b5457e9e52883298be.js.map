{"version":3,"file":"js/149.1648822107691.b5cf414a0f60c6707ebc.js","mappings":"qaAGO,SAASA,EACZC,GAEF,QAFWC,EAEX,uDAFuB,GAAIC,EAE3B,uDAFyC,GAAIC,EAE7C,uDAFsD,GAAIC,EAE1D,uCAFuEC,EAEvE,uDAF2F,GAAIC,EAE/F,uCAF2GC,EAE3G,uCAF4HC,EAE5H,uCAF0IC,EAE1I,uCADEC,EACF,yCACMC,EAAc,GAAH,eAAQN,IAAR,OAA8BC,IAAeD,EAAkBO,SAASN,GAAc,CAAEA,GAAe,KAClHO,GAAcL,MAAAA,GAAA,UAAAA,EAAcM,QAAO,qBAAGC,mBAAxB,eAAkDC,KAAI,gBAAGF,EAAH,EAAGA,OAAH,OAAgBA,MAAAA,OAAhB,EAAgBA,EAAQG,mBAAkB,GAC9GC,GAAiBX,MAAAA,GAAA,UAAAA,EAAiBO,QAAO,qBAAGC,mBAA3B,eAAqDC,KAAI,gBAAGF,EAAH,EAAGA,OAAH,OAAgBA,MAAAA,OAAhB,EAAgBA,EAAQG,mBAAkB,GACpHE,EAAO,GAAH,eACD,CAAEC,EAAAA,GAAKC,EAAAA,IAAOT,SAASF,GAAa,CAAC,GAAD,OAAMA,IAAcW,EAAAA,GAAO,IAAM,GAAjC,UAAgD,KADnF,OAED,CAAED,EAAAA,GAAKC,EAAAA,IAAOT,SAASH,GAAY,CAAC,GAAD,OAAMA,IAAaY,EAAAA,GAAO,IAAM,GAAhC,SAA8C,KAEpFC,EAAe,IAGnBtB,EAAQuB,KAAK,CACTC,OAAQF,EAAeG,EAAAA,UAAsB,CACzCC,WAAYzB,EACZ0B,aAAczB,EACd0B,QAASzB,EACT0B,aAAczB,MAItBkB,EAAe,IAEVrB,EAAU6B,QAAW5B,EAAY4B,QAAW3B,EAAO2B,QAAW1B,IAC/DkB,EAAe,IAGnBtB,EAAQuB,KAAK,CACTC,OAAQxB,EAAQ+B,SAASP,OAASF,EAAeG,EAAAA,UAAsB,CACnE,eAAgBd,EAChB,gBAAiBE,EACjB,eAAgBK,EAChBC,KAAAA,GACD,CAAEa,YAAa,QAASC,QAAQ,M,8GClCpC,IAAMC,EAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYC,GAAO,6BACf,cAAMA,IAOVC,aAAe,WACX,MAA+B,EAAKD,MAA5BE,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,GAAIC,EAAtB,EAAsBA,KACdC,EAAc,EAAKC,MAAnBD,UAERH,EAASE,EAAMD,GACf,EAAKI,SAAS,CAAEF,WAAYA,KAV5B,EAAKC,MAAQ,CACTD,WAAW,GAJA,EADvB,qCAiBI,WACI,IAAQA,EAAcG,KAAKF,MAAnBD,UAER,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAI,SAAD,CACIJ,UAAYA,EACZK,SAAWF,KAAKP,aAChB,aAAW,8BACXE,GAAG,UACHQ,KAAK,gBA3BzB,GAA4CC,EAAAA,WAkC5Cb,EAAuBc,UAAY,CAC/BT,KAAMU,IAAAA,OACNZ,SAAUY,IAAAA,KACVX,GAAIW,IAAAA,QAGR,UCvCO,IAAMC,EAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYf,GAAO,6BACf,cAAMA,IAGVgB,UAAY,WACR,MAAmH,EAAKhB,MAAhHiB,EAAR,EAAQA,SAAUf,EAAlB,EAAkBA,SAAUgB,EAA5B,EAA4BA,wBAAyBC,EAArD,EAAqDA,mBAAoBC,EAAzE,EAAyEA,sBAAuBC,EAAhG,EAAgGA,eAC5FC,EAAO,GAiFX,OA/EAJ,EAAwBK,SAAQ,SAASC,GACrCF,EAAKlC,KACD,4BACI,4BACI,kBAAC,EAAD,CACIgB,KAAK,WACLF,SAAWA,EACXC,GAAKqB,EAASrB,GACdkB,eAAiBA,KAGzB,4BAAMG,EAASC,MACf,wBAAIC,MAAO,CAAE,gBAAiB,SAAYF,EAASb,WAK/DS,EAAsBG,SAAQ,SAASI,GACnCL,EAAKlC,KACD,4BACI,4BACI,kBAAC,EAAD,CACIgB,KAAK,SACLF,SAAWA,EACXC,GAAKwB,EAAOxB,GACZkB,eAAiBA,KAGzB,4BAAMM,EAAOF,MACb,wBAAIC,MAAO,CAAE,gBAAiB,SAAYC,EAAOhB,QAIzDQ,MAAAA,GAAAA,EAAoBI,SAAQ,SAASK,GAC7BA,EAAIC,YAAcF,EAAOxB,IACzBmB,EAAKlC,KACD,4BACI,4BACI,kBAAC,EAAD,CACIgB,KAAK,MACLF,SAAWA,EACXC,GAAKyB,EAAIzB,GACTkB,eAAiBA,KAGzB,4BAAMO,EAAIH,MACV,wBAAIC,MAAO,CAAE,gBAAiB,SAC1B,6BAAOC,EAAOhB,MACd,6BAAOmB,IAAAA,IAAWF,EAAIG,eAAeC,OAAO,oCAQpEb,MAAAA,GAAAA,EAAoBI,SAAQ,SAASK,GAAK,MACjCX,MAAAA,GAAD,UAACA,EAAUgB,yBAAX,OAAC,EAA6BxD,SAASmD,EAAIC,YAE3CP,EAAKlC,KACD,4BACI,4BACI,kBAAC,EAAD,CACIgB,KAAK,MACLF,SAAWA,EACXC,GAAKyB,EAAIzB,GACTkB,eAAiBA,KAGzB,4BAAMO,EAAIH,MACV,wBAAIC,MAAO,CAAE,gBAAiB,SAC1B,6BAAOE,EAAIM,aACX,6BAAOJ,IAAAA,IAAWF,EAAIG,eAAeC,OAAO,iCAOzDV,GAvFQ,EADvB,qCA2FI,WACI,OACI,kBAAC,aAAD,KACI,2BAAOa,UAAU,cACb,+BACM3B,KAAKQ,mBAhG/B,GAAmCJ,EAAAA,WAwGnCG,EAAcF,UAAY,CACtBK,wBAAyBJ,IAAAA,MACzBG,SAAUH,IAAAA,OACVK,mBAAoBL,IAAAA,MACpBM,sBAAuBN,IAAAA,MACvBZ,SAAUY,IAAAA,KACVO,eAAgBP,IAAAA,MAGpB,U,0BC/GO,IAAMsB,EAAb,+B,IAAA,G,EAAA,E,gaACI,WAAYpC,GAAO,6BACf,cAAMA,IAuBVqC,aAAe,WACX,IAAQC,EAAwB,EAAKtC,MAA7BsC,oBAER,EAAKC,kBACLD,KA5Be,EA+BnBE,cA/BmB,iBA+BJ,+GACwD,EAAKlC,MAAhEmC,EADG,EACHA,oBAAqBC,EADlB,EACkBA,eAAgBC,EADlC,EACkCA,kBADlC,EAG8D,EAAK3C,MADtE4C,EAFG,EAEHA,wBAAyBC,EAFtB,EAEsBA,mBAAoBC,EAF1C,EAE0CA,eAAgBC,EAF1D,EAE0DA,aAAcC,EAFxE,EAEwEA,uBAC/E9B,EAHO,EAGPA,wBAAyBC,EAHlB,EAGkBA,oBAAoBmB,EAHtC,EAGsCA,wBAI7CG,EAAoB9C,OAPb,gCAQDmD,EAAeL,GAAqB,EAAO,cAR1C,OASPG,EAAwB1B,EAAwBvC,QAAO,SAAA6C,GAAQ,OAAIiB,EAAoBhE,SAAS+C,EAASrB,QAAM,GATxG,WAYPuC,EAAe/C,OAZR,wBAaP+C,EAAenB,QAAf,mCAAuB,WAAeK,GAAf,iFACbiB,EAAmB1B,EAAmB8B,MAAK,SAAAC,GAAU,OAAIA,EAAW/C,KAAOyB,MAD9D,2CAAvB,uDAbO,UAiBDoB,EAAuB7B,EAAmBxC,QAAO,SAAAwE,GAAI,OAAKT,EAAejE,SAAS0E,EAAKhD,OAC5FtB,KAAI,qBAAGsB,OAlBD,QAqBXwC,EAAkBpB,QAAlB,mCAA0B,WAAeI,GAAf,iFAChBoB,EAAapB,GAAQ,GADL,2CAA1B,uDAIA,EAAKY,kBAzBM,4CA/BI,EA2DnBrC,SAAW,SAACE,EAAMD,GACd,IACIiD,EADJ,EAAmE,EAAK9C,MAAhEqC,EAAR,EAAQA,kBAAmBF,EAA3B,EAA2BA,oBAAqBC,EAAhD,EAAgDA,eAGnC,WAATtC,GACAgD,EAAW,EAAKC,eAAeV,EAAmBxC,GAClD,EAAKI,SAAS,CAAEoC,kBAAmBS,KACnB,aAAThD,GACPgD,EAAW,EAAKC,eAAeZ,EAAqBtC,GACpD,EAAKI,SAAS,CAAEkC,oBAAqBW,MAErCA,EAAW,EAAKC,eAAeX,EAAgBvC,GAC/C,EAAKI,SAAS,CAAEmC,eAAgBU,MAvErB,EA2EnBC,eAAiB,SAACC,EAAOnD,GACrB,IAAIiD,EAAW,GASf,OAPIE,EAAM7E,SAAS0B,GACfiD,EAAW,EAAKG,SAASpD,EAAImD,IAE7BF,GAAW,OAAKE,IACPlE,KAAKe,GAGXiD,GArFQ,EAgHnBI,mBAAqB,SAACC,GAClB,MAAyF,EAAKzD,MAAtFiB,EAAR,EAAQA,SAAUG,EAAlB,EAAkBA,sBAAuBF,EAAzC,EAAyCA,wBAAyBC,EAAlE,EAAkEA,mBAmBlE,OAhBIsC,EACc,kBAACC,EAAA,EAAD,CACVC,MAAM,mBACNC,KAAO,CAAE,8CAGC,kBAAC,EAAD,CACV1C,wBAA0BA,EAC1BD,SAAWA,EACXE,mBAAqBA,EACrBjB,SAAW,EAAKA,SAChBmB,eAAiB,EAAKA,eACtBD,sBAAwBA,KA7HhC,EAAKd,MAAQ,CACTqC,kBAAmB,GACnBF,oBAAqB,GACrBC,eAAgB,IAGpB,EAAKH,gBAAkB,WACnB,EAAKhC,SAAS,CAAEoC,kBAAmB,KACnC,EAAKpC,SAAS,CAAEkC,oBAAqB,KACrC,EAAKlC,SAAS,CAAEmC,eAAgB,MAZrB,EADvB,qEAiBI,8EACImB,EAAAA,EAAAA,WAAiC,CAC7BC,QAAStD,KAAKR,MAAM8D,QACpBC,UAAWvD,KAAKR,MAAM+D,UACtBC,mBAAoBxD,KAAKR,MAAMgE,oBAChCxD,KAAKR,MAAMiE,sBAAuBzD,KAAKR,MAAM4C,wBAAyBpC,KAAKR,MAAM6C,mBAAoBrC,KAAKR,MAAMmB,oBALvH,gDAjBJ,mEAyFI,SAAShB,EAAImD,GACT,IAAIF,EAAW,GAOf,OANAE,EAAM/B,SAAQ,SAAS4B,GACfhD,IAAOgD,GACPC,EAAShE,KAAK+D,MAIfC,IAjGf,0BAoGI,WACI,MAA+E5C,KAAKR,MAA5EkB,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,mBAAoBC,EAArD,EAAqDA,sBACjD8C,EAAgB,EAQpB,OANI9C,EAAsBzB,OACtBuE,GAAiB9C,EAAsBzB,OAASuB,EAAwBvB,OAASwB,EAAmBxB,OAEpGuE,GAAiBhD,EAAwBvB,OAASwB,EAAmBxB,OAGlEuE,IA9Gf,oBAwII,WAAS,WACGC,EAAc3D,KAAKR,MAAnBmE,UACR,EAAmE3D,KAAKF,MAAhEqC,EAAR,EAAQA,kBAAmBF,EAA3B,EAA2BA,oBAAqBC,EAAhD,EAAgDA,eAEhD,OACI,kBAAC,aAAD,KACI,8BACI,kBAAC,EAAA0B,QAAD,CACIjE,GAAG,kBACHuB,MAAO,CAAE2C,SAAU,SACnBF,UAAYA,EACZG,YAAc,kBAAM,EAAKjC,gBACzBkC,cAAgB,gDAAuB/D,KAAKgE,eAA5B,KAChBC,cAAgB,kBAAC,EAAAC,OAAD,CACZC,IAAI,UACJC,QAAQ,UACRC,QAAU,kBAAM,EAAKrC,gBACrBsC,OAAO,iCACPC,YAAcpC,EAAkBhD,SAAW8C,EAAoB9C,SAAW+C,EAAe/C,QAL7E,iBAShBqF,SAAWC,EAAAA,gBAAAA,OACXC,YAAc,yBAAKxD,MAAO,CAAEyD,UAAW,QAASC,UAAW,SACrD5E,KAAKgD,mBAA2C,IAAxBhD,KAAKgE,kBAGnC,uBAAGK,QAAU,kBAAM,EAAKxC,iBAAxB,aACgB7B,KAAKgE,eADrB,YAnKxB,GAAoC5D,EAAAA,WA6KpCwB,EAAevB,UAAY,CACvBkD,UAAWjD,IAAAA,MACXG,SAAUH,IAAAA,OACV8B,wBAAyB9B,IAAAA,KACzB+B,mBAAoB/B,IAAAA,KACpBmD,sBAAuBnD,IAAAA,KACvBkD,mBAAoBlD,IAAAA,MACpBqD,UAAWrD,IAAAA,KACXgC,eAAgBhC,IAAAA,KAChBI,wBAAyBJ,IAAAA,MACzBK,mBAAoBL,IAAAA,MACpBM,sBAAuBN,IAAAA,MACvBiC,aAAcjC,IAAAA,KACdkC,uBAAwBlC,IAAAA,KACxBgD,QAAShD,IAAAA,MACTwB,oBAAqBxB,IAAAA,MAGzB,U,0BCpLO,IAAMuE,EAAb,+B,IAAA,G,EAAA,E,gaACI,WAAYrF,GAAO,6BACf,cAAMA,IA8BVsF,aAAe,YAGXC,EAF+B,EAAKvF,MAA5BuF,qBAEW,GACnB,EAAKhF,SAAS,CAAEiF,iBAAiB,KAnClB,EA+CnBC,cAAgB,SAACtF,EAAIuF,EAASC,EAAMhF,GAChC,MAAO,CACHR,GAAAA,EACAsB,KAAM,kBAACmE,EAAA,EAAD,CACFF,QAAUA,EACVC,KAAOA,IAEXhF,KAAAA,IAtDW,EAgEnB2B,oBAAsB,WAClB,IAAQkD,EAAoB,EAAKlF,MAAzBkF,iBAGRD,EAF+B,EAAKvF,MAA5BuF,qBAEYC,GACpB,EAAKjF,SAAS,CAAEiF,iBAAkBA,KArEnB,EAwEnBK,SAAW,SAACC,EAAOC,EAAYC,GAC3B,IACIC,EADJ,EAAuE,EAAKjG,MAApEkG,EAAR,EAAQA,kBAAmBtD,EAA3B,EAA2BA,wBAAyBE,EAApD,EAAoDA,eAEhDqD,EAAkB,IAEP,IAAXH,GACAC,EAAMC,EAAkBrH,KAAI,SAASsE,GACjC,OAAOA,EAAK,MAGhBgD,EAAkBD,EAAkBrH,IAAI,SAASsE,GAC7C,OAAO3C,KAAKiF,cAActC,EAAK,GAAI,WAAY,kBAAC,EAAAiD,cAAD,MAAmBjD,EAAK,KACzEkD,MAFsC,cAIxCJ,EAAM,CAAEC,EAAkBF,GAAO,IAEjCG,EAAgB/G,KACZ,EAAKqG,cAAcS,EAAkBF,GAAO,GAAI,WAAY,kBAAC,EAAAI,cAAD,MAAmBF,EAAkBF,GAAO,MAIhHlD,EAAemD,EAAKF,EAAY,cAChCnD,EAAwBuD,EAAiBJ,IA9F1B,EAoJnBO,aAAe,SAACP,GACZ,IAEII,EAFJ,EAAuE,EAAKnG,MAApEkG,EAAR,EAAQA,kBAAmBtD,EAA3B,EAA2BA,wBAAyBE,EAApD,EAAoDA,eAChDmD,EAAM,GAGVC,EAAkB3E,SAAQ,SAASC,GAC/ByE,EAAI7G,KAAKoC,EAAS,OAGtB2E,EAAkBD,EAAkBrH,IAAI,SAAS2C,GAC7C,OAAOhB,KAAKiF,cAAcjE,EAAS,GAAI,WAAY,kBAAC,EAAA4E,cAAD,MAAmB5E,EAAS,KACjF6E,MAFsC,YAIxCvD,EAAemD,EAAKF,EAAY,cAChCnD,EAAwBuD,EAAiBJ,IAlK1B,EAqKnBQ,oBAAsB,SAACC,GACnB,MAAmE,EAAKxG,MAAhEiB,EAAR,EAAQA,SAAUgD,EAAlB,EAAkBA,sBAAuB7C,EAAzC,EAAyCA,sBACrCqF,EAAkB,GAEN,IAAZD,EAAKrG,GAEDsG,EADAD,EAAKE,KACatF,EAEAH,EAASK,KAAKzC,IAAI,SAAS8H,GACzC,OAAOnG,KAAKiF,cAAckB,EAAIxG,GAAI,SAAU,kBAAC,EAAAyG,WAAD,MAAgBD,EAAIE,eAClER,MAFkC,YAKnCG,EAAK5H,SAGNqC,EAASK,KAAKC,SAAQ,SAASoF,GACvBA,EAAIxG,KAAOqG,EAAKrG,IAChBsG,EAAgBrH,KAAK,CACjBe,GAAIwG,EAAIxG,GACRQ,KAAMgG,EAAIE,aACVpF,KAAM,kBAACmE,EAAA,EAAD,CACFF,QAAQ,SACRC,KAAO,kBAAC,EAAAiB,WAAD,aATvBH,EAAkBrF,EAAsBzC,QAAO,SAAAgD,GAAM,OAAIA,EAAOxB,KAAOqG,EAAKrG,MAiBpF8D,EAAsBwC,EAAiBD,EAAK5H,WAlM5C,EAAKkI,aAAe,EAAKA,aAAaT,MAAlB,WACpB,EAAKU,gBAAkB,EAAKA,gBAAgBV,MAArB,WACvB,EAAKW,gBAAkB,EAAKA,gBAAgBX,MAArB,WAEvB,EAAK/F,MAAQ,CACT2G,cAAe,EAAKC,mBAAmB,EAAKlH,MAAMmH,aAClDC,QAAS,CACL,CAAEzD,MAAO,OAAQ0D,WAAY,CAAEC,EAAAA,WAC/B,CAAE3D,MAAO,eAAgB0D,WAAY,CAAEC,EAAAA,UAAUC,EAAAA,EAAAA,WAAU,MAC3D,CAAE5D,MAAO,qBAAsB0D,WAAY,EAAEE,EAAAA,EAAAA,WAAU,OAE3D/B,iBAAiB,EACjBgC,4BAA6B,IAGjC,EAAKC,eAAiBC,IAAAA,YAjBP,EADvB,qEAqBI,yGACUC,OAAOC,SAASC,OAAOC,KAAKC,UADtC,OAGIJ,OAAOK,gBAAiBC,EAAAA,EAAAA,IAAe,CACnCC,WAAY,gBACZC,SAAU,YAAc,IAAX3B,EAAW,EAAXA,KACT,EAAKxG,MAAMoI,sBAAuB,EAAK7B,oBAAoBC,MANvE,2CArBJ,6EAuCI,SAAmBW,GACf,OACI,CAAExC,IAAK,eAAgB3E,MAAO,CAAEqI,MAAO,IAAM1E,MAAO,QACpD,CAAEgB,IAAK,OAAQ3E,MAAO,CAAEqI,MAAO,GAAIC,UAAU,GAAQ3E,MAAO,QAC5D,CAAEgB,IAAK,UAAW3E,MAAO,CAAEqI,MAAO,IAAM1E,MAAO,cAHnD,eAIOwD,EAAYoB,QAAU,CAAC,CAAE5D,IAAK,sBAAuB3E,MAAO,CAAEqI,MAAO,GAAIC,UAAU,GAAQ3E,MAAO,wBAA2B,OA5C5I,gCA2DI,SAAmB6E,IACVA,EAAUJ,sBAAwB5H,KAAKR,MAAMoI,sBAC9C5H,KAAKD,SAAS,CAAEiH,4BAA6BhH,KAAKR,MAAMyI,wBA7DpE,0BAkGI,WACI,MAA2GjI,KAAKR,MAAxG8G,EAAR,EAAQA,aAAc7F,EAAtB,EAAsBA,SAAUwH,EAAhC,EAAgCA,oBAAqBC,EAArD,EAAqDA,qBAAsBC,EAA3E,EAA2EA,eAAgB1K,EAA3F,EAA2FA,YAE3F6I,EACI7F,EAASgB,kBACTwG,EACAE,EACA1K,GAEJyK,MA3GR,iCA8GI,SAAoBE,EAAeC,GAC/B,OAA+B,IAA3BA,EAAgBlJ,OACTiJ,EAEAA,EAAcjK,QAAO,SAAAmK,GAAU,OACkD,IAApFD,EAAgBE,WAAU,SAAAC,GAAY,OAAKF,EAAW3I,KAAO6I,EAAa7I,WAnH1F,gCAwHI,WACI,MAEgBK,KAAKR,MAFb+D,EAAR,EAAQA,UAAWnB,EAAnB,EAAmBA,wBAAyBC,EAA5C,EAA4CA,mBAAoBoB,EAAhE,EAAgEA,sBAAuBD,EAAvF,EAAuFA,mBACnFlB,EADJ,EACIA,eAAgB5B,EADpB,EACoBA,wBAAyBC,EAD7C,EAC6CA,mBAAoBC,EADjE,EACiEA,sBAAuB4B,EADxF,EACwFA,uBACpFc,EAFJ,EAEIA,QAEJG,EAAsBzD,KAAKyI,oBAAoB7H,EAAuB0C,IAAU,GAChF,IAAIoF,EAAoB1I,KAAKyI,oBAAoB/H,EAAyB6C,GAC1EnB,EAAwBsG,GAAmB,GAC3CA,EAAkB3H,SAAQ,SAAAC,GAAQ,OAAIsB,EAAetB,EAASrB,IAAI,EAAO,iBACtDK,KAAKyI,oBAAoB9H,EAAoB6C,GACnDzC,SAAQ,SAAAK,GAAG,OAAIiB,EAAmBjB,MAC/CoB,EAAuBgB,EAAmBnF,KAAI,SAAA+C,GAAG,OAAIA,EAAIzB,SAnIjE,6BAsII,WACI,MAAuDK,KAAKR,MAApD0I,EAAR,EAAQA,sBAGRS,EAHA,EAA8BA,sBACU3I,KAAKF,MAArCkH,4BAE0C,cAClDhH,KAAK4I,qBACLV,MA5IR,6BA+II,SAAgB5C,EAAOuD,IAGnBC,EAF4B9I,KAAKR,MAAzBsJ,iBAEQD,KAlJxB,oBAwMI,WAAS,MACL,EAG6G7I,KAAKR,MAH1GuJ,EAAR,EAAQA,UAAWnB,EAAnB,EAAmBA,qBAAsBrE,EAAzC,EAAyCA,UAAWmC,EAApD,EAAoDA,kBAAmBsD,EAAvE,EAAuEA,WAAYC,EAAnF,EAAmFA,kBAAmB7G,EAAtG,EAAsGA,wBAClGC,EADJ,EACIA,mBAAoBoB,EADxB,EACwBA,sBAAuBD,EAD/C,EAC+CA,mBAAoB0F,EADnE,EACmEA,QAASzI,EAD5E,EAC4EA,SAAUkG,EADtF,EACsFA,YAAapE,EADnG,EACmGA,aAAcC,EADjH,EACiHA,uBAC7GyF,EAFJ,EAEIA,oBAAqBvH,EAFzB,EAEyBA,wBAAyBC,EAFlD,EAEkDA,mBAAoBwH,EAFtE,EAEsEA,eAAgB7F,EAFtF,EAEsFA,eAAgB1B,EAFtG,EAEsGA,sBAClGa,EAHJ,EAGIA,kBAAmB0H,EAHvB,EAGuBA,qBAAsB7F,EAH7C,EAG6CA,QAAS8F,EAHtD,EAGsDA,eAAgBC,EAHtE,EAGsEA,cAAeC,EAHrF,EAGqFA,oBACrF,EAAoDtJ,KAAKF,MAAjD8G,EAAR,EAAQA,QAAS5B,EAAjB,EAAiBA,gBAAiByB,EAAlC,EAAkCA,cAElC,OACI,kBAAC,aAAD,KACI,kBAAC,EAAA8C,MAAD,CACI5H,UAAU,QACV6H,IAAMxJ,KAAKiH,eACXwC,SAAWzE,EAAkBhF,KAAK8E,aAAe,KACjD5D,MAAO,CAAEyD,UAAW,SACpBkD,MAAQ,SACR1E,MAAM,oBACNmB,OAAO,0BACPoF,OAAS9B,EACT+B,QAAU3J,KAAKuG,gBACfqD,QAAU,CACN,kBAAC,EAAA1F,OAAD,CACIC,IAAI,UACJC,QAAQ,UACRC,QAAUrE,KAAKsG,aACf/B,WAAsD,KAAxC9D,MAAAA,GAAA,UAAAA,EAAUgB,yBAAV,eAA6BtC,SACR,IAA/B8I,EAAoB9I,QACM,IAA1BgJ,EAAehJ,QACZ6F,EACPV,OAAO,mCARX,UAYA,kBAAC,EAAAJ,OAAD,CACIC,IAAI,SACJC,QAAQ,OACRC,QAAUrE,KAAKuG,gBACfhC,WAAaS,EACbV,OAAO,mCALX,YAWJ,kBAACuF,EAAA,EAAD,CAAmBZ,kBAAoBA,IACvC,kBAAC,EAAAa,QAAD,CAAS5I,MAAO,CAAE6I,QAAS,QACvB,kBAAC,EAAAC,eAAD,KACI,kBAAC,EAAAC,YAAD,CAAa7F,QAAQ,cACjB,kBAAC,EAAD,CACI3D,SAAWA,EACXgD,sBAAwBA,EACxBrB,wBAA0BA,EAC1BC,mBAAqBA,EACrBsB,UAAYqB,EACZ1C,eAAiBA,EACjB5B,wBAA0BA,EAC1BC,mBAAqBA,EACrBC,sBAAwBA,EACxB2B,aAAeA,EACfC,uBAAyBA,EACzBV,oBAAsB9B,KAAK8B,oBAC3BwB,QAAUA,EACVC,UAAYA,EACZC,mBAAqBA,OAKrC,kBAAC,EAAA0G,KAAD,CACIC,UAAYpB,EACZ1D,SAAWrF,KAAKwG,iBAEhB,kBAAC,EAAA4D,IAAD,CACIC,SAAW,EACXlH,MAAM,UACNxD,GAAG,cACH,yBAAuB,sBAEvB,kBAAC2K,EAAA,EAAD,CACI7I,kBAAoBA,EACpB+B,mBAAqBA,EACrB+G,gBAAiB,EACjB5D,YAAcA,EACdlG,SAAWA,EACX+J,cAAc,WACdC,eAAiBtB,EACjB1C,cAAgBA,KAGxB,kBAAC,EAAA2D,IAAD,CACIC,SAAW,EACXlH,MAAM,YACNxD,GAAG,gBACH,yBAAuB,wBAEvB,kBAAC+K,EAAA,EAAD,CACIC,QAAQ,aACRJ,gBAAiB,EACjBlF,SAAWrF,KAAKqF,SAChBuF,UAAYlF,EACZwD,QAAUA,EACVtC,QAAUA,EACVd,aAAe9F,KAAK8F,aACpBmC,oBAAsBA,EACtBmB,eAAiBA,EACjBzC,YAAcA,EACdkE,OAAQ,EACR7F,gBAAkBA,EAClB8F,kBAAmB,EACnBC,WAAY,EACZ/B,WAAaA,EACbK,cAAgBA,EAChBC,oBAAsBA,YAvTtD,GAAoClJ,EAAAA,WAiUpCyE,EAAexE,UAAY,CACvB2K,UAAW1K,IAAAA,KACXsH,qBAAsBtH,IAAAA,KACtByI,UAAWzI,IAAAA,OACXgG,aAAchG,IAAAA,KACdiG,gBAAiBjG,IAAAA,KACjB4H,qBAAsB5H,IAAAA,KACtBwI,gBAAiBxI,IAAAA,KACjBG,SAAUH,IAAAA,OACVgD,QAAShD,IAAAA,MACT2H,oBAAqB3H,IAAAA,MACrBiD,UAAWjD,IAAAA,MACX6H,eAAgB7H,IAAAA,MAChB4I,QAAS5I,IAAAA,KACToF,kBAAmBpF,IAAAA,MACnBgC,eAAgBhC,IAAAA,KAChBkD,mBAAoBlD,IAAAA,MACpB7C,YAAa6C,IAAAA,OACb8I,eAAgB9I,IAAAA,OAChBqG,YAAarG,IAAAA,OACb2I,kBAAmB3I,IAAAA,OACnBmB,kBAAmBnB,IAAAA,MACnB6I,qBAAsB7I,IAAAA,KACtBkC,uBAAwBlC,IAAAA,KACxBM,sBAAuBN,IAAAA,MACvBI,wBAAyBJ,IAAAA,MACzBK,mBAAoBL,IAAAA,MACpBmD,sBAAuBnD,IAAAA,KACvB8B,wBAAyB9B,IAAAA,KACzB+B,mBAAoB/B,IAAAA,KACpBiC,aAAcjC,IAAAA,KACdyE,mBAAoBzE,IAAAA,KACpBqI,qBAAsBrI,IAAAA,KACtB2K,kBAAmB3K,IAAAA,KACnB0I,WAAY1I,IAAAA,KACZ+I,cAAe/I,IAAAA,OACfgJ,oBAAqBhJ,IAAAA,MA0CzB,SAAe4K,EAAAA,EAAAA,UAvCf,SAAyBpL,GACrB,MAAO,CACH8H,qBAAsB9H,EAAMqL,oBAAoBvD,qBAChDtE,QAASxD,EAAMsL,aAAa9H,QAC5ByF,UAAWjJ,EAAMqL,oBAAoBpC,UACrCtI,SAAUX,EAAMW,SAChBwH,oBAAqBnI,EAAMuL,oBAAoBC,gBAAgBrD,oBAC/D1E,UAAWzD,EAAMsL,aAAa7H,UAC9B4E,eAAgBrI,EAAMyL,sBAAsBpD,eAC5Ce,QAASpJ,EAAMuL,oBAAoBC,gBAAgBpC,QACnDxD,kBAAmB5F,EAAMuL,oBAAoBC,gBAAgB5F,kBAC7DlC,mBAAoB1D,EAAMsL,aAAa5H,mBACvC4F,eAAgBtJ,EAAMuL,oBAAoBG,cAAcpC,eACxDH,kBAAmBnJ,EAAMmJ,kBACzBtI,mBAAoBb,EAAMqL,oBAAoBxK,mBAC9CD,wBAAyBZ,EAAMqL,oBAAoBzK,wBACnDE,sBAAuBd,EAAMqL,oBAAoBvK,sBACjDoI,WAAYlJ,EAAMuL,oBAAoBC,gBAAgBtC,WACtDK,cAAevJ,EAAMuL,oBAAoBC,gBAAgBjC,kBAIjE,SAA4BoC,GACxB,MAAO,CACHvD,qBAAsB,kBAAMuD,EAASC,EAAAA,EAAAA,yBACrC5C,gBAAiB,SAAC6C,GAAD,OAAkBF,EAASC,EAAAA,EAAAA,gBAAsCC,KAClFlI,sBAAuB,SAACyB,EAASK,GAAV,OAAyBkG,EAASC,EAAAA,EAAAA,sBAA4CxG,EAASK,KAC9GnD,wBAAyB,SAAC8C,EAASK,GAAV,OAAyBkG,EAASC,EAAAA,EAAAA,wBAA8CxG,EAASK,KAClHlD,mBAAoB,SAAC6C,GAAD,OAAauG,EAASC,EAAAA,EAAAA,mBAAyCxG,KACnF5C,eAAgB,SAAC3C,EAAI4F,EAAYoF,GAAjB,OAA6Bc,EAASG,EAAAA,EAAAA,eAAqCjM,EAAI4F,EAAYoF,KAC3GnI,uBAAwB,SAACqJ,GAAD,OAAwBJ,EAASK,EAAAA,EAAAA,uBAA+CD,KACxGtJ,aAAc,SAAC5C,EAAI4F,GAAL,OAAoBkG,EAAS,CAAE7L,KAAM,gBAAiBmM,QAAS,CAAEpM,GAAAA,EAAI4F,WAAAA,MACnF4D,qBAAsB,SAAC1H,GAAD,OAAuBgK,EAASC,EAAAA,EAAAA,qBAA2CjK,KACjGsD,mBAAoB,SAACR,GAAD,OAAgBkH,EAASO,EAAAA,EAAAA,mBAAuCzH,KACpFoE,qBAAsB,SAAClD,EAAKkF,GAAN,OAAkBc,EAASG,EAAAA,EAAAA,qBAA2CnG,EAAKkF,KACjGrB,oBAAqB,kBAAMmC,EAASG,EAAAA,EAAAA,oBAA0C,mBAItF,CAA4D/G,G,mBC5ZtDoH,EAAAA,SAAAA,I,2bACF,WAAYzM,GAAO,6BACf,cAAMA,IAEDM,MAAQ,CACToM,YAAa,EAAK1M,MAAM0M,aAJb,E,yCAQnB,WACI,MAAoClM,KAAKR,MAAjCyL,EAAR,EAAQA,kBAAmBtI,EAA3B,EAA2BA,KAG3B,OAFwB3C,KAAKF,MAArBoM,YAIE,kBAAC,EAAAC,SAAD,CACExK,UAAU,6BACV,2BAAyB,aACzB,yBAAyB,sBAAwBgB,EAAKhD,GACtD0E,QAAU,kBAAM4G,OAElB,kBAAC,EAAAmB,iBAAD,CACEzK,UAAU,6BACV,2BAAyB,aACzB,yBAAyB,sBAAwBgB,EAAKhD,GACtD0E,QAAU,kBAAM4G,EAAkBtI,EAAKhD,S,2BAKvD,WACI,IAAQuM,EAAgBlM,KAAKF,MAArBoM,YACAvJ,EAAS3C,KAAKR,MAAdmD,KACJ/C,EAAO+C,EAAK/C,KAMhB,MAJkB,8BAAd+C,EAAK/C,OACLA,EAAO,qBAGPsM,EACO,kGAEA,yCAAgBtM,EAAhB,iC,oBAIf,WACI,OACI,kBAAC,EAAAyM,QAAD,CACI7H,SAAS,MACTU,QAAUlF,KAAKsM,iBAEbtM,KAAKuM,kB,EApDjBN,CAA0B7L,EAAAA,WA0DhC6L,EAAkB5L,UAAY,CAC1B6L,YAAa5L,IAAAA,KACb2K,kBAAmB3K,IAAAA,KACnBqC,KAAMrC,IAAAA,QAGV,U,ICxDMkM,EAAAA,SAAAA,I,6bACF,WAAYhN,GAAO,6BACf,cAAMA,IAGViN,WAAa,SAACC,GACV,OAAOpL,IAAAA,IAAWoL,GAAYlL,OAAO,2BALtB,EAwCnBmL,oBAAsB,SAAChK,GACnB,OACI,kBAAC,aAAD,KACMA,EAAKiK,aACD,kBAAC,EAAAP,QAAD,CACE7H,SAAS,MACTU,QAAU,8CAEV,kBAAC,EAAA2H,wBAAD,OAEF,MAEsB,IAA1BlK,EAAKmK,mBAA0D,IAA5BnK,EAAKoK,mBACpC,kBAAC,EAAAV,QAAD,CACE7H,SAAS,MACTU,QAAWvC,EAAKoK,mBAEV,qDADA,wDAGN,kBAAC,EAAAC,iBAAD,OAEF,OA7DC,E,+CAQnB,SAAiBxO,GAab,OAVIA,IAASC,EAAAA,GACE,kBAAC,EAAAwO,mBAAD,CAAoBtL,UAAU,gBAEpCnD,IAASE,EAAAA,GACH,kBAAC,EAAAwO,qBAAD,CAAsBvL,UAAU,gBAGhC,kBAAC,EAAAwL,eAAD,CAAgBxL,UAAU,iB,6CAM7C,WAAiByL,EAAU5O,GAA3B,kFAC4DwB,KAAKR,MAArDpC,EADZ,EACYA,WAAYiQ,EADxB,EACwBA,eAAgBC,EADxC,EACwCA,gBAEnB,SAAbF,EAHR,gCAIcC,EAAe7O,GAJ7B,6CAMc8O,EAAgB9O,GAN9B,OASIpB,IATJ,gD,kFAYA,WACI,MAAO,CAAE,wBAAI+G,IAAI,0BAAyB,kBAAC,EAAAoJ,SAAD,CAAUC,KAAOC,EAAAA,aAAAA,S,iCA8B/D,WAAsB,WAClB,EAC6EzN,KAAKR,MAD1EkO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAAYhH,EAAlC,EAAkCA,YAAalJ,EAA/C,EAA+CA,YAAamQ,EAA5D,EAA4DA,aAAc3F,EAA1E,EAA0EA,oBACtEE,EADJ,EACIA,eAAgB3F,EADpB,EACoBA,uBAAwBlF,EAD5C,EAC4CA,UAAW2N,EADvD,EACuDA,kBAEnD9E,EAAM,GACN0H,EAAW,GA8Ff,OA5FAF,EAAW5M,SAAQ,SAAA4B,GACG,WAAdA,EAAK/C,KACLiO,EAAW,kBAAC,EAAAxB,QAAD,CACP7H,SAAS,MACTU,QAAU,wCAEV,kBAAC,EAAAkB,WAAD,OAEiB,aAAdzD,EAAK/C,KACZiO,EAAW,kBAAC,EAAAxB,QAAD,CACP7H,SAAS,MACTU,QAAU,0CAEV,kBAAC,EAAAU,cAAD,OAEiB,8BAAdjD,EAAK/C,OACZiO,EAAW,kBAAC,EAAAxB,QAAD,CACP7H,SAAS,MACTU,QAAU,mDAEV,kBAAC,EAAA4I,UAAD,QAIR3H,EAAIvH,KACA,wBACI,YAAY+D,EAAKhD,GACjBwE,IAAMxB,EAAKhD,GACXgC,UAAYgB,EAAKhD,KAAOlC,EAClB,2DADM,oCAEuBkF,EAAK/C,KAF5B,0BAIZ,6BACI,uBACI,aAAW,qBACXyE,QAAU,kBAAMuJ,EAAajL,IAC7BhB,UAAU,qBACV,2BAAyB,aACzB,yBAAyB,wBAA0BgB,EAAKhD,IACxD,kBAAC,EAAAoO,UAAD,QAGR,yBAAKpM,UAAU,qBACX,6BACI,0BAAMA,UAAU,qBACVkM,GAEN,0BAAMlM,UAAU,eAAgBgB,EAAK0D,eAEzC,yBAAK1E,UAAU,gCACX,kBAAC,EAAD,CACIsJ,kBAAoBA,EACpBtI,KAAOA,EACPuJ,YAAevJ,EAAKhD,KAAOlC,KAEE,IAA/BkF,EAAKqL,sBACH,kBAAC,EAAA3B,QAAD,CACI7H,SAAS,MACTU,QAAU,wHAEV,kBAAC,EAAA2H,wBAAD,CAAyBoB,MAAM,aACtB,GAEjB,0BAAMtM,UAAU,6BACVgB,EAAKuL,aACD,EAAKzB,WAAW9J,EAAKuL,cACrB,EAAKzB,WAAW9J,EAAKwL,WAG7BxH,EAAYoB,SACK,WAAdpF,EAAK/C,MAAmC,8BAAd+C,EAAK/C,KAa9B,KAZA,kBAACwO,EAAA,EAAD,CACEjN,OAASwB,EACTrF,UAAYA,EACZ+Q,WAAa1L,EAAK0D,aAClB5I,YAAcA,EACdiQ,aAAeA,EACfY,kBAAmB,EACnB/D,gBAAiB,EACjBpC,eAAiBA,EACjB3F,uBAAyBA,EACzByF,oBAAsBA,IAI5B,EAAK0E,oBAAoBhK,UAOxCwD,I,6BAGX,WAAkB,WACd,EAA4CnG,KAAKR,MAAzC1B,EAAR,EAAQA,SAAU6P,EAAlB,EAAkBA,WAAY5P,EAA9B,EAA8BA,UAE9B,OACI,wBAAI4D,UAAU,uBAAuB,2BAAyB,eAAe,yBAAuB,+BAChG,wBACIA,UAAU,iEACVwC,IAAI,cACJxE,GAAK7B,EACLuG,QAAU,kBAAM,EAAKkK,WAAW,OAAQzQ,IACxC,2BAAyB,aACzB,yBAAuB,oBAEvB,yBAAK6D,UAAU,eAAf,QAAoC3B,KAAKwO,iBAAiB1Q,KAE9D,wBACI6D,UAAU,+EACVwC,IAAI,eACJxE,GAAK5B,GAAa,WAClB,2BAAyB,aACzB,yBAAuB,oBACvBsG,QAAU,kBAAM,EAAKkK,WAAW,QAASxQ,KAEzB,KAAdA,EACI,yBAAK4D,UAAU,eAAf,SAAqC3B,KAAKwO,iBAAiBzQ,IAC3D,sCAAaiC,KAAKwO,iBAAiBzQ,KAG3C4P,EAAWxO,OAASa,KAAKyO,sBAAwBzO,KAAK0O,0B,oBAKpE,WACI,OACI,kBAAC,aAAD,KACM1O,KAAK2O,uB,EA9MjBnC,CAAyBpM,EAAAA,WAoN/BoM,EAAiBnM,UAAY,CACzBvC,SAAUwC,IAAAA,OACVoN,aAAcpN,IAAAA,KACdsO,sBAAuBtO,IAAAA,KACvBqN,WAAYrN,IAAAA,MACZqG,YAAarG,IAAAA,OACb7C,YAAa6C,IAAAA,OACbsN,aAActN,IAAAA,KACdvC,UAAWuC,IAAAA,OACXhD,UAAWgD,IAAAA,MACX+M,eAAgB/M,IAAAA,KAChBgN,gBAAiBhN,IAAAA,KACjB2K,kBAAmB3K,IAAAA,KACnBlD,WAAYkD,IAAAA,KACZ6H,eAAgB7H,IAAAA,MAChBkC,uBAAwBlC,IAAAA,KACxB2H,oBAAqB3H,IAAAA,OAGzB,W,IC/OMuO,GAAAA,SAAAA,I,2bACF,WAAYrP,GAAO,kCACTA,G,mCAGV,WAWI,MAR8B,SAA1BQ,KAAKR,MAAMsP,KAAKhP,MACJ,kBAAC,EAAAiP,gBAAD,CAAiBd,MAAM,UAAUe,OAAO,OAAOnH,MAAM,SAChC,cAA1B7H,KAAKR,MAAMsP,KAAKhP,MACX,kBAAC,EAAAmP,sBAAD,CAAuBhB,MAAM,UAAUe,OAAO,OAAOnH,MAAM,SAE3D,kBAAC,EAAAqH,mBAAD,CAAoBjB,MAAM,UAAUe,OAAO,OAAOnH,MAAM,W,oBAM5E,WACI,MAA4B7H,KAAKR,MAAzBsP,EAAR,EAAQA,KAAM/Q,EAAd,EAAcA,UAEd,OACI,kBAAC,EAAAsO,QAAD,CACIlI,IAAM2K,EAAK3O,KAAO,IAAMpC,EACxByG,SAAS,MACTU,QAAU,6BAAO4J,EAAKK,UAEpBnP,KAAKiB,Y,EA5BjB4N,CAAkBzO,EAAAA,WAkCxByO,GAAUxO,UAAY,CAClByO,KAAMxO,IAAAA,OACNvC,UAAWuC,IAAAA,QAGf,YCxCA,SAAS8O,GAAQ5P,GACb,IAAQ6P,EAA4C7P,EAA5C6P,aAAcC,EAA8B9P,EAA9B8P,UAAWC,EAAmB/P,EAAnB+P,SAAU3P,EAASJ,EAATI,KA2C3C,OACI,wBAAI+B,UAzCS,SAAT/B,GAA6B,aAATA,IAAwByP,EAAapR,SAASsR,GAC3D,+BAEA,4CAsBI,WACf,IAAIT,EAEJ,GAAa,aAATlP,GAAgC,eAATA,EAAuB,CAC9C,IAAI4P,EArBJH,EAAapR,SAASsR,GACf,kBAAC,EAAAE,cAAD,CACH9N,UAAY,oCAA+C,eAAT/B,EAAwB,aAAe,MACzF,2BAAyB,aACzB,yBAAyB,0BAA4B2P,EACrDlL,QAAU,kBAAMiL,EAAUC,MAGvB,kBAAC,EAAAG,eAAD,CACH/N,UAAY,wBAAmC,eAAT/B,EAAwB,aAAe,MAC7E,2BAAyB,aACzB,yBAAyB,0BAA4B2P,EACrDlL,QAAU,kBAAMiL,EAAUC,MAU9BT,EAAO,8BAAQU,EAAR,IAAmBD,QAE1BT,EADgB,aAATlP,EACA,uBAAG+B,UAAU,aAAc4N,GAE3BA,EAGX,OAAOT,EAKDa,IAKdP,GAAQ/O,UAAY,CAChBgP,aAAc/O,IAAAA,MACdgP,UAAWhP,IAAAA,KACXiP,SAAUjP,IAAAA,OACVV,KAAMU,IAAAA,QAGV,YCtDA,SAASsP,GAAcpQ,GACnB,IA6DQ2G,EA7DAkJ,EAA4E7P,EAA5E6P,aAAcC,EAA8D9P,EAA9D8P,UAAWR,EAAmDtP,EAAnDsP,KAAMnB,EAA6CnO,EAA7CmO,WAAYlQ,EAAiC+B,EAAjC/B,YAAaM,EAAoByB,EAApBzB,UAAW6B,EAASJ,EAATI,KAErEiQ,EAAa,SAACvM,EAAS3D,GACzB,OAAO2D,EAAQb,MAAK,SAAAtB,GAAM,OAAIA,EAAOxB,KAAOA,MAS1CmQ,EAAkB,SAAC3O,GACrB,IAAIQ,EAAY,CAAE,mBAalB,OAXIR,MAAAA,GAAAA,EAAQ4O,eACRpO,EAAU/C,KAAK,cAGfnB,GAAiC,eAAlB0D,MAAAA,OAAA,EAAAA,EAAQrB,QACvB6B,EAAU/C,KAAK,aACf+C,EAAU/C,KAAK,wBACPnB,GAA8B,cAAfqR,EAAKhP,OAC5B6B,EAAU/C,KAAK,aAGZ+C,GA4CX,OACI,wBACI,2BAAyB,eACzB,yBAAyB,wBAA0BmN,EAAK3O,KACxDwB,UAA2B,cAAfmN,EAAKhP,OAAwC,+BAAfgP,EAAKhP,MAAyC,iBAAmB,MAb3GqG,EAAM,IAENvH,KAAK,kBAAC,GAAD,CAASyQ,aAAeA,EAAeC,UAAYA,EAAYC,SAAWT,EAAK3O,KAAOP,KAAOA,KACtGuG,EAAIvH,KAzDG,wBAAI+C,UAAU,2CACjB,kBAAC,GAAD,CAAWmN,KAAOA,EAAO/Q,UAAYA,GAAwB,SA0DjEoI,EAAMA,EAAI6J,OArCM,WAIhB,IAHA,IACI7O,EADA8O,EAAO,GAGFC,EAAI,EAAGA,EAAIvC,EAAWxO,OAAQ+Q,IAAK,WACpCpB,EAAKxL,UACLnC,EAAS0O,EAAWf,EAAKxL,QAASqK,EAAWuC,GAAGvQ,KAGpD,IAAIgC,EAAYmO,EAAgB3O,GAEhC8O,EAAKrR,KAAK,wBAAI+C,UAAYA,EAAUwO,KAAK,MACjB,QAAZ,QAAN,EAAAhP,SAAA,eAAQiP,OAAiB,UAAzB,UAAqCjP,SAArC,aAAqC,EAAQiP,MACvC,QAAN,EAAAjP,SAAA,SAAQ4O,cACN,0BACI7O,MAAO,CAAEmP,MAAO,UAEhB,kBAAC,EAAAhE,QAAD,CACI7H,SAAS,MACTU,QAAU,8FAEV,kBAAC,EAAAoL,SAAD,CAAUrC,MAAM,cAEd,KAKtB,OAAOgC,EASUM,MAczBX,GAAcvP,UAAY,CACtBgP,aAAc/O,IAAAA,MACdgP,UAAWhP,IAAAA,KACXwO,KAAMxO,IAAAA,OACNqN,WAAYrN,IAAAA,MACZ7C,YAAa6C,IAAAA,OACbvC,UAAWuC,IAAAA,OACXV,KAAMU,IAAAA,QAGV,Y,+NCpFO,IAAMkQ,GAAb,qC,IAAA,G,EAAA,E,gaACI,WAAYhR,GAAO,6BACf,cAAMA,IAgDViR,sBAAwB,SAAC9C,GACrB,IAAI+C,EACAC,EASJ,OAPAD,EAAQ/C,EAAWpF,WAAU,SAAC5F,GAC1B,OAAOA,EAAKhD,KAAO,EAAKH,MAAM/B,eAGlCkT,EAAehD,EAAWiD,OAAOF,EAAO,GACxC/C,EAAWkD,QAAQF,EAAa,IAEzBhD,GA5DQ,EA2OnB1C,kBAAoB,SAACtL,GACjB,EAAK+N,aAAa,EAAKpQ,UAAW,EAAKC,YAAa,EAAKuT,OAAQnR,IA5OlD,EA+OnBoR,iBAAmB,WACf,IAAQtT,EAAgB,EAAK+B,MAArB/B,YACJuT,EAAiBvT,EAQrB,OANA,EAAKqT,OAAO/P,SAAQ,SAACpB,GACbA,IAAOlC,IACPuT,OAAiBC,MAIlBD,GAtPP,EAAKrD,WAAa,GAElB,EAAKuD,eACL,EAAKC,iBACL,EAAKC,YACL,EAAKC,iBACL,EAAKC,aACL,EAAKC,UACL,EAAKC,YAActK,IAAAA,YACnB,EAAKuK,aAAevK,IAAAA,YACpB,EAAKwK,eAAiBxK,IAAAA,YACtB,EAAKyK,aAAe,EAAKA,aAAa9L,MAAlB,WACpB,EAAK6H,aAAe,EAAKA,aAAa7H,MAAlB,WACpB,EAAK+H,aAAe,EAAKA,aAAa/H,MAAlB,WAhBL,EADvB,2CAoBI,WACI,IAAI+L,EAAW5R,KAAKwR,YAAYK,QAC5BC,EAAW9R,KAAKyR,aAAaI,QAC7BE,EAAW/R,KAAK0R,eAAeG,QAEnCD,EAASI,SAAW,WAChBF,EAASG,WAAaL,EAASK,WAC/BF,EAASE,WAAaL,EAASK,YAGnCF,EAASC,SAAW,WAChBJ,EAASK,WAAaF,EAASE,WAC/BH,EAASG,WAAaF,EAASE,cAhC3C,oDAoCI,8FACU9K,OAAOC,SAASC,OAAOC,KAAKC,UADtC,YAGQvH,KAAK1C,UAAU6B,OAAS,GAAKa,KAAKzC,YAAY4B,OAAS,GAAKa,KAAK8Q,OAAO3R,OAAS,GAHzF,gCAIca,KAAK0N,aAAa1N,KAAK1C,UAAW0C,KAAKzC,YAAayC,KAAK8Q,OAAQ9Q,KAAKR,MAAM/B,aAJ1F,gDApCJ,qGA4CI,WAA4ByU,GAA5B,8EACSA,EAAUlJ,WADnB,0CAEc7B,OAAOC,gBAFrB,iBAEc,EAAiBC,cAF/B,iBAEc,EAAyB8K,iBAFvC,aAEc,SAAqC,mBAFnD,2CA5CJ,0EAgEI,SAAe7O,EAASC,EAAWC,GAE/B,IAEImK,EAFAyE,EAA2B,GAC3BC,EAAmB,GAGvB,GAAuB,IAAnB/O,EAAQnE,QAAqC,IAArBoE,EAAUpE,QAA8C,IAA9BqE,EAAmBrE,OACrE,MAAO,GAGXmE,EAAUA,EAAQjF,KAAI,SAAS8C,GAE3B,OADAA,EAAOvB,KAAO,SACPuB,KAEXoC,EAAYA,EAAUlF,KAAI,SAAS2C,GAE/B,OADAA,EAASpB,KAAO,WACToB,MAEXwC,EAAqBA,EAAmBnF,KAAI,SAAS+C,GAEjD,OADAA,EAAIxB,KAAO,4BACJwB,MAGQL,SAAQ,SAASK,GAC5BkR,OAAOC,UAAUC,eAAeC,KAAKJ,EAAkBjR,EAAIC,WAC3DgR,EAAiBjR,EAAIC,WAAWzC,KAAKwC,GAErCiR,EAAiBjR,EAAIC,WAAa,CAAED,MAI5CgR,EAA2B9O,EAG3B,IAlCmD,iBAkC9C,sBAAQjC,EAAR,KAAmBqR,EAAnB,KACGvR,EAASmC,EAAQb,MAAK,SAAAE,GAAI,OAAItB,IAAcsB,EAAKhD,MACjD+Q,OAAK,OAEMO,IAAX9P,GACAuP,EAAQ0B,EAAyBO,QAAQxR,GACzCiR,EAA2B,GAAH,eACjBA,EAAyBQ,MAAM,EAAGlC,EAAQ,KADzB,OAEjBgC,IAFiB,OAGjBN,EAAyBQ,MAAMlC,EAAQ,EAAG0B,EAAyBjT,WAG1EiT,EAA2BA,EAAyBpC,OAAO0C,IAZnE,MAAkCJ,OAAOO,QAAQR,GAAjD,eAAoE,IAuBpE,OANA1E,EAAapK,EAAUyM,OAAOoC,GAE1BpS,KAAKR,MAAM/B,cACXkQ,EAAa3N,KAAKyQ,sBAAsB9C,IAGrCA,IAzHf,0BA6HI,WACI,IAAImF,EAAe,IAAIC,gBAAgB/S,KAAKR,MAAMJ,SAASP,QAE3DmB,KAAK1C,UAAYwV,EAAaE,OAAO,cAChChT,KAAK1C,UAAU6B,QAGhBa,KAAK1C,UAAY2V,MAAMC,QAAQlT,KAAK1C,WAAa0C,KAAK1C,UAAY,CAAE0C,KAAK1C,WACzE0C,KAAK1C,UAAY0C,KAAK1C,UAAUa,QAAO,SAAAwE,GAAI,YAAasO,IAATtO,MAH/C3C,KAAK1C,UAAY0C,KAAKR,MAAM8D,QAAQjF,KAAI,SAAA8C,GAAM,OAAIA,EAAOxB,QAlIrE,4BAyII,WACI,IAAImT,EAAe,IAAIC,gBAAgB/S,KAAKR,MAAMJ,SAASP,QAE3DmB,KAAKzC,YAAcuV,EAAaE,OAAO,gBAClChT,KAAKzC,YAAY4B,QAGlBa,KAAKzC,YAAc0V,MAAMC,QAAQlT,KAAKzC,aAAeyC,KAAKzC,YAAc,CAAEyC,KAAKzC,aAC/EyC,KAAKzC,YAAcyC,KAAKzC,YAAYY,QAAO,SAAAwE,GAAI,YAAasO,IAATtO,KACnD3C,KAAKR,MAAMmJ,qBAAqB3I,KAAKzC,YAAa,eAJlDyC,KAAKzC,YAAcyC,KAAKR,MAAM+D,UAAUlF,KAAI,SAAA2C,GAAQ,OAAIA,EAASrB,QA9I7E,uBAsJI,WACI,MAA6CK,KAAKR,MAA1CJ,EAAR,EAAQA,SAAUoD,EAAlB,EAAkBA,uBACdsQ,EAAe,IAAIC,gBAAgB3T,EAASP,QAEhDmB,KAAK8Q,OAASgC,EAAaE,OAAO,WAC7BhT,KAAK8Q,OAAO3R,QAGba,KAAK8Q,OAASmC,MAAMC,QAAQlT,KAAK8Q,QAAU9Q,KAAK8Q,OAAS,CAAE9Q,KAAK8Q,QAChE9Q,KAAK8Q,OAAS9Q,KAAK8Q,OAAO3S,QAAO,SAAAwE,GAAI,YAAasO,IAATtO,KACzCH,EAAuBxC,KAAK8Q,SAJ5B9Q,KAAK8Q,OAAS9Q,KAAKR,MAAMgE,mBAAmBnF,KAAI,SAAA+C,GAAG,OAAIA,EAAIzB,QA5JvE,4BAoKI,WACI,MAAwCK,KAAKR,MAArCJ,EAAR,EAAQA,SAAU6L,EAAlB,EAAkBA,kBAEdxN,EADe,IAAIsV,gBAAgB3T,EAASP,QACjBsU,IAAI,gBAE/B1V,GACAwN,EAAkC,OAAhBxN,OAAuBwT,EAAYxT,KA1KjE,wBA8KI,SAAW2V,EAAYC,EAASC,EAAa1T,IACrCwT,MAAAA,OAAA,EAAAA,EAAYjU,QAAS,GACrBkU,EAAQtS,SAAQ,SAAS5C,GACrB,IAAIoV,E,uWAAI,CAAH,GAAQpV,GAETiV,MAAAA,GAAAA,EAAYnV,SAASE,EAAOA,OAAOG,iBACnCiV,EAAEnV,UAAW,EAEA,SAATwB,GACA0T,EAAYC,IAIP,UAAT3T,GACA0T,EAAYC,QA5LhC,wBAkMI,WAAa,UACT,EAA4GvT,KAAKR,MAAzGgU,EAAR,EAAQA,eAAgB5V,EAAxB,EAAwBA,gBAAiB6V,EAAzC,EAAyCA,iBAAkBrU,EAA3D,EAA2DA,SAAUvB,EAArE,EAAqEA,aAAc6V,EAAnF,EAAmFA,qBAC/EZ,EAAe,IAAIC,gBAAgB3T,EAASP,QAEhD,UAAAiU,EAAaK,IAAI,uBAAjB,SAAkCQ,MAAM,KAAK5S,SAAQ,SAASpD,GAC1D8V,EAAiB9V,MAGrB,IAAIiW,EAAe,UAAGd,EAAaK,IAAI,wBAApB,aAAG,EAAmCQ,MAAM,KAC3DE,EAAkB,UAAGf,EAAaK,IAAI,uBAApB,aAAG,EAAkCQ,MAAM,KAEjE3T,KAAK8T,WAAWF,EAAiB/V,EAAc2V,EAAgB,SAC/DxT,KAAK8T,WAAWD,EAAoBjW,EAAiB8V,EAAsB,UA9MnF,qBAiNI,WAAU,QACN,EAAsD1T,KAAKR,MAAnDJ,EAAR,EAAQA,SAAUiO,EAAlB,EAAkBA,eAAgBC,EAAlC,EAAkCA,gBAG9B9O,EAAI,UAFW,IAAIuU,gBAAgB3T,EAASP,QAExBsU,IAAI,eAApB,aAAG,EAA0BQ,MAAM,KAE3CnV,MAAAA,GAAAA,EAAMuC,SAAQ,SAASvC,GACfA,EAAKP,SAAS,QACE,MAAZO,EAAK,GACL6O,EAAe5O,EAAAA,IAEf4O,EAAe3O,EAAAA,IAGH,MAAZF,EAAK,GACL8O,EAAgB7O,EAAAA,IACA,UAATD,GACP8O,EAAgB,OAKP,KAAjB9O,MAAAA,OAAA,EAAAA,EAAMW,SAAN,UAAsBX,EAAK,UAA3B,OAAsB,EAASP,SAAS,SACxCqP,EAAgB5O,EAAAA,MAxO5B,+CA6PI,WAAmBiE,GAAnB,gGAEqE3C,KAAKR,MAD9D4C,EADZ,EACYA,wBAAyBC,EADrC,EACqCA,mBAAoBoB,EADzD,EACyDA,sBAAuBD,EADhF,EACgFA,mBAAoBuQ,EADpG,EACoGA,iBAC5FtW,EAFR,EAEQA,YAAa+E,EAFrB,EAEqBA,uBAAwBwR,EAF7C,EAE6CA,oBACrChD,EAAiBvT,EAEH,WAAdkF,EAAK/C,KALb,wBAMQI,KAAK1C,UAAY0C,KAAK1C,UAAUa,QAAO,SAAAwB,GAAE,OAAIA,IAAOgD,EAAKhD,MANjE,SAO+BK,KAAK+Q,mBAPpC,cAOQC,EAPR,OAQQvN,EAAsB,CAAEd,IAAQ,GAE5BsR,EAAezQ,EAAmBrF,QAAO,SAAA+V,GAAO,OAAIA,EAAQ7S,YAAcsB,EAAKhD,MAV3F,UAY4B6D,EAAmBrF,QAAO,SAAC+V,GAC3C,OAAOA,EAAQ7S,YAAcsB,EAAKhD,MACnCtB,KAAI,SAAA6V,GAAO,OAAIA,EAAQvU,MAdlC,QAYQK,KAAK8Q,OAZb,OAgBQmD,EAAalT,SAAQ,SAASK,GAC1BiB,EAAmBjB,MAjB/B,wBAmB6B,aAAduB,EAAK/C,MACZI,KAAKzC,YAAcyC,KAAKzC,YAAYY,QAAO,SAAAwB,GAAE,OAAIA,IAAOgD,EAAKhD,MAC7DyC,EAAwB,CAAEO,IAAQ,IACb,8BAAdA,EAAK/C,OACZI,KAAK8Q,OAAS9Q,KAAK8Q,OAAO3S,QAAO,SAAAwB,GAAE,OAAIA,IAAOgD,EAAKhD,MACnD0C,EAAmBM,IAxB3B,QA2BQA,EAAKhD,KAAOqR,IACZA,OAAiBC,GAGrBzO,EAAuBxC,KAAK8Q,QACvB9Q,KAAK1C,UAAU6B,QAAWa,KAAKzC,YAAY4B,QACxCa,KAAK8Q,OAAO3R,QAAW1B,GAAgBsW,GAC3CC,GAAoB,GAGxBhU,KAAK0N,aAAa1N,KAAK1C,UAAW0C,KAAKzC,YAAayC,KAAK8Q,OAAQE,GArCrE,iDA7PJ,6FAsSI,2HAAmB1T,EAAnB,+BAA+B,GAAIC,EAAnC,uBAAgDuT,EAAhD,uBAAwDrT,EAAxD,yBAC0IuC,KAAKR,MAAnI2U,EADZ,EACYA,gBAAiBzG,EAD7B,EAC6BA,aAAcqG,EAD3C,EAC2CA,iBAAkB3W,EAD7D,EAC6DA,WAAY4W,EADzE,EACyEA,oBAAqBrL,EAD9F,EAC8FA,qBAAsBsC,EADpH,EACoHA,kBAGhHjL,KAAK1C,UAAYA,EACjB0C,KAAKzC,YAAcA,EACnByC,KAAK8Q,OAASA,EAEViD,GACKtW,GAAeuC,KAAKzC,YAAY4B,OACjCiV,EAAY7W,EAAY,GACjBE,IACP2W,EAAY3W,GAGhB2W,EAAY3W,EAGXH,EAAUW,SAASmW,IAAe7W,EAAYU,SAASmW,IAAetD,EAAO7S,SAASmW,KACvFA,OAAYnD,GAGhBtI,EAAqB3I,KAAKzC,YAAa,cACvC0N,EAAkBmJ,KAEd9W,EAAU6B,QAAU5B,EAAY4B,QAAU2R,EAAO3R,QAAUiV,GAzBnE,kCA0Bc1G,EAAapQ,EAAWC,EAAauT,EAAQsD,GA1B3D,yBA2BcJ,GAAoB,GA3BlC,iDA6BcG,IA7Bd,QAgCI/W,IAhCJ,iDAtSJ,qEA0UI,SAAWiX,GAAO,WACVvT,EAAO,GAQX,YANcmQ,IAAVoD,GACAA,EAAMtT,SAAQ,SAAA+N,GACVhO,EAAKlC,KAAK,EAAK0V,UAAUxF,OAI1BhO,IAnVf,+BAsVI,WACI,IAAIA,EAAO,GACPyT,EAAU,GAEdA,EAAQ3V,KAAK,wBAAI+C,UAAU,sBAAqB,kBAAC,EAAA4L,SAAD,CAAUC,KAAOC,EAAAA,aAAAA,OACjE8G,EAAQ3V,KAAK,wBAAI+C,UAAU,uBAAsB,kBAAC,EAAA4L,SAAD,CAAUC,KAAOC,EAAAA,aAAAA,OAClE8G,EAAQ3V,KAAK,4BAAI,kBAAC,EAAA2O,SAAD,CAAUC,KAAOC,EAAAA,aAAAA,OAElC,IAAK,IAAIyC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBpP,EAAKlC,KAAK,4BAAM2V,IAGpB,OAAOzT,IAlWf,uBAqWI,SAAUgO,GAAM,WACZ,EAA4D9O,KAAKR,MAAzD6P,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,UAAW7R,EAAjC,EAAiCA,YAAaM,EAA9C,EAA8CA,UAC1C+C,EAAO,GA6DX,OA3DIgO,EAAK0F,aACL1T,EAAKlC,KAAK,kBAAC,GAAD,CACNyQ,aAAeA,EACfC,UAAYA,EACZR,KAAOA,EACPnB,WAAa3N,KAAK2N,WAClBlQ,YAAcA,EACdM,UAAYA,EACZ6B,KAAO,cAGPyP,EAAapR,SAAS6Q,EAAK3O,OAC3B2O,EAAK0F,YAAYzT,SAAQ,SAAA0T,GACjBA,EAAWC,aACX5T,EAAKlC,KAAK,kBAAC,GAAD,CACNyQ,aAAeA,EACfC,UAAYA,EACZR,KAAO2F,EACP9G,WAAa,EAAKA,WAClBlQ,YAAcA,EACdM,UAAYA,EACZ6B,KAAO,gBAGPyP,EAAapR,SAASwW,EAAWtU,OACjCsU,EAAWC,YAAY3T,SAAQ,SAAA4T,GAC3B7T,EAAKlC,KAAK,kBAAC,GAAD,CACNyQ,aAAeA,EACfP,KAAO6F,EACPhH,WAAa,EAAKA,WAClBlQ,YAAcA,EACdM,UAAYA,EACZ6B,KAAO,qBAKnBkB,EAAKlC,KAAK,kBAAC,GAAD,CACNyQ,aAAeA,EACfP,KAAO2F,EACP9G,WAAa,EAAKA,WAClBlQ,YAAcA,EACdM,UAAYA,EACZ6B,KAAO,kBAMvBkB,EAAKlC,KAAK,kBAAC,GAAD,CACNyQ,aAAeA,EACfP,KAAOA,EACPnB,WAAa3N,KAAK2N,WAClBlQ,YAAcA,EACdM,UAAYA,EACZ6B,KAAO,UAIRkB,IApaf,yBAuaI,SAAY8T,EAAa1L,GACrB,MACuFlJ,KAAKR,MADpF1B,EAAR,EAAQA,SAAU6I,EAAlB,EAAkBA,YAAalJ,EAA/B,EAA+BA,YAAawK,EAA5C,EAA4CA,oBAAqBE,EAAjE,EAAiEA,eAC7D3F,EADJ,EACIA,uBAAwBpF,EAD5B,EAC4BA,WAAYW,EADxC,EACwCA,UAAWsP,EADnD,EACmDA,eAAgBC,EADnE,EACmEA,gBAC/DuH,EAAc,GAMlB,OAJI7U,KAAK0R,eAAeG,UACpBgD,EAAc7U,KAAK0R,eAAeG,QAAQgD,aAI1C,kBAAC,aAAD,KACI,yBAAKlT,UAAU,uBACX,yBAAKA,UAAU,wBAAwB8H,SAAWzJ,KAAK2R,aAAenI,IAAMxJ,KAAKwR,aAC7E,yBACI7P,UAAU,gBACVT,MAAO,CAAE2G,MAAOgN,MAGxB,yBACIlT,UAAU,sBACV8H,SAAWzJ,KAAK2R,aAChBnI,IAAMxJ,KAAKyR,cACX,2BACI9P,UAAU,sCACV,2BAAyB,YACzB,yBAAuB,oBACvB,+BACI,kBAAC,GAAD,CACI7D,SAAWA,EACX4P,aAAe1N,KAAK0N,aACpB/G,YAAcA,EACdgH,WAAa3N,KAAK2N,WAClBlQ,YAAcA,EACdmQ,aAAe5N,KAAK4N,aACpB7P,UAAYA,EACZT,UAAY0C,KAAK1C,UACjB+P,eAAiBA,EACjBC,gBAAkBA,EAClBrC,kBAAoBjL,KAAKiL,kBACzB7N,WAAaA,EACb+K,eAAiBA,EACjB3F,uBAAyBA,EACzByF,oBAAsBA,QAM1C,yBACItG,UAAU,wCACV8H,SAAWzJ,KAAK2R,aAChBnI,IAAMxJ,KAAK0R,gBACX,2BACI/P,UAAU,sCACV,2BAAyB,YACzB,yBAAuB,oBACvB,+BACMuH,EAAUlJ,KAAK8U,oBAAsB9U,KAAK+U,WAAWH,SAhenF,oBAweI,WACI,MAC0B5U,KAAKR,MADvBwJ,EAAR,EAAQA,WAAYgM,EAApB,EAAoBA,oBAAqB1R,EAAzC,EAAyCA,QAASC,EAAlD,EAAkDA,UAAWC,EAA7D,EAA6DA,mBAAoB0F,EAAjF,EAAiFA,QAASvC,EAA1F,EAA0FA,YACtFsE,EADJ,EACIA,kBAIJ,OAFAjL,KAAK2N,WAAa3N,KAAKiV,eAAe3R,EAASC,EAAWC,GAGtD,kBAAC,aAAD,KACI,kBAAC,EAAD,CACI/B,kBAAoB6B,EAAQjF,KAAI,SAAA8C,GAAM,OAAIA,EAAOxB,MACjD2G,aAAetG,KAAK0N,aACpBjQ,YAAcuC,KAAKR,MAAM/B,YACzBkJ,YAAcA,EACdsE,kBAAoBA,IAErBjC,EAEG,KADAhJ,KAAKkV,YAAYF,EAAqB9L,QAxf5D,GAAgC9I,EAAAA,WA0hBhCoQ,GAAWnQ,UAAY,CACnBuH,qBAAsBtH,IAAAA,KACtBlB,SAAUkB,IAAAA,OACVjD,QAASiD,IAAAA,OACToN,aAAcpN,IAAAA,KACd6U,gBAAiB7U,IAAAA,MACjB0U,oBAAqB1U,IAAAA,MACrBgD,QAAShD,IAAAA,MACTiD,UAAWjD,IAAAA,MACXkD,mBAAoBlD,IAAAA,MACpBxC,SAAUwC,IAAAA,OACVvC,UAAWuC,IAAAA,OACX4I,QAAS5I,IAAAA,KACT+M,eAAgB/M,IAAAA,KAChBgN,gBAAiBhN,IAAAA,KACjBgP,UAAWhP,IAAAA,KACX+O,aAAc/O,IAAAA,MACdqI,qBAAsBrI,IAAAA,KACtBkC,uBAAwBlC,IAAAA,KACxB0I,WAAY1I,IAAAA,KACZ2K,kBAAmB3K,IAAAA,KACnB7C,YAAa6C,IAAAA,OACb8U,MAAO9U,IAAAA,OACPyT,iBAAkBzT,IAAAA,KAClB0T,oBAAqB1T,IAAAA,KACrB6T,gBAAiB7T,IAAAA,KACjBqG,YAAarG,IAAAA,OACbzC,aAAcyC,IAAAA,MACdkT,eAAgBlT,IAAAA,KAChBmT,iBAAkBnT,IAAAA,KAClB5C,kBAAmB4C,IAAAA,MACnB3C,WAAY2C,IAAAA,OACZlD,WAAYkD,IAAAA,KACZ6H,eAAgB7H,IAAAA,MAChB2H,oBAAqB3H,IAAAA,MACrB8B,wBAAyB9B,IAAAA,KACzB+B,mBAAoB/B,IAAAA,KACpBmD,sBAAuBnD,IAAAA,KACvBsO,sBAAuBtO,IAAAA,KACvB1C,gBAAiB0C,IAAAA,MACjB+U,sBAAuB/U,IAAAA,MAG3B,UAAegV,EAAAA,EAAAA,aAAWpK,EAAAA,EAAAA,UArE1B,SAAyBpL,GACrB,MAAO,CACH8H,qBAAsB9H,EAAMqL,oBAAoBvD,qBAChDuN,gBAAiBrV,EAAMsL,aAAa+J,gBACpCH,oBAAqBlV,EAAMsL,aAAa4J,oBACxC9L,QAASpJ,EAAMsL,aAAalC,QAC5BmG,aAAcvP,EAAMsL,aAAaiE,aACjCrG,WAAYlJ,EAAMsL,aAAapC,eAIvC,SAA4ByC,GACxB,MAAO,CACHiC,aAAe,SAACpQ,EAAWC,EAAaiG,EAAoB/F,GAA7C,OACXgO,EAAS8J,EAAAA,EAAAA,aAA4BjY,EAAWC,EAAaiG,EAAoB/F,KAErF4P,eAAgB,SAACD,GAAD,OAAc3B,EAAS8J,EAAAA,EAAAA,eAA8BnI,KACrEE,gBAAiB,SAACF,GAAD,OAAc3B,EAAS8J,EAAAA,EAAAA,gBAA+BnI,KACvEkC,UAAW,SAACC,GAAD,OAAc9D,EAAS8J,EAAAA,EAAAA,UAAyBhG,KAC3D5G,qBAAuB,SAACV,EAAqB0C,GAAtB,OACnBc,EAASG,EAAAA,EAAAA,qBAA2C3D,EAAqB0C,KAE7EnI,uBAAwB,SAACqJ,GAAD,OAAwBJ,EAASK,EAAAA,EAAAA,uBAA+CD,QA+CtFX,CAA6CsF,K,4BC7kBhE,IAAMgF,GAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYhW,GAAO,kCACTA,GAFd,qCAKI,WACI,MAAqDQ,KAAKR,MAAlD0J,EAAR,EAAQA,QAAShB,EAAjB,EAAiBA,qBAAsBuN,EAAvC,EAAuCA,UAEvC,OACI,kBAAC,EAAAvR,OAAD,CACIE,QAAQ,UACRC,QAAU6D,EACV3D,aAAa2E,EACb5E,OAASmR,EAAY,oBAAsB,2BAEzCA,EAAY,oBAAsB,gCAfpD,GAAqCrV,EAAAA,WAqBrCoV,GAAgBnV,UAAY,CACxB6H,qBAAsB5H,IAAAA,KACtBmV,UAAWnV,IAAAA,KACX4I,QAAS5I,IAAAA,MASb,UAAe4K,EAAAA,EAAAA,SAAQ,MANvB,SAA4BO,GACxB,MAAO,CACHvD,qBAAuB,kBAAMuD,EAASC,EAAAA,EAAAA,4BAI9C,CAAiD8J,I,4BCnCjD,SAASE,GAAoBlW,GACzB,IAAQmW,EAAiCnW,EAAjCmW,WAAYC,EAAqBpW,EAArBoW,iBACpB,GAA+BC,EAAAA,EAAAA,WAAS,GAAxC,eAAQnM,EAAR,KAAgBoM,EAAhB,KAEMC,EAAe,SAACnW,GAClBgW,EAAiBhW,GACjBkW,GAAYpM,IAGVsM,EAAgB,CAClB,kBAAC,EAAAC,aAAD,CACI,yBAAuB,mBACvB9R,IAAI,YACJE,QAAU,kBAAM0R,EAAa,eAHjC,aAOA,kBAAC,EAAAE,aAAD,CACI,yBAAuB,mBACvB9R,IAAI,YACJE,QAAU,kBAAM0R,EAAa,eAHjC,aAOA,kBAAC,EAAAE,aAAD,CACI,yBAAuB,eACvB9R,IAAI,QACJE,QAAU,kBAAM0R,EAAa,WAHjC,UASJ,OACI,kBAAC,EAAAG,SAAD,CACI5R,OAAO,wBACP3C,UAAU,mCACVwU,OAAS,kBAAC,EAAAC,eAAD,CACLC,SAAWP,EACXxR,OAAO,sBACPrD,KAAO,kBAAC,EAAAqV,WAAD,OACLX,GAENjM,OAASA,EACTsM,cAAgBA,IAK5BN,GAAoBrV,UAAY,CAC5BsV,WAAYrV,IAAAA,OACZsV,iBAAkBtV,IAAAA,MAGtB,Y,2BCtDO,IAAMiW,GAAb,+B,IAAA,G,EAAA,E,gaACI,WAAY/W,GAAO,6BACf,cAAMA,IAsBVgX,iBAAmB,SAACrY,GAChB,EAAK4B,SAAS,CAAE5B,OAAAA,IAChB,EAAKsY,cAActY,IAzBJ,EA4BnBsY,cAAgB,wCAAW,WAAetY,GAAf,iFACjB6B,KAAKR,MAAMkX,aAAavY,GADP,OAEvB6B,KAAKR,MAAMpC,aAFY,gDAAX,sDAGb,KA/BgB,EAiCnBuZ,cAAgB,SAACrR,GACb,IAAQ5H,EAAsB,EAAK8B,MAA3B9B,kBACAS,EAAW,EAAK2B,MAAhB3B,OAEU,UAAdmH,EAAMnB,MACNmB,EAAMsR,iBACDlZ,EAAkBO,SAASE,IAC5B,EAAK0Y,uBAAuB1Y,KArCpC,EAAK2B,MAAQ,CACT3B,OAAQ,EAAKqB,MAAM7B,YAGvB,EAAK8Y,cAAgB,EAAKA,cAAc5Q,MAAnB,WAPN,EADvB,iDAWI,SAAmBmC,GACc,KAAzBA,EAAUrK,YAA+C,KAA1BqC,KAAKR,MAAM7B,YAC1CqC,KAAKD,SAAS,CAAE5B,OAAQ6B,KAAKR,MAAM7B,eAb/C,yDAiBI,WAA6BQ,GAA7B,oFAC6C6B,KAAKR,MAAtCiU,EADZ,EACYA,iBAAkBrW,EAD9B,EAC8BA,WAD9B,SAGUqW,EAAiBtV,GAH3B,OAIIf,IAJJ,gDAjBJ,kEA8CI,WACI,OACI,kBAAC,aAAD,KACI,kBAAC,EAAA0Z,KAAD,KACI,kBAAC,EAAAC,UAAD,CACIC,YAAU,EACVpX,KAAK,OACLqX,QAAQ,SACRC,WAAalX,KAAK2W,eAElB,kBAAC,EAAAQ,UAAD,CACI/G,MAAQpQ,KAAKF,MAAM3B,OACnBwB,GAAG,eACHyX,YAAY,iBACZlX,SAAWF,KAAKwW,iBAChB,aAAW,iBACX,2BAAyB,gBACzB,yBAAuB,wCA/DnD,GAA+BpW,EAAAA,WAwE/BmW,GAAUlW,UAAY,CAClBqW,aAAcpW,IAAAA,KACd3C,WAAY2C,IAAAA,OACZmT,iBAAkBnT,IAAAA,KAClB5C,kBAAmB4C,IAAAA,MACnBlD,WAAYkD,IAAAA,MAGhB,Y,gBC7EA,SANA,WACI,MAAO,CACHV,KAAMyX,GAAAA,EAAAA,uB,ICGRC,GAAAA,SAAAA,I,2bACF,WAAY9X,GAAO,6BACf,cAAMA,IASV+X,UAVmB,mCAUP,WAAOpZ,GAAP,oFAC+B,EAAKqB,MAApCgY,EADA,EACAA,eAAgBpa,EADhB,EACgBA,WADhB,SAGFoa,EAAerZ,GAHb,OAIRf,IAJQ,2CAVO,sDAEf,EAAKiZ,SAAW,EAAKA,SAASxQ,MAAd,WAChB,EAAK4R,mBAAqB,EAAKA,mBAAmB5R,MAAxB,WAHX,E,uCAMnB,WACI7F,KAAKR,MAAMkY,mB,gCAUf,SAAmBvZ,EAAQyB,GAAM,WAa7B,OAXI,kBAAC,EAAAqW,aAAD,CACI,mCAA6BrW,EAA7B,0BAAqDzB,EAAOwZ,UAC5D,kBAAC,EAAA1X,SAAD,CACIN,GAAKxB,EAAOwZ,QACZ,2BAAyB,eACzB,mCAA6B/X,EAA7B,mCAA8DzB,EAAOwZ,SACrEC,MAAQzZ,EAAOwZ,QACf9X,UAAY1B,EAAOC,SACnB8B,SAAW,kBAAM,EAAKqX,UAAUpZ,S,iCAMhD,SAAoBkV,EAASzT,GACzB,IAAIoW,EAAgB,GAOpB,OALA3C,EAAQtS,QAAQ,SAAS5C,GACrB,IAAI0Z,EAAe7X,KAAKyX,mBAAmBtZ,EAAQyB,GACnDoW,EAAcpX,KAAKiZ,IACrBhS,KAAK7F,OAEAgW,I,oBAGX,WACI,IACIA,EADJ,EAA0BhW,KAAKR,MAAvB6T,EAAR,EAAQA,QAASzT,EAAjB,EAAiBA,KAEXkY,EAAalY,EAAK+T,MAAM,KAAKxD,KAAK,KAAK7R,cAI7C,OAFA0X,EAAgBhW,KAAK+X,oBAAoB1E,EAASzT,GAG9C,kBAAC,aAAD,KACI,kBAAC,EAAAsW,SAAD,CACI5R,OAASwT,EACT3B,OAAS,kBAAC,EAAAC,eAAD,CACLC,SAAWrW,KAAKqW,SAChB/R,OAAM,UAAOwT,EAAP,YACK,UAATlY,EAAA,oBACkBA,EAAKtB,eACnB,QAGVoL,OAAS1J,KAAKR,MAAMwY,qBACpBhC,cAAgBA,S,EAjE9BsB,CAAuBlX,EAAAA,WAwE7BkX,GAAejX,UAAY,CACvBqX,eAAgBpX,IAAAA,KAChB1C,gBAAiB0C,IAAAA,MACjB0X,qBAAsB1X,IAAAA,KACtB+S,QAAS/S,IAAAA,MACTkX,eAAgBlX,IAAAA,KAChBlD,WAAYkD,IAAAA,KACZV,KAAMU,IAAAA,QAeV,UAAgB4K,EAAAA,EAAAA,UAZhB,SAAyBpL,GACrB,MAAO,CACHkY,qBAAsBlY,EAAMkY,yBAIpC,SAA4BvM,GACxB,MAAO,CACHiM,eAAgB,kBAAMjM,EAASwM,UAIvC,CAA6DX,IC/F7D,SAASY,GAAiB1Y,GACtB,IAyB2BI,EArBnBuY,EAJAza,EAC+C8B,EAD/C9B,kBAAmB8V,EAC4BhU,EAD5BgU,eAAgB7V,EACY6B,EADZ7B,WAAYC,EACA4B,EADA5B,gBAAiB8Y,EACjBlX,EADiBkX,aAAcf,EAC/BnW,EAD+BmW,WAAYlC,EAC3CjU,EAD2CiU,iBAAkB2E,EAC7D5Y,EAD6D4Y,WAChHhb,EAAmDoC,EAAnDpC,WAAYS,EAAuC2B,EAAvC3B,aAAc6V,EAAyBlU,EAAzBkU,qBAYxB2E,EAAmB,SAACC,GACtB,IAAIC,EAAQ,GAQZ,OANAD,EAAgBvX,SAAQ,SAAS5C,GACzBA,EAAOC,UAA+B,cAAnBD,EAAOwZ,SAC1BY,EAAM3Z,KAAKT,EAAOwZ,YAInBY,GA0DX,OACI,kBAAC,aAAD,MAxDuB3Y,EAyDC+V,EAxDjB,kBAAC,aAAD,KACH,kBAAC,EAAA6C,cAAD,CACID,OAxBJJ,GAAkB,OAAKza,GAEvBC,EAAWwB,SAAWzB,EAAkBO,SAASN,IACjDwa,EAAgBvZ,KAAKjB,GAGlBwa,GAmBCM,WAAaL,EACbM,gBAAkBN,EAClBO,aAAa,aAEF,cAAT/Y,EACI,kBAAC,GAAD,CACEjC,WAAaA,EACbD,kBAAoBA,EACpB+V,iBAAmBA,EACnBiD,aAAeA,EACftZ,WAAaA,IAEf,MAGV,kBAAC,EAAAob,cAAD,CACI7W,UAAU,yCACV4W,MAAQF,EAAiBza,GACzB6a,WAAaL,EACbO,aAAa,aAEF,cAAT/Y,EACI,kBAAC,GAAD,CACE4X,eAAiB9D,EACjBL,QAAUzV,EACVR,WAAaA,EACbwC,KAAOA,IAET,MAGV,kBAAC,EAAA4Y,cAAD,CACI7W,UAAU,yCACV4W,MAAQF,EAAiBxa,GACzB4a,WAAaL,EACbM,gBAAkBN,EAClBO,aAAa,SAEF,UAAT/Y,EACI,kBAAC,GAAD,CACE4X,eAAiBhE,EACjBH,QAAUxV,EACVT,WAAaA,EACbwC,KAAOA,IAET,SAatBsY,GAAiB7X,UAAY,CACzB3C,kBAAmB4C,IAAAA,MACnBkT,eAAgBlT,IAAAA,KAChB3C,WAAY2C,IAAAA,OACZ1C,gBAAiB0C,IAAAA,MACjBoW,aAAcpW,IAAAA,KACdqV,WAAYrV,IAAAA,OACZmT,iBAAkBnT,IAAAA,KAClB8X,WAAY9X,IAAAA,KACZlD,WAAYkD,IAAAA,KACZzC,aAAcyC,IAAAA,MACdoT,qBAAsBpT,IAAAA,MAG1B,YCrGA,SAASsY,GAAYpZ,GACjB,IAAQ9B,EAC+C8B,EAD/C9B,kBAAmB8V,EAC4BhU,EAD5BgU,eAAgB7V,EACY6B,EADZ7B,WAAYC,EACA4B,EADA5B,gBAAiB8Y,EACjBlX,EADiBkX,aAAcjD,EAC/BjU,EAD+BiU,iBAAkB2E,EACjD5Y,EADiD4Y,WACpGhb,EAAmDoC,EAAnDpC,WAAYS,EAAuC2B,EAAvC3B,aAAc6V,EAAyBlU,EAAzBkU,qBAC9B,GAAyCmC,EAAAA,EAAAA,UAAS,aAAlD,eAAQF,EAAR,KAAoBC,EAApB,KAEA,OACI,kBAAC,EAAAiD,aAAD,CAAczU,QAAQ,gBAClB,kBAAC,GAAD,CACIuR,WAAaA,EACbC,iBAAmBA,IAEvB,kBAAC,GAAD,CACIlY,kBAAoBA,EACpB8V,eAAiBA,EACjB7V,WAAaA,EACbC,gBAAkBA,EAClB8Y,aAAeA,EACff,WAAaA,EACblC,iBAAmBA,EACnB2E,WAAaA,EACbhb,WAAaA,EACbS,aAAeA,EACf6V,qBAAuBA,KAMvCkF,GAAYvY,UAAY,CACpB3C,kBAAmB4C,IAAAA,MACnBkT,eAAgBlT,IAAAA,KAChBwY,oBAAqBxY,IAAAA,KACrByY,mBAAoBzY,IAAAA,KACpB3C,WAAY2C,IAAAA,OACZ1C,gBAAiB0C,IAAAA,MACjBoW,aAAcpW,IAAAA,KACdmT,iBAAkBnT,IAAAA,KAClB8X,WAAY9X,IAAAA,KACZlD,WAAYkD,IAAAA,KACZzC,aAAcyC,IAAAA,MACdoT,qBAAsBpT,IAAAA,MAG1B,YCtCO,IAAM0Y,GAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYxZ,GAAO,6BACf,cAAMA,IAiCVuZ,oBAlCmB,iBAkCE,wFACwB,EAAKvZ,MAAtCgU,EADS,EACTA,eADS,EACO3V,aAEXkD,SAAQ,SAASkY,GAC1BA,EAAY7a,UAAW,EACvBoV,EAAeyF,MALF,2CAlCF,EA2CnBC,cA3CmB,iBA2CJ,iGACoC,EAAK1Z,MAA5C2Z,EADG,EACHA,uBAAwB/b,EADrB,EACqBA,WADrB,SAGL+b,IAHK,OAIX/b,IAJW,2CA3CI,EAkDnBiZ,SAAW,WACP,IAAQ+C,EAAiB,EAAKtZ,MAAtBsZ,aAER,EAAKrZ,SAAS,CACVqZ,cAAeA,KAtDJ,EA0DnBC,cA1DmB,iBA0DJ,iGACoC,EAAK7Z,MAA5C8Z,EADG,EACHA,uBAAwBlc,EADrB,EACqBA,WADrB,SAGLkc,IAHK,OAIXlc,IAJW,2CA1DI,EAiEnB+W,iBAjEmB,iBAiED,yGAC8G,EAAK3U,MAAzH+Z,EADM,EACNA,mBAAoBpF,EADd,EACcA,gBAAiBqF,EAD/B,EAC+BA,uBAAwBpc,EADvD,EACuDA,WAAY4W,EADnE,EACmEA,oBAAqB/I,EADxF,EACwFA,kBADxF,SAGRkJ,IAHQ,uBAIRqF,EAAuB,cAJf,uBAKRxF,GAAoB,GALZ,uBAMR/I,IANQ,wBAORsO,IAPQ,QAQdnc,IARc,4CAjEC,EA6EnBgb,YA7EmB,iBA6EN,yHAAOxY,EAAP,+BAAc,GAAID,EAAlB,+BAAuB,GAAvB,EAEoB,EAAKH,MAD1B9B,EADC,EACDA,kBAAmB8V,EADlB,EACkBA,eAAgBsF,EADlC,EACkCA,oBAAqBlb,EADvD,EACuDA,gBAAiB8Y,EADxE,EACwEA,aAAcjD,EADtF,EACsFA,iBAAkBrW,EADxG,EACwGA,WAAYS,EADpH,EACoHA,aACzH6V,EAFK,EAELA,qBACS,UAAT9T,EAHK,gBAIM,KAAPD,EACA,EAAKoZ,qBAELlb,EAAakD,QAAb,mCAAqB,WAAekY,GAAf,oEACbA,EAAYtB,UAAYhY,EADX,gCAEP6T,EAAeyF,GAFR,2CAArB,uDAPC,0BAaW,cAATrZ,EAbF,iBAcL8T,EAAqB9V,EAAgB,IAdhC,2BAgBM,KAAP+B,EAhBC,kCAiBKmZ,IAjBL,oCAkBMpb,EAAkBO,SAAS0B,GAlBjC,kCAmBK8T,EAAiB9T,GAnBtB,iDAqBK+W,EAAa,IArBlB,QAyBTtZ,IAzBS,4CA1ET,EAAK0C,MAAQ,CACT2Z,iBAAkB,CACd,kBAAC,EAAAxD,aAAD,CACI9R,IAAI,iBACJuV,UAAU,SACV,yBAAuB,sCACvBrV,QAAU,EAAK8P,iBAJnB,0BAMJ6B,cAAe,CACX,kBAAC,EAAAC,aAAD,CACI9R,IAAI,gBACJuV,UAAU,SACV,yBAAuB,yCACvBrV,QAAU,kBAAM,EAAK7E,MAAMma,gBAJ/B,iBAQA,kBAAC,EAAA1D,aAAD,CACI9R,IAAI,iBACJuV,UAAU,SACV,yBAAuB,0CACvBrV,QAAU,kBAAM,EAAK7E,MAAMoa,iBAJ/B,mBASJ3W,SAAS,EACTmW,cAAc,GA9BH,EADvB,qCA0GI,WACI,MACoGpZ,KAAKR,MADjG9B,EAAR,EAAQA,kBAAmB8V,EAA3B,EAA2BA,eAAgB7V,EAA3C,EAA2CA,WAAYC,EAAvD,EAAuDA,gBAAiB8Y,EAAxE,EAAwEA,aAAcjD,EAAtF,EAAsFA,iBAAkBvK,EAAxG,EAAwGA,QACpG2Q,EADJ,EACIA,KAAMC,EADV,EACUA,QAAS1c,EADnB,EACmBA,WAAYS,EAD/B,EAC+BA,aAAc6V,EAD7C,EAC6CA,qBAAsBqG,EADnE,EACmEA,WAAYC,EAD/E,EAC+EA,iBAC/E,EAA0Dha,KAAKF,MAAvD2Z,EAAR,EAAQA,iBAAkBzD,EAA1B,EAA0BA,cAAeoD,EAAzC,EAAyCA,aAEzC,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAtP,QAAD,CAASnI,UAAU,gBAAgBsY,gBAAkBja,KAAKkZ,aAAegB,uBAAuB,iBAC5F,kBAAC,EAAAlQ,eAAD,KACI,kBAAC,GAAD,CACItM,kBAAoBA,EACpB8V,eAAiBA,EACjB7V,WAAaA,EACbC,gBAAkBA,EAClB8Y,aAAeA,EACfjD,iBAAmBA,EACnB2E,WAAapY,KAAKoY,WAClBhb,WAAaA,EACbS,aAAeA,EACf6V,qBAAuBA,IAE3B,kBAAC,EAAAmF,aAAD,CAAczU,QAAQ,gBAClB,kBAAC,EAAA6F,YAAD,KACI,kBAAC,GAAD,CAAiBf,QAAUA,EAAUuM,WAAY,MAGzD,kBAAC,EAAAoD,aAAD,CAAczU,QAAQ,qBAClB,kBAAC,EAAA6F,YAAD,KACI,kBAACkQ,GAAA,EAAD,CACInE,cAAgBA,EAChB1R,OAAO,6BACPoF,OAAS0P,EACT/C,SAAWrW,KAAKqW,YAGxB,kBAAC,EAAApM,YAAD,KACI,kBAACmQ,GAAA,EAAD,CACI9V,OAAO,4BACP0R,cAAgByD,MAG5B,kBAAC,EAAAxP,YAAD,CAAa7F,QAAQ,aAAaiW,MAAO,CAAEC,QAAS,eAChD,kBAAC,KAAD,CACIT,KAAOA,EACPC,QAAUA,EACVS,MAAQR,EACRS,WAAY,EACZR,iBAAmBA,EACnBS,SAAS,uBACTnW,OAAO,4BACPF,QAAUsW,EAAAA,kBAAAA,cA5J1C,GAAkCta,EAAAA,WAsKlC4Y,GAAa3Y,UAAY,CACrB6I,QAAS5I,IAAAA,KACTjD,QAASiD,IAAAA,OACTuZ,KAAMvZ,IAAAA,OACNwZ,QAASxZ,IAAAA,OACTyZ,WAAYzZ,IAAAA,OACZ0Z,iBAAkB1Z,IAAAA,KAClBgZ,uBAAwBhZ,IAAAA,KACxB6T,gBAAiB7T,IAAAA,KACjBqZ,YAAarZ,IAAAA,KACbsZ,aAActZ,IAAAA,KACdkZ,uBAAwBlZ,IAAAA,KACxB0T,oBAAqB1T,IAAAA,KACrB2K,kBAAmB3K,IAAAA,KACnB3C,WAAY2C,IAAAA,OACZ1C,gBAAiB0C,IAAAA,MACjBoW,aAAcpW,IAAAA,KACdzC,aAAcyC,IAAAA,MACdkT,eAAgBlT,IAAAA,KAChBoT,qBAAsBpT,IAAAA,KACtB5C,kBAAmB4C,IAAAA,MACnBmT,iBAAkBnT,IAAAA,KAClBwY,oBAAqBxY,IAAAA,KACrBlD,WAAYkD,IAAAA,KACZ6Y,uBAAwB7Y,IAAAA,KACxBiZ,mBAAoBjZ,IAAAA,MAGxB,Y,gBCtLO,IAAMqa,GAAb,+B,IAAA,G,EAAA,E,gaACI,WAAYnb,GAAO,6BACf,cAAMA,IAgBVpC,WAAa,WACT,MAC2B,EAAKoC,MADxB9B,EAAR,EAAQA,kBAAmB6F,EAA3B,EAA2BA,UAAW5F,EAAtC,EAAsCA,WAAYG,EAAlD,EAAkDA,SAAUF,EAA5D,EAA4DA,gBAAiB4F,EAA7E,EAA6EA,mBAAoBnG,EAAjG,EAAiGA,QAASI,EAA1G,EAA0GA,YAAaI,EAAvH,EAAuHA,aACnHE,EADJ,EACIA,UAMJX,EACIC,EARJ,EACeiG,QAESjF,KAAI,SAAA8C,GAAM,OAAIA,EAAOxB,MAC3B4D,EAAUlF,KAAI,SAAA2C,GAAQ,OAAIA,EAASrB,MACxC6D,EAAmBnF,KAAI,SAAA+C,GAAG,OAAIA,EAAIzB,MAGFlC,EAAaC,EAAmBC,EAAYC,EAAiBC,EAAcC,EAAUC,IA1BnH,EA8BnBiW,oBAAsB,SAAC5D,GACnB,EAAKrQ,SAAS,CACVgU,iBAAkB3D,KAhCP,EAoCnBzG,QAAU,WACN,MAA6D,EAAKnK,MAA1Dob,EAAR,EAAQA,kBAAmBvd,EAA3B,EAA2BA,QAASwd,EAApC,EAAoCA,qBAEpCD,IACAxd,EAAWC,EAASwd,EAAqBxc,KAAI,SAAA8C,GAAM,OAAIA,EAAOxB,QAxC/C,EA2CnBmb,iBAAmB,WACf,IAAQ1F,EAAU,EAAK5V,MAAf4V,MAER,OAAIA,EAAM2F,OACC,kBAAC7X,EAAA,EAAD,CACHjC,KAAOgO,EAAAA,sBACPhB,MAAM,UACN9K,MAAQ,iCACRC,KAAO4X,EAAAA,GACP5F,MAAQ,SAAWA,EAAM2F,OAAS,KAAO3F,EAAM6F,OAC/CzL,OAAS,kBAAC,GAAD,QAGN,kBAACtM,EAAA,EAAD,CACHjC,KAAOia,EAAAA,eACPjN,MAAM,UACN9K,MAAQgY,EAAAA,GACR/X,KAAO4X,EAAAA,GACPxL,OAAS,kBAAC,GAAD,SA3DjB,EAAK1P,MAAQ,CACTiU,kBAAkB,GAHP,EADvB,qEAQI,8FACU5M,OAAOC,SAASC,OAAOC,KAAKC,UADtC,2CARJ,6EAYI,SAAmBS,GACmB,KAA9BA,EAAU5I,SAASP,QAAgD,KAA/BmB,KAAKR,MAAMJ,SAASP,QACxDmB,KAAK5C,eAdjB,oBAmEI,WAAS,WACL,EAIwD4C,KAAKR,MAJrD9B,EAAR,EAAQA,kBAAmB8V,EAA3B,EAA2BA,eAAgBjQ,EAA3C,EAA2CA,UAAWuV,EAAtD,EAAsDA,oBAAqBS,EAA3E,EAA2EA,mBAAoBpF,EAA/F,EAA+FA,gBAAiBmF,EAAhH,EAAgHA,uBAC5GE,EADJ,EACIA,uBAAwBxQ,EAD5B,EAC4BA,WAAYoM,EADxC,EACwCA,MAAOuE,EAD/C,EAC+CA,YAAaC,EAD5D,EAC4DA,aAAcjc,EAD1E,EAC0EA,WAAYG,EADtF,EACsFA,SAAUF,EADhG,EACgGA,gBAAiB8Y,EADjH,EACiHA,aAC7GjD,EAFJ,EAEIA,iBAAkBjQ,EAFtB,EAEsBA,mBAAoBpB,EAF1C,EAE0CA,wBAAyBC,EAFnE,EAEmEA,mBAAoBoB,EAFvF,EAEuFA,sBAAuBpG,EAF9G,EAE8GA,QAAS6L,EAFvH,EAEuHA,QAAS2Q,EAFhI,EAEgIA,KAAMC,EAFtI,EAEsIA,QAClIrc,EAHJ,EAGIA,YAAa0b,EAHjB,EAGiBA,uBAAwBlR,EAHzC,EAGyCA,oBAAqBE,EAH9D,EAG8DA,eAAgBtK,EAH9E,EAG8EA,aAAcE,EAH5F,EAG4FA,UAAWuF,EAHvG,EAGuGA,QAASoQ,EAHhH,EAGgHA,qBAC5GqG,EAJJ,EAIIA,WAAYC,EAJhB,EAIgBA,iBAAkB/O,EAJlC,EAIkCA,kBAC1B8I,EAAqB/T,KAAKF,MAA1BiU,iBAER,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAqH,WAAD,KACI,kBAAC,EAAAC,YAAD,KACI,kBAAC,EAAAC,gBAAD,CAAiBnY,MAAM,iBAG/B,kBAAC,EAAAoY,KAAD,KACI,kBAAC,cAAD,MACM,SAAAnL,GAAK,OAC+B,IAAlCA,EAAMzJ,YAAY6U,YACZ,kBAACtY,EAAA,EAAD,CACEjC,KAAOqP,EAAAA,SACPrC,MAAM,UACN9K,MAAQ,6CACRC,KAAO,CAAE,sEAEX,kBAAC,aAAD,KACE,kBAACqY,GAAA,EAAD,CACIrG,MAAQA,EACRzL,QAAU,EAAKA,UAEjBX,IAAeE,EACX,EAAK4R,mBACL,8BAEN,kBAAC,EAAAY,KAAD,CAAM/Z,UAAU,8BACZ,kBAAC,EAAAga,SAAD,KACO3S,EA4BG,KA3BA,kBAAC,GAAD,CACEE,QAAUA,EACV7L,QAAUA,EACVwc,KAAOA,EACPC,QAAUA,EACVC,WAAaA,EACbC,iBAAmBA,EACnB7F,gBAAkBA,EAClBmF,uBAAyBA,EACzBK,YAAcA,EACdC,aAAeA,EACf3O,kBAAoBA,EACpB+I,oBAAsB,EAAKA,oBAC3BwF,uBAAyBA,EACzB7b,WAAaA,EACbC,gBAAkBA,EAClB8Y,aAAeA,EACf7Y,aAAeA,EACf2V,eAAiBA,EACjBE,qBAAuBA,EACvBhW,kBAAoBA,EACpB+V,iBAAmBA,EACnBqF,oBAAsBA,EACtB1b,WAAa,EAAKA,WAClB+b,uBAAyBA,EACzBI,mBAAqBA,IAI7B,kBAAC,GAAD,CACItO,kBAAoBA,EACpBmK,MAAQA,EACRrB,iBAAmBA,EACnBC,oBAAsB,EAAKA,oBAC3BG,gBAAmBA,EACnB/R,wBAA0BA,EAC1BC,mBAAqBA,EACrBoB,sBAAwBA,EACxBkD,YAAcyJ,EAAMzJ,YACpB8M,iBAAmBA,EACnBD,eAAiBA,EACjB3V,aAAeA,EACfH,kBAAoBA,EACpBC,WAAaA,EACbP,WAAa,EAAKA,WAClBU,SAAWA,EACXC,UAAYA,EACZN,YAAcA,EACd6F,QAAUA,EACVC,UAAYA,EACZC,mBAAqBA,EACrB2E,eAAiBA,EACjBF,oBAAsBA,EACtBrK,gBAAkBA,EAClB8V,qBAAuBA,IAExB1K,GAAeE,EAiBZ,KAhBF,kBAAC,EAAAY,QAAD,CAASnI,UAAU,iBACf,kBAAC,EAAAkX,aAAD,CAAclX,UAAU,mBACpB,kBAAC,EAAAsI,YAAD,KACI,kBAAC,KAAD,CACI4P,KAAOA,EACPC,QAAUA,EACVS,MAAQR,EACRS,WAAY,EACZR,iBAAmBA,EACnBS,SAAS,0BACTnW,OAAO,0BACPF,QAAUsW,EAAAA,kBAAAA,wBA5K1E,GAA+Bta,EAAAA,WA8L/Bua,GAAUta,UAAY,CAClByZ,QAASxZ,IAAAA,OACTuZ,KAAMvZ,IAAAA,OACNyZ,WAAYzZ,IAAAA,OACZ8U,MAAO9U,IAAAA,OACP4I,QAAS5I,IAAAA,KACTkZ,uBAAwBlZ,IAAAA,KACxB0I,WAAY1I,IAAAA,KACZ0Z,iBAAkB1Z,IAAAA,KAClB2K,kBAAmB3K,IAAAA,KACnB6T,gBAAiB7T,IAAAA,KACjBgZ,uBAAwBhZ,IAAAA,KACxBjD,QAASiD,IAAAA,OACTlB,SAAUkB,IAAAA,OACVkC,uBAAwBlC,IAAAA,KACxB6H,eAAgB7H,IAAAA,MAChBsa,kBAAmBta,IAAAA,KACnBua,qBAAsBva,IAAAA,MACtBqZ,YAAarZ,IAAAA,KACbsZ,aAActZ,IAAAA,KACd3C,WAAY2C,IAAAA,OACZ1C,gBAAiB0C,IAAAA,MACjB5C,kBAAmB4C,IAAAA,MACnBmT,iBAAkBnT,IAAAA,KAClBoW,aAAcpW,IAAAA,KACdzC,aAAcyC,IAAAA,MACdkT,eAAgBlT,IAAAA,KAChBoT,qBAAsBpT,IAAAA,KACtBwY,oBAAqBxY,IAAAA,KACrBxC,SAAUwC,IAAAA,OACVvC,UAAWuC,IAAAA,OACX7C,YAAa6C,IAAAA,OACbgD,QAAShD,IAAAA,MACTiD,UAAWjD,IAAAA,MACXkD,mBAAoBlD,IAAAA,MACpBsb,aAActb,IAAAA,KACd2H,oBAAqB3H,IAAAA,MACrB8B,wBAAyB9B,IAAAA,KACzB+B,mBAAoB/B,IAAAA,KACpBmD,sBAAuBnD,IAAAA,KACvB6Y,uBAAwB7Y,IAAAA,KACxBiZ,mBAAoBjZ,IAAAA,MAoDxB,UAAegV,EAAAA,EAAAA,aAAWpK,EAAAA,EAAAA,UAxB1B,SAAyBpL,GACrB,MAAO,CACH+Z,KAAM/Z,EAAMsL,aAAayO,KACzBC,QAASha,EAAMsL,aAAa0O,QAC5BC,WAAYja,EAAMsL,aAAa2O,WAC/B3E,MAAOtV,EAAMsL,aAAagK,MAC1BlM,QAASpJ,EAAMsL,aAAalC,QAC5BF,WAAYlJ,EAAMsL,aAAapC,WAC/Bb,eAAgBrI,EAAMyL,sBAAsBpD,eAC5C0S,qBAAsB/a,EAAMsL,aAAayP,qBACzCld,WAAYmC,EAAMsL,aAAazN,WAC/BC,gBAAiBkC,EAAMsL,aAAaxN,gBACpCC,aAAciC,EAAMsL,aAAavN,aACjCH,kBAAmBoC,EAAMsL,aAAa1N,kBACtCI,SAAUgC,EAAMsL,aAAatN,SAC7BC,UAAW+B,EAAMsL,aAAarN,UAC9BN,YAAaqC,EAAMsL,aAAa3N,YAChC6F,QAASxD,EAAMsL,aAAa9H,QAC5BC,UAAWzD,EAAMsL,aAAa7H,UAC9BC,mBAAoB1D,EAAMsL,aAAa5H,mBACvCyE,oBAAqBnI,EAAMuL,oBAAoBC,gBAAgBrD,wBA7CvE,SAA4BwD,GACxB,MAAO,CACH+N,uBAAwB,SAAC7O,GAAD,OAAac,EAASG,EAAAA,EAAAA,uBAA6CjB,KAC3FqP,iBAAkB,SAAC6B,GAAD,OAAgBpQ,EAAS8J,EAAAA,EAAAA,iBAAgCsG,KAC3E5Q,kBAAmB,SAACtL,GAAD,OAAQ8L,EAAS8J,EAAAA,EAAAA,kBAAiC5V,KACrEwU,gBAAiB,kBAAM1I,EAAS8J,EAAAA,EAAAA,oBAChC+D,uBAAwB,kBAAM7N,EAAS8J,EAAAA,EAAAA,2BACvC/S,uBAAwB,SAACqJ,GAAD,OAAwBJ,EAASK,EAAAA,EAAAA,uBAA+CD,KACxG+O,kBAAmB,kBAAMnP,EAAS8J,EAAAA,EAAAA,sBAClCoE,YAAa,kBAAMlO,EAAS8J,EAAAA,EAAAA,gBAC5BqE,aAAc,kBAAMnO,EAAS8J,EAAAA,EAAAA,iBAC7BmB,aAAc,SAACvY,GAAD,OAAYsN,EAAS8J,EAAAA,EAAAA,aAA4BpX,KAC/DqV,eAAgB,SAACrV,GAAD,OAAYsN,EAAS8J,EAAAA,EAAAA,eAA8BpX,KACnEuV,qBAAsB,SAACvV,GAAD,OAAYsN,EAAS8J,EAAAA,EAAAA,qBAAoCpX,KAC/EsV,iBAAkB,SAACtV,GAAD,OAAYsN,EAAS8J,EAAAA,EAAAA,iBAAgCpX,KACvE2a,oBAAqB,kBAAMrN,EAAS8J,EAAAA,EAAAA,wBACpCqG,aAAc,kBAAMnQ,EAAS,CAAE7L,KAAM,mBACrC6D,sBAAuB,SAACyB,EAASK,GAAV,OAAyBkG,EAASC,EAAAA,EAAAA,sBAA4CxG,EAASK,KAC9GnD,wBAAyB,SAAC8C,EAASK,GAAV,OAAyBkG,EAASC,EAAAA,EAAAA,wBAA8CxG,EAASK,KAClHlD,mBAAoB,SAAC6C,GAAD,OAAauG,EAASC,EAAAA,EAAAA,mBAAyCxG,KACnFiU,uBAAwB,kBAAM1N,EAAS8J,EAAAA,EAAAA,2BACvCgE,mBAAoB,kBAAM9N,EAASC,EAAAA,EAAAA,0BA4BjBR,CAA6CyP,M,yJC9ShE,IAAMc,EAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYjc,GAAO,6BACf,cAAMA,IAGVsc,WAAa,SAACnR,GACV,IAAQhB,EAAY,EAAKnK,MAAjBmK,QAEJgB,EACAhB,EAAQgB,GAERhB,KAVW,EADvB,qCAeI,WACI,MAA4C3J,KAAKR,MAAzCuc,EAAR,EAAQA,gBAAiB3G,EAAzB,EAAyBA,MAAOzK,EAAhC,EAAgCA,QAEhC,OACI,kBAAC,aAAD,KACMyK,EAAM2F,OACFgB,EAAgB,CACd3X,QAAS,SACTjB,MAAO,QACP6Y,YAAa5G,EAAM6F,OACnBgB,aAAa,IAEf,KAEJ7G,EAAM2F,OAAS/a,KAAK8b,WAAWnR,GAAW,UA7B5D,GAAgCvK,EAAAA,WAmChCqb,EAAWpb,UAAY,CACnB+U,MAAO9U,IAAAA,OACPqK,QAASrK,IAAAA,OACTqJ,QAASrJ,IAAAA,KACTyb,gBAAiBzb,IAAAA,MASrB,SAAe4K,EAAAA,EAAAA,SAAQ,MANvB,SAA4BO,GACxB,MAAO,CACHsQ,gBAAiB,SAAChQ,GAAD,OAAaN,GAASsQ,EAAAA,EAAAA,iBAAgBhQ,QAI/D,CAAiD0P","sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/RowFact.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/DriftTableRow.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterDropdown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterValue.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilter.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js"],"sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, factTypeFilters, stateFilters, factSort,\n    stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let filterFactType = factTypeFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            'filter[show]': filterFactType,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport addSystemModalHelpers from '../redux/helpers';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    async componentDidMount() {\n        addSystemModalHelpers.setContent({\n            systems: this.props.systems,\n            baselines: this.props.baselines,\n            historicalProfiles: this.props.historicalProfiles\n        }, this.props.handleSystemSelection, this.props.handleBaselineSelection, this.props.handleHSPSelection, this.props.selectedHSPContent);\n    }\n\n    toggleBasket = () => {\n        const { toggleBasketVisible } = this.props;\n\n        this.clearDeselected();\n        toggleBasketVisible();\n    }\n\n    applyChanges = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    displayBodyContent = (isEmpty) => {\n        const { entities, selectedSystemContent, selectedBaselineContent, selectedHSPContent } = this.props;\n        let bodyContent;\n\n        if (isEmpty) {\n            bodyContent = <EmptyStateDisplay\n                title='Nothing selected'\n                text={ [ 'Select systems and baselines to compare.' ] }\n            />;\n        } else {\n            bodyContent = <SelectedTable\n                selectedBaselineContent={ selectedBaselineContent }\n                entities={ entities }\n                selectedHSPContent={ selectedHSPContent }\n                findType={ this.findType }\n                handleDeselect={ this.handleDeselect }\n                selectedSystemContent={ selectedSystemContent }\n            />;\n        }\n\n        return bodyContent;\n    }\n\n    render() {\n        const { isVisible } = this.props;\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.toggleBasket() }\n                        headerContent={ <div>Selected items ({ this.findSelected() })</div> }\n                        footerContent={ <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ () => this.applyChanges() }\n                            ouiaId=\"confirm-selected-basket-button\"\n                            isDisabled={ !systemsToDeselect.length && !baselinesToDeselect.length && !hspsToDeselect.length }\n                        >\n                            Apply changes\n                        </Button> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            { this.displayBodyContent(this.findSelected() === 0) }\n                        </div> }\n                    >\n                        <a onClick={ () => this.toggleBasket() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    baselines: PropTypes.array,\n    entities: PropTypes.object,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    systems: PropTypes.array,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]},\n                { title: 'Associated systems', transforms: [ cellWidth(20) ]}\n            ],\n            basketIsVisible: false,\n            previousSelectedBaselineIds: []\n        };\n\n        this.addSystemModal = React.createRef();\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    closePopover = () => {\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(false);\n        this.setState({ basketIsVisible: false });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setState({ previousSelectedBaselineIds: this.props.selectedBaselineIds });\n        }\n    }\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal, setSelectedBaselines } = this.props;\n        const { previousSelectedBaselineIds } = this.state;\n\n        setSelectedBaselines(previousSelectedBaselineIds, 'COMPARISON');\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselines, baselineTableData, emptyState, globalFilterState, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles,\n            selectedBaselineIds, selectedBaselineContent, selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent,\n            selectedSystemIds, setSelectedSystemIds, systems, totalBaselines, baselineError, revertBaselineFetch } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className='drift'\n                    ref={ this.addSystemModal }\n                    onScroll={ basketIsVisible ? this.closePopover : null }\n                    style={{ maxHeight: '600px' }}\n                    width={ '1200px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleSystemSelection={ handleSystemSelection }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                    systems={ systems }\n                                    baselines={ baselines }\n                                    historicalProfiles={ historicalProfiles }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                                leftAlignToolbar={ true }\n                                hasSwitch={ false }\n                                emptyState={ emptyState }\n                                baselineError={ baselineError }\n                                revertBaselineFetch={ revertBaselineFetch }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func,\n    setSelectedBaselines: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    emptyState: PropTypes.bool,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent,\n        emptyState: state.baselinesTableState.comparisonTable.emptyState,\n        baselineError: state.baselinesTableState.comparisonTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        setSelectedBaselines: (ids, tableId) => dispatch(baselinesTableActions.setSelectedBaselines(ids, tableId)),\n        revertBaselineFetch: () => dispatch(baselinesTableActions.revertBaselineFetch('COMPARISON'))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ArrowsAltVIcon, BlueprintIcon, ClockIcon, DisconnectedIcon, ExclamationTriangleIcon,\n    LongArrowAltUpIcon, LongArrowAltDownIcon, ServerIcon, TimesIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderLoadingSystems() {\n        return [ <td key='loading-systems-header'><Skeleton size={ SkeletonSize.md } /></td> ];\n    }\n\n    renderInsightsIcons = (item) => {\n        return (\n            <React.Fragment>\n                { item.system_stale\n                    ? <Tooltip\n                        position='top'\n                        content={ <div>Stale system</div> }\n                    >\n                        <ExclamationTriangleIcon />\n                    </Tooltip>\n                    : null\n                }\n                { item.insights_enabled === false || item.insights_installed === false\n                    ? <Tooltip\n                        position='top'\n                        content={ !item.insights_installed\n                            ? <div>Insights not installed</div>\n                            : <div>Insights not enabled</div> }\n                    >\n                        <DisconnectedIcon />\n                    </Tooltip>\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header right-border reference-header sticky-header'\n                        : `drift-header right-border ${item.type}-header sticky-header` }\n                >\n                    <div>\n                        <a\n                            aria-label='remove-system-icon'\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div>\n                            <span className=\"drift-header-icon\">\n                                { typeIcon }\n                            </span>\n                            <span className=\"system-name\">{ item.display_name }</span>\n                        </div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            <span className='system-header-date-margin'>\n                                { item.last_updated\n                                    ? this.formatDate(item.last_updated)\n                                    : this.formatDate(item.updated)\n                                }\n                            </span>\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                            { this.renderInsightsIcons(item) }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, masterList, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer sticky-header\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer right-border sticky-header\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { masterList.length ? this.renderSystemHeaders() : this.renderLoadingSystems() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#6A6E73' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\nfunction RowFact(props) {\n    const { expandedRows, expandRow, factName, type } = props;\n\n    const buildClassName = () => {\n        if (type === 'fact' || (type === 'category' && !expandedRows.includes(factName))) {\n            return 'sticky-column fixed-column-1';\n        } else {\n            return 'nested-fact sticky-column fixed-column-1';\n        }\n    };\n\n    const renderExpandableRowButton = () => {\n        if (expandedRows.includes(factName)) {\n            return <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        } else {\n            return <AngleRightIcon\n                className={ 'carat-margin pointer' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        }\n    };\n\n    const renderFact = () => {\n        let fact;\n\n        if (type === 'category' || type === 'multi fact') {\n            let button = renderExpandableRowButton();\n            fact = <span>{ button } { factName }</span>;\n        } else if (type === 'sub fact') {\n            fact = <p className='child-row'>{ factName }</p>;\n        } else {\n            fact = factName;\n        }\n\n        return fact;\n    };\n\n    return (\n        <td className={ buildClassName() }>\n            { renderFact() }\n        </td>\n    );\n}\n\nRowFact.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    factName: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default RowFact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport StateIcon from '../../../StateIcon/StateIcon';\nimport RowFact from './RowFact';\n\nfunction DriftTableRow(props) {\n    const { expandedRows, expandRow, fact, masterList, referenceId, stateSort, type } = props;\n\n    const findSystem = (systems, id) => {\n        return systems.find(system => system.id === id);\n    };\n\n    const renderState = () => {\n        return <td className='fact-state sticky-column fixed-column-2'>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    };\n\n    const createClassname = (system) => {\n        let className = [ 'comparison-cell' ];\n\n        if (system?.is_obfuscated) {\n            className.push('obfuscated');\n        }\n\n        if (referenceId && system?.state === 'DIFFERENT') {\n            className.push('highlight');\n            className.push('different-fact-cell');\n        } else if (!referenceId && fact.state === 'DIFFERENT') {\n            className.push('highlight');\n        }\n\n        return className;\n    };\n\n    const createCells = () => {\n        let cell = [];\n        let system;\n\n        for (let i = 0; i < masterList.length; i++) {\n            if (fact.systems) {\n                system = findSystem(fact.systems, masterList[i].id);\n            }\n\n            let className = createClassname(system);\n\n            cell.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        }\n\n        return cell;\n    };\n\n    const createRow = () => {\n        let row = [];\n\n        row.push(<RowFact expandedRows={ expandedRows } expandRow={ expandRow } factName={ fact.name } type={ type } />);\n        row.push(renderState());\n\n        row = row.concat(createCells());\n        return row;\n    };\n\n    return (\n        <tr\n            data-ouia-component-type='PF4/TableRow'\n            data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n            className={ fact.state === 'DIFFERENT' || fact.state === 'INCOMPLETE_DATA_OBFUSCATED' ? 'unexpected-row' : '' }>\n            { createRow() }\n        </tr>\n    );\n}\n\nDriftTableRow.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    fact: PropTypes.object,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    stateSort: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default DriftTableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport DriftTableRow from './DriftTableRow/DriftTableRow';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.topScroller = React.createRef();\n        this.headerScroll = React.createRef();\n        this.bottomScroller = React.createRef();\n        this.doubleScroll = this.doubleScroll.bind(this);\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    doubleScroll() {\n        let wrapper1 = this.topScroller.current;\n        let wrapper2 = this.headerScroll.current;\n        let wrapper3 = this.bottomScroller.current;\n\n        wrapper1.onscroll = function() {\n            wrapper2.scrollLeft = wrapper1.scrollLeft;\n            wrapper3.scrollLeft = wrapper1.scrollLeft;\n        };\n\n        wrapper3.onscroll = function() {\n            wrapper1.scrollLeft = wrapper3.scrollLeft;\n            wrapper2.scrollLeft = wrapper3.scrollLeft;\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            await this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    addFilters(newFilters, filters, addFunction, type) {\n        if (newFilters?.length > 0) {\n            filters.forEach(function(filter) {\n                let x = { ...filter };\n\n                if (newFilters?.includes(filter.filter.toLowerCase())) {\n                    x.selected = false;\n                    \n                    if (type === 'fact') {\n                        addFunction(x);\n                    }\n                }\n\n                if (type === 'state') {\n                    addFunction(x);\n                }\n            });\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, factTypeFilters, handleFactFilter, location, stateFilters, toggleFactTypeFilter } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n        let newFactTypeFilters = searchParams.get('filter[show]')?.split(',');\n\n        this.addFilters(newStateFilters, stateFilters, addStateFilter, 'state');\n        this.addFilters(newFactTypeFilters, factTypeFilters, toggleFactTypeFilter, 'fact');\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        if (!systemIds.includes(reference) && !baselineIds.includes(reference) && !HSPIds.includes(reference)) {\n            reference = undefined;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        rowData.push(<td className='fact-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td className='state-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, expandRow, referenceId, stateSort } = this.props;\n        let rows = [];\n\n        if (fact.comparisons) {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                expandRow={ expandRow }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'category' }\n            />);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    if (comparison.multivalues) {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            expandRow={ expandRow }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'multi fact' }\n                        />);\n\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                rows.push(<DriftTableRow\n                                    expandedRows={ expandedRows }\n                                    fact={ subFactItem }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    stateSort={ stateSort }\n                                    type={ 'multi value' }\n                                />);\n                            });\n                        }\n                    } else {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'sub fact' }\n                        />);\n                    }\n                });\n            }\n        } else {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'fact' }\n            />);\n        }\n\n        return rows;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n        let scrollWidth = '';\n\n        if (this.bottomScroller.current) {\n            scrollWidth = this.bottomScroller.current.scrollWidth;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='sticky-table-header'>\n                    <div className='second-scroll-wrapper' onScroll={ this.doubleScroll } ref={ this.topScroller }>\n                        <div\n                            className='second-scroll'\n                            style={{ width: scrollWidth }}\n                        ></div>\n                    </div>\n                    <div\n                        className=\"drift-table-wrapper\"\n                        onScroll={ this.doubleScroll }\n                        ref={ this.headerScroll }>\n                        <table\n                            className=\"pf-c-table pf-m-compact drift-table\"\n                            data-ouia-component-type='PF4/Table'\n                            data-ouia-component-id='comparison-table'>\n                            <thead>\n                                <ComparisonHeader\n                                    factSort={ factSort }\n                                    fetchCompare={ this.fetchCompare }\n                                    permissions={ permissions }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    removeSystem={ this.removeSystem }\n                                    stateSort={ stateSort }\n                                    systemIds={ this.systemIds }\n                                    toggleFactSort={ toggleFactSort }\n                                    toggleStateSort={ toggleStateSort }\n                                    updateReferenceId={ this.updateReferenceId }\n                                    setHistory={ setHistory }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                            </thead>\n                        </table>\n                    </div>\n                </div>\n                <div\n                    className=\"drift-table-wrapper table-body-scroll\"\n                    onScroll={ this.doubleScroll }\n                    ref={ this.bottomScroller }>\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions,\n            updateReferenceId } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                    updateReferenceId={ updateReferenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    factTypeFilters: PropTypes.array,\n    toggleFactTypeFilters: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isToolbar } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isToolbar ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isToolbar ? 'Add to comparison' : 'Add systems or baselines' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isToolbar: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\nfunction DriftFilterDropdown(props) {\n    const { filterType, toggleFilterType } = props;\n    const [ isOpen, toggleOpen ] = useState(false);\n\n    const selectFilter = (type) => {\n        toggleFilterType(type);\n        toggleOpen(!isOpen);\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            data-ouia-component-id='fact-name-filter'\n            key='fact-name'\n            onClick={ () => selectFilter('Fact name') }\n        >\n            Fact name\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='fact-type-filter'\n            key='fact-type'\n            onClick={ () => selectFilter('Fact type') }\n        >\n            Fact type\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='state-filter'\n            key='state'\n            onClick={ () => selectFilter('State') }\n        >\n            State\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            ouiaId='drift-filter-dropdown'\n            className='comparison-filter-dropdown-width'\n            toggle={ <DropdownToggle\n                onToggle={ toggleOpen }\n                ouiaId='drift-filter-toggle'\n                icon={ <FilterIcon /> }>\n                { filterType }\n            </DropdownToggle> }\n            isOpen={ isOpen }\n            dropdownItems={ dropdownItems }\n        />\n    );\n}\n\nDriftFilterDropdown.propTypes = {\n    filterType: PropTypes.string,\n    toggleFilterType: PropTypes.func\n};\n\nexport default DriftFilterDropdown;\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addFilter = async (filter) => {\n        const { filterFunction, setHistory } = this.props;\n\n        await filterFunction(filter);\n        setHistory();\n    }\n\n    createDropdownItem(filter, type) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ `${ type }-filter-option-${ filter.display }` } >\n                <Checkbox\n                    id={ filter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ `${ type }-filter-option-checkbox-${ filter.display }` }\n                    label={ filter.display }\n                    isChecked={ filter.selected }\n                    onChange={ () => this.addFilter(filter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(filters, type) {\n        let dropdownItems = [];\n\n        filters.forEach(function(filter) {\n            let dropdownItem = this.createDropdownItem(filter, type);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    render() {\n        const { filters, type } = this.props;\n        let dropdownItems = [];\n        const ouiaPrefix = type.split(' ').join('-').toLowerCase();\n\n        dropdownItems = this.createDropdownArray(filters, type);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId={ ouiaPrefix }\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId={ `${ ouiaPrefix }-toggle` }>\n                        { type === 'State'\n                            ? `Filter by ${ type.toLowerCase() }`\n                            : 'Show'\n                        }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    factTypeFilters: PropTypes.array,\n    filterDropdownOpened: PropTypes.bool,\n    filters: PropTypes.array,\n    filterFunction: PropTypes.func,\n    setHistory: PropTypes.func,\n    type: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown())\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarFilter } from '@patternfly/react-core';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport FilterDropDown from '../../FilterDropDown/FilterDropDown';\n\nfunction DriftFilterValue(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, filterType, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n\n    const setFactFilterChips = () => {\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    };\n\n    const setDropdownChips = (dropdownFilters) => {\n        let chips = [];\n\n        dropdownFilters.forEach(function(filter) {\n            if (filter.selected && filter.display !== 'All facts') {\n                chips.push(filter.display);\n            }\n        });\n\n        return chips;\n    };\n\n    const renderFilterInput = (type) => {\n        return <React.Fragment>\n            <ToolbarFilter\n                chips={ setFactFilterChips() }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"Fact name\"\n            >\n                { type === 'Fact name'\n                    ? <SearchBar\n                        factFilter={ factFilter }\n                        activeFactFilters={ activeFactFilters }\n                        handleFactFilter={ handleFactFilter }\n                        filterByFact={ filterByFact }\n                        setHistory={ setHistory }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(factTypeFilters) }\n                deleteChip={ removeChip }\n                categoryName=\"Fact type\"\n            >\n                { type === 'Fact type'\n                    ? <FilterDropDown\n                        filterFunction={ toggleFactTypeFilter }\n                        filters={ factTypeFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(stateFilters) }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"State\"\n            >\n                { type === 'State'\n                    ? <FilterDropDown\n                        filterFunction={ addStateFilter }\n                        filters={ stateFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n        </React.Fragment>;\n    };\n\n    return (\n        <React.Fragment>\n            { renderFilterInput(filterType) }\n        </React.Fragment>\n    );\n}\n\nDriftFilterValue.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    filterType: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilterValue;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup } from '@patternfly/react-core';\n\nimport DriftFilterDropdown from './DriftFilterDropdown';\nimport DriftFilterValue from './DriftFilterValue';\n\nfunction DriftFilter(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n    const [ filterType, toggleFilterType ] = useState('Fact name');\n\n    return (\n        <ToolbarGroup variant='filter-group'>\n            <DriftFilterDropdown\n                filterType={ filterType }\n                toggleFilterType={ toggleFilterType }\n            />\n            <DriftFilterValue\n                activeFactFilters={ activeFactFilters }\n                addStateFilter={ addStateFilter }\n                factFilter={ factFilter }\n                factTypeFilters={ factTypeFilters }\n                filterByFact={ filterByFact }\n                filterType={ filterType }\n                handleFactFilter={ handleFactFilter }\n                removeChip={ removeChip }\n                setHistory={ setHistory }\n                stateFilters={ stateFilters }\n                toggleFactTypeFilter={ toggleFactTypeFilter }\n            />\n        </ToolbarGroup>\n    );\n}\n\nDriftFilter.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    clearAllStateChips: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent } from '@patternfly/react-core';\n\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport DriftFilter from './DriftFilter/DriftFilter';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>,\n                <DropdownItem\n                    key='export-to-JSON'\n                    component='button'\n                    data-ouia-component-id='export-to-json-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToJSON() }\n                >\n                    Export to JSON\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearAllSelections, clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        await clearAllSelections();\n        setHistory();\n\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, factTypeFilters, filterByFact, handleFactFilter, setHistory, stateFilters,\n            toggleFactTypeFilter } = this.props;\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else if (type === 'Fact type') {\n            toggleFactTypeFilter(factTypeFilters[1]);\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, toggleFactTypeFilter, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <DriftFilter\n                            activeFactFilters={ activeFactFilters }\n                            addStateFilter={ addStateFilter }\n                            factFilter={ factFilter }\n                            factTypeFilters={ factTypeFilters }\n                            filterByFact={ filterByFact }\n                            handleFactFilter={ handleFactFilter }\n                            removeChip={ this.removeChip }\n                            setHistory={ setHistory }\n                            stateFilters={ stateFilters }\n                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                        />\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } isToolbar={ true } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PageSection, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nimport { EMPTY_COMPARISON_TITLE, EMPTY_COMPARISON_MESSAGE } from '../../constants';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location.search !== '' && this.props.location.search === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, factTypeFilters, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, factTypeFilters, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ EMPTY_COMPARISON_TITLE }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                button={ <AddSystemButton/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearAllSelections, clearComparison, clearComparisonFilters,\n            clearSelectedBaselines, emptyState, error, exportToCSV, exportToJSON, factFilter, factSort, factTypeFilters, filterByFact,\n            handleFactFilter, historicalProfiles, handleBaselineSelection, handleHSPSelection, handleSystemSelection, history, loading, page, perPage,\n            referenceId, resetComparisonFilters, selectedBaselineIds, selectedHSPIds, stateFilters, stateSort, systems, toggleFactTypeFilter,\n            totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageSection>\n                        <PageHeaderTitle title='Comparison'/>\n                    </PageSection>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            { !emptyState\n                                                ? <DriftToolbar\n                                                    loading={ loading }\n                                                    history={ history }\n                                                    page={ page }\n                                                    perPage={ perPage }\n                                                    totalFacts={ totalFacts }\n                                                    updatePagination={ updatePagination }\n                                                    clearComparison={ clearComparison }\n                                                    clearComparisonFilters={ clearComparisonFilters }\n                                                    exportToCSV={ exportToCSV }\n                                                    exportToJSON={ exportToJSON }\n                                                    updateReferenceId={ updateReferenceId }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearSelectedBaselines={ clearSelectedBaselines }\n                                                    factFilter={ factFilter }\n                                                    factTypeFilters={ factTypeFilters }\n                                                    filterByFact={ filterByFact }\n                                                    stateFilters={ stateFilters }\n                                                    addStateFilter={ addStateFilter }\n                                                    toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    clearAllFactFilters={ clearAllFactFilters }\n                                                    setHistory={ this.setHistory }\n                                                    resetComparisonFilters={ resetComparisonFilters }\n                                                    clearAllSelections={ clearAllSelections }\n                                                />\n                                                : null\n                                            }\n                                            <DriftTable\n                                                updateReferenceId={ updateReferenceId }\n                                                error={ error }\n                                                isFirstReference={ isFirstReference }\n                                                setIsFirstReference={ this.setIsFirstReference }\n                                                clearComparison= { clearComparison }\n                                                handleBaselineSelection={ handleBaselineSelection }\n                                                handleHSPSelection={ handleHSPSelection }\n                                                handleSystemSelection={ handleSystemSelection }\n                                                permissions={ value.permissions }\n                                                handleFactFilter={ handleFactFilter }\n                                                addStateFilter={ addStateFilter }\n                                                stateFilters={ stateFilters }\n                                                activeFactFilters={ activeFactFilters }\n                                                factFilter={ factFilter }\n                                                setHistory={ this.setHistory }\n                                                factSort={ factSort }\n                                                stateSort={ stateSort }\n                                                referenceId={ referenceId }\n                                                systems={ systems }\n                                                baselines={ baselines }\n                                                historicalProfiles={ historicalProfiles }\n                                                selectedHSPIds={ selectedHSPIds }\n                                                selectedBaselineIds={ selectedBaselineIds }\n                                                factTypeFilters={ factTypeFilters }\n                                                toggleFactTypeFilter={ toggleFactTypeFilter }\n                                            />\n                                            { !emptyState && !loading ?\n                                                <Toolbar className=\"drift-toolbar\">\n                                                    <ToolbarGroup className=\"pf-c-pagination\">\n                                                        <ToolbarItem>\n                                                            <TablePagination\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                total={ totalFacts }\n                                                                isCompact={ false }\n                                                                updatePagination={ updatePagination }\n                                                                widgetId='drift-pagination-bottom'\n                                                                ouiaId='drift-pagination-bottom'\n                                                                variant={ PaginationVariant.bottom }\n                                                            />\n                                                        </ToolbarItem>\n                                                    </ToolbarGroup>\n                                                </Toolbar>\n                                                : null\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        exportToJSON: () => dispatch(compareActions.exportToJSON()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        toggleFactTypeFilter: (filter) => dispatch(compareActions.toggleFactTypeFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters()),\n        clearAllSelections: () => dispatch(addSystemModalActions.clearAllSelections())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        factTypeFilters: state.compareState.factTypeFilters,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","factTypeFilters","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","filterFactType","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","toggleBasket","toggleBasketVisible","clearDeselected","applyChanges","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","find","hspContent","item","newArray","toggleSelected","array","removeId","displayBodyContent","isEmpty","EmptyStateDisplay","title","text","addSystemModalHelpers","systems","baselines","historicalProfiles","handleSystemSelection","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","findSelected","footerContent","Button","key","variant","onClick","ouiaId","isDisabled","position","PopoverPosition","bodyContent","maxHeight","overflowY","AddSystemModal","closePopover","disableSystemTable","basketIsVisible","createContent","content","body","DriftTooltip","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","onBulkSelect","systemContentSelect","data","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","transforms","sortable","cellWidth","previousSelectedBaselineIds","addSystemModal","React","window","insights","chrome","auth","getUser","entityListener","addNewListener","actionType","callback","addSystemModalOpened","width","isStatic","hspRead","prevProps","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","findNotInComparison","baselinesToRemove","setSelectedBaselines","setSelectedContent","tabIndex","selectActiveTab","activeTab","emptyState","globalFilterState","loading","setSelectedSystemIds","totalBaselines","baselineError","revertBaselineFetch","Modal","ref","onScroll","isOpen","onClose","actions","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","leftAlignToolbar","hasSwitch","showModal","updateReferenceId","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","ReferenceSelector","isReference","StarIcon","OutlinedStarIcon","Tooltip","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","renderInsightsIcons","system_stale","ExclamationTriangleIcon","insights_enabled","insights_installed","DisconnectedIcon","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","Skeleton","size","SkeletonSize","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","color","last_updated","updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderLoadingSystems","renderHeaderRow","hasHSPReadPermissions","StateIcon","fact","CheckCircleIcon","height","ExclamationCircleIcon","QuestionCircleIcon","tooltip","RowFact","expandedRows","expandRow","factName","button","AngleDownIcon","AngleRightIcon","renderFact","DriftTableRow","findSystem","createClassname","is_obfuscated","concat","cell","i","join","value","float","LockIcon","createCells","DriftTable","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","topScroller","headerScroll","bottomScroller","doubleScroll","wrapper1","current","wrapper2","wrapper3","onscroll","scrollLeft","nextProps","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","entries","searchParams","URLSearchParams","getAll","Array","isArray","get","newFilters","filters","addFunction","x","addStateFilter","handleFactFilter","toggleFactTypeFilter","split","newStateFilters","newFactTypeFilters","addFilters","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","comparisons","comparison","multivalues","subFactItem","compareData","scrollWidth","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","toggleFactTypeFilters","withRouter","compareActions","AddSystemButton","isToolbar","DriftFilterDropdown","filterType","toggleFilterType","useState","toggleOpen","selectFilter","dropdownItems","DropdownItem","Dropdown","toggle","DropdownToggle","onToggle","FilterIcon","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","types","FilterDropDown","addFilter","filterFunction","createDropdownItem","toggleDropDown","display","label","dropdownItem","ouiaPrefix","createDropdownArray","filterDropdownOpened","filterDropdownActions","DriftFilterValue","factFilterChips","removeChip","setDropdownChips","dropdownFilters","chips","ToolbarFilter","deleteChip","deleteChipGroup","categoryName","DriftFilter","ToolbarGroup","clearAllFactFilters","clearAllStateChips","DriftToolbar","stateFilter","resetFilters","resetComparisonFilters","dropdownOpen","clearFilters","clearComparisonFilters","clearAllSelections","clearSelectedBaselines","actionKebabItems","component","exportToCSV","exportToJSON","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EMPTY_COMPARISON_MESSAGE","detail","PlusCircleIcon","EMPTY_COMPARISON_TITLE","PageHeader","PageSection","PageHeaderTitle","Main","compareRead","ErrorAlert","Card","CardBody","loadEntities","pagination","closeToast","addNotification","description","dismissable"],"sourceRoot":""}