{"version":3,"file":"js/215.df81407150c811ae9a6b.js","mappings":"oZAOO,IAAMA,EAAb,+B,IAAA,G,EAAA,E,gaACI,WAAYC,GAAO,6BACf,cAAMA,IA8BVC,YAAc,WACV,MAA8C,EAAKD,MAA3CE,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,aAE7B,EAAKC,mBAAmBD,EAAaE,cACrCH,KAnCe,EAsCnBI,cAAgB,SAACC,GACK,UAAdA,EAAMC,MACND,EAAME,iBACN,EAAKC,iBArCT,EAAKC,MAAQ,CACTC,aAAc,EAAKZ,MAAMG,aAAaE,cAI1C,EAAKD,mBAAqB,SAACS,GACvB,EAAKC,SAAS,CAAEF,aAAcC,KAGlC,EAAKH,aAAe,EAAKA,aAAaK,MAAlB,WAbL,EADvB,gEAiBI,mGACYH,EAAiBI,KAAKL,MAAtBC,aADZ,EAEiEI,KAAKhB,MAA1DG,EAFZ,EAEYA,aAAcc,EAF1B,EAE0BA,cAAef,EAFzC,EAEyCA,oBAFzC,kBAMce,EAAcd,EAAae,GAAI,CAAEb,aAAcO,EAAcO,YAAa,KANxF,OASQjB,IATR,yGAjBJ,0EA8CI,WACI,IAAQU,EAAiBI,KAAKL,MAAtBC,aACAQ,EAAUJ,KAAKhB,MAAfoB,MACFC,EAAWC,OAAOC,UAAUC,eAAeC,KAAKL,EAAO,UAAaM,EAAAA,iBAAAA,MAAyB,KAEnG,OAAQ,yBAAKC,UAAU,cACnB,kBAAC,EAAAC,KAAD,KACI,kBAAC,EAAAC,UAAD,CACIC,MAAM,iBACNC,YAAU,EACVC,QAAQ,gBACRC,kBAAoBX,OAAOC,UAAUC,eAAeC,KAAKL,EAAO,UAAYA,EAAMc,OAAS,KAC3FC,UAAYd,EACZe,WAAapB,KAAKV,eAElB,kBAAC,EAAA+B,UAAD,CACIxB,MAAQD,EACR0B,KAAK,OACLC,SAAWvB,KAAKZ,mBAChB+B,UAAYd,EACZ,aAAW,uBAlEnC,oBAyEI,WACI,IAAQmB,EAAgBxB,KAAKhB,MAArBwC,YAER,OACI,kBAAC,EAAAC,MAAD,CACId,UAAU,QACVe,QAAUC,EAAAA,aAAAA,MACVC,MAAM,YACNC,OAASL,EACTM,QAAU9B,KAAKf,YACf8C,QAAU,CACN,kBAAC,EAAAC,OAAD,CACIxC,IAAI,UACJkC,QAAQ,UACRO,OAAO,OACPC,QAAUlC,KAAKN,cAJnB,QAOA,kBAAC,EAAAsC,OAAD,CACIxC,IAAI,SACJkC,QAAQ,OACRO,OAAO,SACPC,QAAUlC,KAAKf,aAJnB,YASFe,KAAKmC,uBApGvB,GAA2CC,EAAAA,WA0G3CrD,EAAsBsD,UAAY,CAC9BlD,aAAcmD,IAAAA,OACdpD,oBAAqBoD,IAAAA,KACrBd,YAAac,IAAAA,KACbrC,cAAeqC,IAAAA,KACflC,MAAOkC,IAAAA,QASX,SAAeC,EAAAA,EAAAA,SAAQ,MANvB,SAA4BC,GACxB,MAAO,CACHvC,cAAe,SAACwC,EAAYC,GAAb,OAAiCF,EAASG,EAAAA,EAAAA,cAAkCF,EAAYC,QAI/G,CAAiD3D,G,yBCtGjD,QAvBA,SAAoB6D,GAChB,IAAIC,EAAa,EACbC,EAAQ,EAkBZ,OAhBAF,EAAsBG,SAAQ,SAASC,GAC/BA,EAAKC,SACDC,EAAAA,EAAAA,WAA+BF,GAC/BH,GAAc,EAEdC,GAAS,EAENI,EAAAA,EAAAA,WAA+BF,IACtCE,EAAAA,EAAAA,iBAAqCF,GAAMD,SAAQ,SAASI,GACpDA,EAAQF,WACRH,GAAS,SAMlB,CAAED,WAAAA,EAAYC,MAAAA,I,ICbnBM,EAAAA,SAAAA,I,2bACF,WAAYpE,GAAO,6BACf,cAAMA,IAuBVqE,WAAa,WACT,IAAQT,EAA0B,EAAK5D,MAA/B4D,sBACJS,GAAa,EAgBjB,OAdAT,EAAsBG,SAAQ,SAACC,GACvBA,EAAKC,WACLI,GAAa,GAGbH,EAAAA,EAAAA,WAA+BF,IAC/BE,EAAAA,EAAAA,iBAAqCF,GAAMD,SAAQ,SAACI,GAC5CA,EAAQF,WACRI,GAAa,SAMtBA,GAvCP,EAAK1D,MAAQ,CACT2D,aAAa,EACb9B,aAAa,GAGjB,EAAK+B,YAAc,WACf,IAAQD,EAAgB,EAAK3D,MAArB2D,YACR,EAAKxD,SAAS,CACVwD,aAAcA,KAItB,EAAKE,kBAAoB,WACrB,IAAQhC,EAAgB,EAAK7B,MAArB6B,YACR,EAAK1B,SAAS,CACV0B,aAAcA,EACd8B,aAAa,KAnBN,E,qCA6CnB,WACI,IAEIG,EACAC,EACAC,EAJJ,EAAqC3D,KAAKL,MAAlC2D,EAAR,EAAQA,YAAa9B,EAArB,EAAqBA,YACboB,EAA0B5C,KAAKhB,MAA/B4D,sBAIR,EAA4BgB,EAAkChB,GAAxDC,EAAN,EAAMA,WAAYC,EAAlB,EAAkBA,MAsBlB,OApBID,EAAa,IACba,EAAiC,IAAfb,EAAmB,aAAeA,EAAa,eAGjEC,EAAQ,IACRa,EAAwB,IAAVb,EAAc,SAAWA,EAAQ,UAGnDW,EAAgB,CACZ,kBAAC,EAAAI,aAAD,CACIrE,IAAI,eACJsE,UAAU,SACV,yBAAuB,6BACvB5B,QAAUlC,KAAKwD,kBACfH,aAAaT,EAAsBmB,OAAS,IAAI/D,KAAKqD,cALzD,iBAYA,kBAAC,aAAD,KACM7B,EAAc,kBAACwC,EAAA,EAAD,CACZC,YAAcjE,KAAKwD,kBAAkBzD,KAAKC,MAC1CwB,YAAcA,EACdkC,gBAAkBA,EAClBC,YAAcA,IACb,KACL,kBAAC,EAAAO,SAAD,CACIC,MAAO,CAAEC,MAAO,QAChBC,OAAS,kBAAC,EAAAC,YAAD,CACL,yBAAuB,+BACvB,2BAAyB,qBACzBC,SAAWvE,KAAKuD,cACpB1B,OAASyB,EACTG,cAAgBA,EAChBe,SAAO,EACPvC,OAAO,+B,EA3FrBmB,CAA0BhB,EAAAA,WAkGhCgB,EAAkBf,UAAY,CAC1BO,sBAAuBN,IAAAA,OAS3B,SAAeC,EAAAA,EAAAA,UANf,SAAyB5C,GACrB,MAAO,CACHiD,sBAAuBjD,EAAM8E,kBAAkB7B,yBAIf,KAAxC,CAA8CQ,G,IC9GxCsB,EAAAA,SAAAA,I,2bACF,WAAY1F,GAAO,6BACf,cAAMA,IAGV2F,cAAgB,WACZ,MAAyC,EAAK3F,MAAtC4F,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,gBAErBD,EAAY,CAAEE,SAAU,GAAIC,UAAW,GAAI/B,KAAM,KACjD6B,KARe,E,qCAWnB,WACI,MAA4D7E,KAAKhB,MAAzDgG,EAAR,EAAQA,uBAAwB3B,EAAhC,EAAgCA,WAAY4B,EAA5C,EAA4CA,YAE5C,OACI,kBAAC,aAAD,KACOA,EAAYC,qBAAiDC,IAA/BF,EAAYC,eAevC,kBAAC,EAAAlD,OAAD,CACEN,QAAQ,UACR2B,WAAaA,EACbnB,QAAUlC,KAAK2E,cACf1C,OAAO,+BAJT,wBAdA,kBAAC,EAAAmD,QAAD,CACEC,QAAU,oFAEV,yBAAK1E,UAAYqE,EAAyB,wBAA0B,MAChE,kBAAC,EAAAhD,OAAD,CACIN,QAAQ,UACR2B,YAAU,EACVnB,QAAUlC,KAAK2E,cACf1C,OAAO,+BAJX,+B,EAtBtByC,CAAsBtC,EAAAA,WA8C5BsC,EAAcrC,UAAY,CACtBwC,gBAAiBvC,IAAAA,KACjBsC,YAAatC,IAAAA,KACbe,WAAYf,IAAAA,KACZ2C,YAAa3C,IAAAA,OACb0C,uBAAwB1C,IAAAA,MAU5B,SAAeC,EAAAA,EAAAA,SAAQ,MAPvB,SAA4BC,GACxB,MAAO,CACHqC,gBAAiB,kBAAMrC,EAASG,EAAAA,EAAAA,oBAChCiC,YAAa,SAACU,GAAD,OAAc9C,EAASG,EAAAA,EAAAA,YAAgC2C,QAI5E,CAAiDZ,G,0BC1D1C,IAAMa,EAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYvG,GAAO,6BACf,cAAMA,IA2BVuF,SAAW,WACP,IAAQiB,EAAiB,EAAK7F,MAAtB6F,aAER,EAAK1F,SAAS,CACV0F,cAAeA,KA9BnB,EAAK7F,MAAQ,CACT8F,gBAAiB,CACb,CACI7D,MAAO,aACPpC,IAAK,aACL0C,QAAS,kBAAM,EAAKlD,MAAM0G,cAAa,KACxC,CACC9D,MAAO,cACPpC,IAAK,cACL0C,QAAS,kBAAM,EAAKlD,MAAM0G,cAAa,MAG/CF,cAAc,EACd/B,cAAe,CACX,kBAAC,EAAAI,aAAD,CACIrE,IAAI,gBACJsE,UAAU,SACV7B,OAAO,8BACPC,QAAU,kBAAM,EAAKlD,MAAM2G,YAAY,EAAK3G,MAAM4G,UAAW,EAAK5G,MAAMG,gBAJ5E,mBAhBO,EADvB,qCAqCI,WACI,MAAwEa,KAAKhB,MAArEqE,EAAR,EAAQA,WAAYqC,EAApB,EAAoBA,aAAcT,EAAlC,EAAkCA,YAAahC,EAA/C,EAA+CA,SAAU4C,EAAzD,EAAyDA,WACzD,EAAyD7F,KAAKL,MAAtD8F,EAAR,EAAQA,gBAAiBhC,EAAzB,EAAyBA,cAAe+B,EAAxC,EAAwCA,aAExC,OACI,kBAAC,EAAAM,QAAD,CAASnF,UAAU,iBACf,kBAAC,EAAAoF,eAAD,KACI,kBAAC,EAAAC,YAAD,KACI,kBAAC,EAAAC,WAAD,CACIC,MAAQjD,EAAW,EAAIA,EAAW,KAClCkD,MAAQV,EACRW,QAAUC,EAAAA,EAAAA,iBAAyBR,EAAY5C,GAC/CqD,SAAW,kBAAMZ,GAAczC,EAAW,IAC1CI,WAAaA,EACbpB,OAAO,0CAGf,kBAAC,EAAA+D,YAAD,KACI,kBAAC,EAAD,CACI3C,WAAaA,EACb4B,YAAcA,KAGtB,kBAAC,EAAAsB,aAAD,CAAc7E,QAAQ,qBAClB,kBAAC,EAAAsE,YAAD,KACI,kBAACQ,EAAA,EAAD,CACI/C,cAAgBA,EAChB5B,OAAS2D,EACTjB,SAAWvE,KAAKuE,SAChBtC,OAAO,mCAGf,kBAAC,EAAA+D,YAAD,KACI,kBAAC,EAAD,cAtE5B,GAAyC5D,EAAAA,WA+EzCmD,EAAoBlD,UAAY,CAC5BgB,WAAYf,IAAAA,KACZoD,aAAcpD,IAAAA,KACdW,SAAUX,IAAAA,IACVuD,WAAYvD,IAAAA,OACZqD,YAAarD,IAAAA,KACbsD,UAAWtD,IAAAA,MACXnD,aAAcmD,IAAAA,OACd2C,YAAa3C,IAAAA,QAGjB,U,eC5FO,IAAMmE,EAAb,+B,IAAA,G,EAAA,E,gaACI,WAAYzH,GAAO,6BACf,cAAMA,IA+FVM,cAAgB,SAACC,GACK,UAAdA,EAAMC,MACND,EAAME,iBACN,EAAKC,iBAhGT,EAAKgH,WAAa,EAAKA,WAAW3G,MAAhB,WAClB,EAAKL,aAAe,EAAKA,aAAaK,MAAlB,WACpB,EAAK4G,uBAAyB,EAAKA,uBAAuB5G,MAA5B,WAC9B,EAAK6G,gBAAkB,EAAKA,gBAAgB7G,MAArB,WACvB,EAAK8G,iBAAmB,EAAKA,iBAAiB9G,MAAtB,WACxB,EAAKoC,gBAAkB,EAAKA,gBAAgBpC,MAArB,WAEvB,EAAKJ,MAAQ,CACTmF,SAAU,EAAK9F,MAAM8F,SACrBC,UAAW,EAAK/F,MAAM+F,UACtBO,SAAU,EAAKtG,MAAMsG,SACrBwB,WAAY,EAAK9H,MAAM8H,YAG3B,EAAKnH,MAAMoH,UAAoC,KAAxB,EAAK/H,MAAM8F,UAA4C,KAAzB,EAAK9F,MAAM+F,UAChE,EAAKpF,MAAMqH,WAAqC,KAAxB,EAAKhI,MAAM8F,UAA4C,KAAzB,EAAK9F,MAAM+F,UAEjE,EAAKkC,aAAe,SAAAb,GAChB,EAAKtG,SAAS,CAAEgH,WAAYV,KAGhC,EAAKc,cAAgB,SAAArH,GACjB,EAAKC,SAAS,CAAEgF,SAAUjF,KAG9B,EAAKsH,eAAiB,SAAAtH,GAClB,EAAKC,SAAS,CAAEiF,UAAWlF,KA7BhB,EADvB,yCAkCI,YAGIgF,EAF4B7E,KAAKhB,MAAzB6F,qBAnChB,+CAwCI,yGACgF7E,KAAKhB,MAAzE6F,EADZ,EACYA,gBAAiB1F,EAD7B,EAC6BA,aAAcc,EAD3C,EAC2CA,cAAemH,EAD1D,EAC0DA,kBAC9CL,EAAc/G,KAAKL,MAAnBoH,UACS,GAHrB,SAOYM,EADAN,EACa/G,KAAKsH,QAAQnI,GAEba,KAAKuH,SAASpI,GATvC,SAY4Bc,EAAcd,EAAae,GAAImH,GAZ3D,eAcYD,EAAkBjI,EAAae,IAGnC2E,IAjBR,4GAxCJ,kEA+DI,SAAQ1F,GACJ,MAAsDa,KAAKL,MAAnDmH,EAAR,EAAQA,WAAYhC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,UAAWO,EAAzC,EAAyCA,SAErCkC,EAActE,EAAAA,EAAAA,iBAAqC4D,EAAYhC,EAAUC,EAAWO,GAExF,OAAOpC,EAAAA,EAAAA,iBAAqCsE,EAAarI,KApEjE,sBAuEI,SAASA,GACL,MAAsDa,KAAKL,MAAnDmH,EAAR,EAAQA,WAAYhC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,UAAWO,EAAzC,EAAyCA,SAErCmC,EAAiBvE,EAAAA,EAAAA,oBACjB4D,EAAY9G,KAAKhB,MAAM8F,SAAUA,EAAU9E,KAAKhB,MAAM+F,UAAWA,EAAWO,GAEhF,OAAOpC,EAAAA,EAAAA,kBAAsCuE,EAAgBtI,EAAcmG,KA7EnF,oCAgFI,WACI,MAAmCtF,KAAKL,MAAhCmH,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,WAEpB,OAAO,kBAAC,EAAAU,SAAD,CACH,2BAAyB,eACzB,yBAAuB,oBACvB/G,UAAU,oBACV,aAAW,8BACXG,MAAM,qBACNZ,GAAG,aACHyH,KAAK,aACLpG,SAAWvB,KAAKiH,aAChBW,UAAYd,EACZzD,WAAayD,GAAcE,MA7FvC,6BAwGI,WACI,IAAQa,EAAgB7H,KAAKhB,MAArB6I,YACR,EAAiC7H,KAAKL,MAA9BmF,EAAR,EAAQA,SAAUgC,EAAlB,EAAkBA,WAElB,OACI,yBAAKnG,UAAU,cACX,kBAAC,EAAAE,UAAD,CACIC,MAAQgG,EAAa,gBAAkB,YACvC/F,YAAU,EACVE,kBAAoBX,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAYA,EAAY3G,OAAS,KACvGC,UAAYb,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAY,QAAU,KACpF7G,QAAQ,YACRI,WAAapB,KAAKV,eAElB,kBAAC,EAAA+B,UAAD,CACI,2BAAyB,gBACzB,yBAAuB,kBACvBxB,MAAQiF,EACRxD,KAAK,OACLwG,YAAY,OACZvG,SAAWvB,KAAKkH,cAChB/F,UAAYb,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAYnH,EAAAA,iBAAAA,MAAyB,KACnG,aAAW,kBA9HnC,8BAqII,WACI,IAAQmH,EAAgB7H,KAAKhB,MAArB6I,YACA9C,EAAc/E,KAAKL,MAAnBoF,UAER,OACI,yBAAKpE,UAAU,cACX,kBAAC,EAAAE,UAAD,CACIC,MAAM,QACNC,YAAU,EACVE,kBAAoBX,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAYA,EAAY3G,OAAS,KACvGC,UAAYb,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAY,QAAU,KACpF7G,QAAQ,aACRI,WAAapB,KAAKV,eAElB,kBAAC,EAAA+B,UAAD,CACI,2BAAyB,gBACzB,yBAAuB,cACvBxB,MAAQkF,EACRzD,KAAK,OACLwG,YAAY,QACZvG,SAAWvB,KAAKmH,eAChBhG,UAAYb,OAAOC,UAAUC,eAAeC,KAAKoH,EAAa,UAAYnH,EAAAA,iBAAAA,MAAyB,KACnG,aAAW,cA3JnC,6BAkKI,WACI,IAAQqH,EAAc/H,KAAKhB,MAAnB+I,UACR,EAAkC/H,KAAKL,MAA/BoH,EAAR,EAAQA,UAAWD,EAAnB,EAAmBA,WAYnB,OARI,kBAAC,aAAD,KACOC,IAAcgB,GAAcjB,EAAa9G,KAAK2G,yBAA2B,KAC5E,kBAAC,EAAA/F,KAAD,KACMZ,KAAK4G,kBACLE,EAAa,KAAO9G,KAAK6G,uBA5K/C,mBAmLI,WACI,IAAQkB,EAAc/H,KAAKhB,MAAnB+I,UACR,EAA8C/H,KAAKL,MAA3CoH,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYF,EAA/B,EAA+BA,WAC3BlF,EAAQ,WAcZ,OAZmB,IAAfoF,GAAwBF,GAAeiB,GAElB,IAAdhB,IAAqC,IAAfD,EAC7BlF,EAAQ,gBACa,IAAdmF,IAAoC,IAAdgB,EAC7BnG,EAAQ,gBACc,IAAfoF,IAAqC,IAAde,EAC9BnG,EAAQ,iBACc,IAAfkF,IACPlF,EAAQ,iBARRA,EAAQ,YAWLA,IApMf,oBAuMI,WACI,IAAQoG,EAAoBhI,KAAKhB,MAAzBgJ,gBAER,OACI,kBAAC,EAAAvG,MAAD,CACId,UAAU,QACVsB,OAAO,iBACPP,QAAUC,EAAAA,aAAAA,MACVC,MAAQ5B,KAAK4B,QACbC,OAASmG,EACTlG,QAAU9B,KAAK0G,WACf3E,QAAU,CACN,kBAAC,EAAAC,OAAD,CACIxC,IAAI,UACJkC,QAAQ,UACRO,OAAO,yBACPC,QAAUlC,KAAKN,cAJnB,QAOA,kBAAC,EAAAsC,OAAD,CACIxC,IAAI,SACJkC,QAAQ,OACRO,OAAO,2BACPC,QAAUlC,KAAK0G,YAJnB,YASF1G,KAAKmC,uBAnOvB,GAA+BC,EAAAA,WAyO/BqE,EAAUpE,UAAY,CAClBwC,gBAAiBvC,IAAAA,KACjB0F,gBAAiB1F,IAAAA,KACjBwC,SAAUxC,IAAAA,OACVyC,UAAWzC,IAAAA,OACXgD,SAAUhD,IAAAA,OACVwE,WAAYxE,IAAAA,KACZyF,UAAWzF,IAAAA,KACXnD,aAAcmD,IAAAA,OACdrC,cAAeqC,IAAAA,KACf8E,kBAAmB9E,IAAAA,KACnBuF,YAAavF,IAAAA,QAwBjB,SAAeC,EAAAA,EAAAA,UArBf,SAAyB5C,GACrB,MAAO,CACHqI,gBAAiBrI,EAAM8E,kBAAkBuD,gBACzClD,SAAUnF,EAAM8E,kBAAkBK,SAClCC,UAAWpF,EAAM8E,kBAAkBM,UACnCO,SAAU3F,EAAM8E,kBAAkBa,SAClCwB,WAAYnH,EAAM8E,kBAAkBqC,WACpCiB,UAAWpI,EAAM8E,kBAAkBsD,UACnC5I,aAAcQ,EAAM8E,kBAAkBtF,aACtC0I,YAAalI,EAAM8E,kBAAkBoD,gBAI7C,SAA4BrF,GACxB,MAAO,CACHqC,gBAAiB,kBAAMrC,EAASG,EAAAA,EAAAA,oBAChC1C,cAAe,SAACwC,EAAYC,GAAb,OAAiCF,EAASG,EAAAA,EAAAA,cAAkCF,EAAYC,KACvG0E,kBAAmB,SAACa,GAAD,OAAkBzF,EAASG,EAAAA,EAAAA,kBAAsCsF,QAI5F,CAA4DxB,G,8BCpQtDyB,EAAAA,SAAAA,I,2bACF,WAAYlJ,GAAO,6BACf,cAAMA,IAgBVmJ,mBAAqB,YAGjBC,EAF2B,EAAKpJ,MAAxBoJ,kBAGR,EAAKC,mBArBU,EAuEnB/B,SAAW,SAACgC,EAAY/I,GACpB,IAEI+F,EAFJ,EAA8C,EAAKtG,MAA3C4D,EAAR,EAAQA,sBAAuB2F,EAA/B,EAA+BA,WAC3BzF,EAAQ,GAER5C,EAAKsI,OAAOjJ,EAAMkJ,OAAOd,MAE7B/E,EAAsBG,SAAQ,SAASC,GAC/BA,EAAK0F,EAAAA,MAAaxI,EAClBoF,EAAWtC,EACJE,EAAAA,EAAAA,WAA+BF,IACtCE,EAAAA,EAAAA,iBAAqCF,GAAMD,SAAQ,SAASI,GACpDA,EAAQuF,EAAAA,MAAaxI,IACrBoF,EAAWnC,SAM3BL,EAAQ,CAAEwC,EAAS,IAEfpC,EAAAA,EAAAA,WAA+BoC,IAC/BpC,EAAAA,EAAAA,iBAAqCoC,GAAUvC,SAAQ,SAASI,GAC5DL,EAAM6F,KAAKxF,EAAQuF,EAAAA,QAI3BH,EAAWzF,EAAOwF,IAjGH,EAoGnB5C,aAAe,SAAC4C,GACZ,MAA8C,EAAKtJ,MAA3C4D,EAAR,EAAQA,sBAAuB2F,EAA/B,EAA+BA,WAC3BzF,EAAQ,GAEZF,EAAsBG,SAAQ,SAASC,GACnCF,EAAM6F,KAAK3F,EAAK0F,EAAAA,KACZxF,EAAAA,EAAAA,WAA+BF,IAC/BE,EAAAA,EAAAA,iBAAqCF,GAAMD,SAAQ,SAASI,GACxDL,EAAM6F,KAAKxF,EAAQuF,EAAAA,WAK/BH,EAAWzF,EAAOwF,IAjHH,EAoHnBM,eAAiB,SAAC5F,GACd,IAAI9C,EAQJ,OANIgD,EAAAA,EAAAA,WAA+BF,GAC/B9C,EAAK,YAAc8C,EAAK0F,EAAAA,IACY,iBAAtB1F,EAAK6F,EAAAA,MACnB3I,EAAK,QAAU8C,EAAK0F,EAAAA,KAIpB,kBAAC,EAAAhB,SAAD,CACI,2BAAyB,eACzB,yBAAyB,YAAc1E,EAAK8F,EAAAA,IAC5ClB,UAAY5E,EAAKC,SACjB1B,SAAW,EAAK+E,SAChBpG,GAAKA,EACLyH,KAAO3E,EAAK0F,EAAAA,OAjIpB,EAAK/I,MAAQ,CACT6B,aAAa,EACbuH,aAAc,CAAE,qEACZ,0DACA,IAEJC,eAAgB,CACZ,CAAEpH,MAAO,OAAQqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,MACzC,CAAEtH,MAAO,QAASqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,MAC1C,CAAEtH,MAAO,GAAIqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,OAZ9B,E,8CAwBnB,SAAgBhE,GACZ,OACI,wBACI1F,IAAI,6BACJ,2BAAyB,qBACzB,yBAAuB,kCACrB0F,EAAiB,6BAAY,KAC/B,wBAAIvE,UAAU,wBAAuB,sCACrC,wBAAIA,UAAU,wBAAuB,uCACrC,gC,+BAKZ,WACI,IAAQqI,EAAmBhJ,KAAKL,MAAxBqJ,eAER,OAAO,kBAAC,EAAAG,cAAD,CACHC,QAAUJ,EACVK,QAAU,EACV/C,UAAW,EACXgD,cAAe,EACfC,cAAe,M,uCAIvB,SAA0BzE,GAAU,WAkBhC,OAjByB9E,KAAKhB,MAAtBwK,aAGSC,SAAS3E,GACT,kBAAC,EAAA4E,cAAD,CACT/I,UAAU,sBACV,2BAAyB,aACzB,yBAAyB,0BAA4BmE,EACrD5C,QAAU,kBAAM,EAAKlD,MAAM2K,UAAU7E,MAE5B,kBAAC,EAAA8E,eAAD,CACTjJ,UAAU,UACV,2BAAyB,aACzB,yBAAyB,0BAA4BmE,EACrD5C,QAAU,kBAAM,EAAKlD,MAAM2K,UAAU7E,Q,2BAwEjD,SAAc9B,EAAMkC,GAAgB,WAChC,EAAuClF,KAAKhB,MAApCwK,EAAR,EAAQA,aAAcrK,EAAtB,EAAsBA,aAClB0K,EAAM,GACNC,EAAO,GAEPxE,EAAWnG,EAAa4K,eAAeC,MAAK,SAACC,GAC7C,GAAIA,EAAatC,OAAS3E,EAAK8F,EAAAA,IAAY,CACvC,GAAImB,EAAapK,OAASmD,EAAK6F,EAAAA,MAAgBoB,EAAapK,MACxD,OAAOmD,EACJ,GAAIiH,EAAaC,QAAUC,MAAMC,QAAQpH,EAAK6F,EAAAA,KACjD,OAAO7F,MA2DnB,OAtDAkC,GACM2E,EAAIlB,KAAK,wBACPhI,UAAY6I,EAAaC,SAASzG,EAAK8F,EAAAA,MAAeqB,MAAMC,QAAQpH,EAAK,IACnE,gCACA,qBAEJhD,KAAK4I,eAAe5F,KAI1BE,EAAAA,EAAAA,WAA+BF,IAC/B6G,EAAIlB,KAAK,4BACH3I,KAAKqK,0BAA0BrH,EAAK8F,EAAAA,KADjC,IACiD9F,EAAK8F,EAAAA,MAC/De,EAAIlB,KAAK,8BACTkB,EAAIlB,KAAKzF,EAAAA,EAAAA,YAAgC,CAAE4B,SAAU9B,EAAK8F,EAAAA,IAAYxD,SAAAA,EAAUwB,YAAY,EAAM5B,eAAAA,KAClG4E,EAAKnB,KAAK,wBACN,2BAAyB,eACzB,yBAAyB,4BAA6BrD,MAAAA,OAA7B,EAA6BA,EAAUqC,MAChEnI,IAAMwD,EAAK8F,EAAAA,KAAee,IAE1BL,EAAaC,SAASzG,EAAK8F,EAAAA,MAC3B5F,EAAAA,EAAAA,iBAAqCF,GAAMD,SAAQ,SAACI,GAChD0G,EAAM,GACN3E,GACM2E,EAAIlB,KAAK,wBAAIhI,UAAU,iCAAkC,EAAKiI,eAAezF,KAEnF0G,EAAIlB,KAAK,4BACL,uBAAGhI,UAAU,aAAcwC,EAAQ2F,EAAAA,OAEvCe,EAAIlB,KAAK,4BAAMxF,EAAQ0F,EAAAA,MACvBgB,EAAIlB,KAAKzF,EAAAA,EAAAA,YAAgC,CACrC4B,SAAU3B,EAAQ2F,EAAAA,IAClB/D,UAAW5B,EAAQ0F,EAAAA,IACnBvD,SAAAA,EACAyC,WAAW,EACX7C,eAAAA,KAEJ4E,EAAKnB,KAAK,wBACN,2BAAyB,eACzB,yBAAyB,2BAA6BxF,EAAQ2F,EAAAA,IAC9DwB,SAAWhF,MAAAA,OAAH,EAAGA,EAAUqC,KACrBnI,IAAM2D,EAAQ2F,EAAAA,KAAee,SAIzCA,EAAIlB,KAAK,4BAAM3F,EAAK8F,EAAAA,MACpBe,EAAIlB,KAAK,4BAAM3F,EAAK6F,EAAAA,MACpBgB,EAAIlB,KAAKzF,EAAAA,EAAAA,YAAgC,CAAE4B,SAAU9B,EAAK8F,EAAAA,IAAY/D,UAAW/B,EAAK6F,EAAAA,IAAavD,SAAAA,EAAUJ,eAAAA,KAC7G4E,EAAKnB,KAAK,wBACN,2BAAyB,eACzB,yBAAyB,4BAA6BrD,MAAAA,OAA7B,EAA6BA,EAAUqC,MAChEnI,IAAMwD,EAAK8F,EAAAA,KAAee,KAG3BC,I,wBAGX,SAAW5E,GACP,IACIpC,EAD8B9C,KAAKhB,MAA/B4D,sBAEJkH,EAAO,GACPS,EAAU,GAEd,GAAqB,IAAjBzH,EAAMiB,OACN,IAAK,IAAIyG,EAAI,EAAGA,EAAI1H,EAAMiB,OAAQyG,GAAK,EACnCD,EAAUvK,KAAKyK,cAAc3H,EAAM0H,GAAItF,GACvC4E,EAAKnB,KAAK4B,GAIlB,OAAOT,I,8BAGX,SAAiB7E,GAAa,WAC1B,EAAsDjF,KAAKhB,MAAnDgG,EAAR,EAAQA,uBAAwB0F,EAAhC,EAAgCA,kBACxB3B,EAAiB/I,KAAKL,MAAtBoJ,aAER,OAAiC,MAA7B2B,EAAkBC,aAA+CxF,IAA7BuF,EAAkBC,OAC/C,kBAACC,EAAA,EAAD,CACHC,KAAOC,EAAAA,sBACPC,MAAM,UACNnJ,MAAQ,+BACRoJ,KAAOjC,EACP3I,MAAQ,SAAWsK,EAAkBC,OAAS,KAAOD,EAAkBxJ,OACvE+J,OAAS,uBAAG/I,QAAU,kBAAM,EAAKiG,uBAC7B,kBAAC,EAAA+C,SAAD,CAAUvK,UAAU,kBADf,WAMN,kBAACiK,EAAA,EAAD,CACHhJ,MAAQ,WACRoJ,KAAO,CAAE,gEACTC,OAAS,kBAAC,EAAD,CACLhG,YAAcA,EACdD,uBAAyBA,Q,yBAMzC,YAAgC,IAAlBE,EAAkB,EAAlBA,eACV,OACI,2BAAOvE,UAAU,4EACb,+BACMX,KAAKmL,gBAAgBjG,IAE3B,2BAAO1F,IAAI,uBACLQ,KAAKoL,WAAWlG,O,oBAMlC,WACI,MAC+ElF,KAAKhB,MAD5EG,EAAR,EAAQA,aAAckM,EAAtB,EAAsBA,oBAAqBzI,EAA3C,EAA2CA,sBAAuB+C,EAAlE,EAAkEA,YAAaqC,EAA/E,EAA+EA,gBAC3EhD,EADJ,EACIA,uBAAwB0F,EAD5B,EAC4BA,kBAAmBtC,EAD/C,EAC+CA,eAAgBnD,EAD/D,EAC+DA,YAC3DhC,EAAWC,EAAAA,EAAAA,aAAiCN,GAEhD,OACI,kBAAC,aAAD,KACMoF,EACI,kBAAC,EAAD,MACA,8BAEN,kBAACsD,EAAA,EAAD,CACIlL,OAAS4E,GAA0B0F,EAAkBC,OAASD,EAAoB,GAClF5I,QAAUsG,IAEZpD,EACIhF,KAAKuL,iBAAiBtG,GACtB,kBAAC,EAAAuG,KAAD,CAAM7K,UAAU,8BACd,kBAAC,EAAA8K,SAAD,KACI,kBAAC,EAAD,CACIxI,SAAWA,EACXyC,aAAe1F,KAAK0F,aACpBrC,WAA8C,IAAjCT,EAAsBmB,SAAiBkB,EAAYC,eAChEW,WAAa3C,EAAAA,EAAAA,cAAkCN,GAC/CzD,aAAeA,EACfwG,YAAcA,EACdC,UAAYhD,EACZqC,YAAcA,IAEhBoG,EACIrL,KAAK0L,oBACL1L,KAAK2L,YAAY1G,U,EA1S7CiD,CAAqB9F,EAAAA,WAoT3B8F,EAAa7F,UAAY,CACrBuJ,QAAStJ,IAAAA,OACTuJ,MAAOvJ,IAAAA,IACPnD,aAAcmD,IAAAA,OACd+I,oBAAqB/I,IAAAA,KACrB0F,gBAAiB1F,IAAAA,KACjBM,sBAAuBN,IAAAA,MACvBqH,UAAWrH,IAAAA,KACXkH,aAAclH,IAAAA,MACdiG,WAAYjG,IAAAA,KACZ8F,eAAgB9F,IAAAA,KAChBoI,kBAAmBpI,IAAAA,OACnB0C,uBAAwB1C,IAAAA,KACxBqD,YAAarD,IAAAA,KACb2C,YAAa3C,IAAAA,QAGjB,U,6tBC1TO,IAAMwJ,IAAevJ,EAAAA,EAAAA,SAAQ,MARpC,SAA4BC,GACxB,MAAO,CACHuJ,qBAAsB,SAACC,GAAD,OAAexJ,EAASyJ,GAAAA,EAAAA,qBAAoCD,KAClFE,kBAAmB,kBAAM1J,EAAS2J,GAAAA,EAAAA,oBAClCC,eAAgB,SAACC,GAAD,OAAc7J,EAAS,CAAElB,KAAM,gBAAiBgL,QAASD,QAIrD9J,EAAkC,YAmBxD,MA6C0C,IA/D5CE,EAkBE,EAlBFA,WACAsJ,EAiBE,EAjBFA,qBACAG,EAgBE,EAhBFA,kBACAK,EAeE,EAfFA,oBACAC,EAcE,EAdFA,mBACAC,EAaE,EAbFA,eACAC,EAYE,EAZFA,uBACAzH,EAWE,EAXFA,YACAmH,EAUE,EAVFA,eACAO,EASE,EATFA,cACAC,EAQE,EARFA,sBACAC,EAOE,EAPFA,cACAC,EAME,EANFA,yBACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,eACAC,EAGE,EAHFA,mBACAC,EAEE,EAFFA,oBACAC,EACE,EADFA,cAEMC,GAAaC,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBF,cACvEG,GAAkBF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBC,mBAC5EC,GAAaH,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBE,cACvEC,GAAWJ,EAAAA,EAAAA,cAAY,qBAAGI,YAC1BxK,GAAWoK,EAAAA,EAAAA,cAAY,gBAAGI,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUC,oBAAqB,MACxEC,GAAcC,EAAAA,EAAAA,SAAO,eACrBC,GAAcD,EAAAA,EAAAA,QAAO,IAErBtH,EAAW,SAAC/G,GACd,IAAI8M,EAAW,GACf,OAAQ9M,GACJ,IAAK,OACD8M,EAAW,CAAEnM,GAAI,EAAG+C,UAAU,EAAO6K,MAAM,GAE3C,MAGJ,IAAK,OACDzB,EAAW,CAAEnM,GAAI,EAAG+C,UAAU,GAMtCmJ,EAAeC,IAiDnB,OAPA0B,EAAAA,EAAAA,YAAU,WACDC,IAAAA,CAAQH,EAAYI,QAAShL,KAC9B4K,EAAYI,SAAZ,OAA2BhL,GAC3B+J,EAAe/J,OAKnBgC,EAAYiJ,cACR,kBAACC,EAAA,EAAD,CACI/E,QAAU+D,EACViB,OAAS,YAAwD,IAArDC,EAAqD,EAArDA,kBAAmBC,EAAkC,EAAlCA,uBAAwBC,EAAU,EAAVA,IACnDZ,EAAYM,QAAUM,MAAAA,OAAtB,EAAsBA,EAAKZ,YAC3BzB,IACAa,EAASyB,SAASH,GACdI,EAAAA,EAAAA,GACIH,EAAwB7L,EAAY8J,EAAqBC,EACzDC,OAAgBtH,EAAW2H,EAA0BJ,EACrDE,EAAuBK,EAAoBC,EAAqBjI,KAGxE8G,EAAqB9I,IAEzByL,UAAQ,EACRC,UAAQ,EACRC,cAAe,CACXC,KAAMzB,EACN0B,OAAQ,CACJC,eAAgB,GAAF,OACPxB,MAAAA,GAAA,UAAAA,EAAiByB,WAAjB,eAAsB1G,aAAc,CAAE2G,YAAY,KAClDzB,MAAAA,OAAA,EAAAA,EAAYzJ,QAAS,GAAK,CAAEmL,SAAU1B,MAIrD2B,WAxEJlK,EAAYmK,mBACL,CACH9F,cAAc,EACdqD,cAAAA,EACA1K,OAAQ,iBAGL,CACHqH,cAAc,EACdqD,cAAAA,EACA1K,OAAQ,gBACRqE,UAAU,GA8DVqH,YAAW,mCAAG,WAAO0B,EAAQC,GAAf,kFACJC,GAAW3C,GAAyB,IACzC4C,OAAOF,EAAOG,KAAO,GAAKH,EAAOI,SAAUJ,EAAOG,KAAOH,EAAOI,UAFvD,mBAGS/B,EAAYM,eAHrB,aAGS,OAAAN,EACf4B,EACA,CACII,UAAU,IAEd,GARM,cAGJC,EAHI,kCAWHA,GAXG,IAYNC,QAASD,EAAKC,QAAQC,KAAI,SAACC,GAAD,gBACnBA,GACAR,EAAQvF,MAAK,qBAAGgG,OAAoBD,EAAO7P,OAAO,OAEzD+P,OAAQrD,GAAyB,IAAI7I,OACrC0L,KAAMH,EAAOG,KACbC,SAAUJ,EAAOI,YAlBX,2CAAH,wDAqBXQ,WAAa5J,GAAY,CACrBjD,YAAaoJ,IAAmBxH,EAAYmK,mBAC5ClJ,MAAOuH,MAAAA,GAAAA,EAAUC,kBAAoBD,EAASC,kBAAkB3J,OAAS,EACzEoC,MAAO,CAAC,CACJvE,MAAO,kBACPM,QAAS,WACLoE,EAAS,UAEd,CACC1E,MAAO,gBAAF,QAAmB6L,MAAAA,OAAA,EAAAA,EAAUvH,QAAS,EAAtC,KACLhE,QAAS,WACLoE,EAAS,WAGjBA,SAAU,SAACzG,GACCyG,EAARzG,EAAiB,OAAmB,SAExCuG,QAASqH,MAAAA,GAAAA,EAAUC,kBACbrH,EAAAA,EAAAA,iBAAyBoH,MAAAA,OAAzB,EAAyBA,EAAUwC,MAAOxC,MAAAA,OAA1C,EAA0CA,EAAUC,kBAAkB3J,QACtE,MAEVoM,cAAe,CACXpO,QAxFRkD,EAAYmK,mBACL,CACHvC,EAbD,yBACHlM,UAAU,UACVnB,IAAI,+BACJ0C,QAAU,kBAAMgL,EAAoBO,MAAAA,OAAD,EAACA,EAAUC,oBAC9CrK,aAAcoK,MAAAA,GAAD,UAACA,EAAUC,yBAAX,OAAC,EAA6B3J,UAEzC0J,MAAAA,GAAA,UAAAA,EAAUC,yBAAV,eAA6B3J,QAAS,EAAI,4BAA8B,6BAWnE,MAsFL,kBAAC6G,EAAA,EAAD,CACEC,KAAOuF,EAAAA,SACPrF,MAAM,UACNnJ,MAAQ,0CACRoJ,KAAO,CAAE,yEAKzBc,GAAazJ,UAAY,CACrB0J,qBAAsBzJ,IAAAA,KACtBoL,kBAAmBpL,IAAAA,MACnBoK,uBAAwBpK,IAAAA,KACxBiK,oBAAqBjK,IAAAA,KACrB4J,kBAAmB5J,IAAAA,KACnBkK,mBAAoBlK,IAAAA,MACpBmK,eAAgBnK,IAAAA,KAChB+N,eAAgB/N,IAAAA,MAChB2C,YAAa3C,IAAAA,OACbmL,SAAUnL,IAAAA,OACV8J,eAAgB9J,IAAAA,KAChBqK,cAAerK,IAAAA,OACfsK,sBAAuBtK,IAAAA,MACvBG,WAAYH,IAAAA,OACZgO,gBAAiBhO,IAAAA,MACjBwK,yBAA0BxK,IAAAA,KAC1ByK,SAAUzK,IAAAA,MAAgB,CACtBkM,SAAUlM,IAAAA,OAEd0K,eAAgB1K,IAAAA,KAChB6K,cAAe7K,IAAAA,OAGnBwJ,GAAayE,aAAe,CACxB7C,kBAAmB,IAgBvB,SAbgC,SAAC1O,GAC7B,OAAkCwR,EAAAA,EAAAA,YAAlC,eAAQzD,EAAR,KAAkB0D,EAAlB,KACMC,GAAW9C,EAAAA,EAAAA,UAMjB,OAJAG,EAAAA,EAAAA,YAAU,WACN2C,EAASzC,QAAU,IAAI0C,EAAAA,EACvBF,GAAY,kBAAM,IAAIG,EAAAA,GAAgB,GAAI,CAAEF,EAASzC,QAAQ4C,iBAAiBC,EAAAA,EAAAA,aAC/E,IACI/D,MAAAA,GAAAA,EAAUgE,MAAQ,kBAAC,EAAAC,SAAD,CAAUD,MAAQhE,EAASgE,OAChD,kBAACjF,IAAD,UAAmB9M,EAAnB,CAA2B+N,SAAWA,EAAWkE,eAAiB,wBAAa,EAAAP,EAASzC,SAAQiD,OAAjB,wBACrE,M,gBC7OX,IAAMC,GAAb,6B,IAAA,G,EAAA,E,gaACI,WAAYnS,GAAO,6BACf,cAAMA,IAIVoS,oBALmB,iBAKE,uGAC0F,EAAKpS,MAAxGyD,EADS,EACTA,WAAYyK,EADH,EACGA,oBAAqBmE,EADxB,EACwBA,aAAcC,EADtC,EACsCA,gBAAiBC,EADvD,EACuDA,+BADvD,SAGXrE,EAAoBzK,EAAY6O,GAHrB,OAIjBD,EAAa5O,GACb8O,IALiB,2CALF,EADvB,qCAeI,WACI,MAA4FvR,KAAKhB,MAAzFwS,EAAR,EAAQA,+BAAgCF,EAAxC,EAAwCA,gBAAiBC,EAAzD,EAAyDA,+BAEzD,OACI,kBAAC,aAAD,KACI,kBAAC,EAAA9P,MAAD,CACId,UAAU,QACVsB,OAAO,qCACPP,QAAUC,EAAAA,aAAAA,MACVC,MAAoC,KAA5B0P,MAAAA,OAAA,EAAAA,EAAiBvN,QAAe,2BAA6B,4BACrElC,OAAS2P,EACT1P,QAAU,kBAAMyP,KAChBxP,QAAY,CACR,kBAAC,EAAAC,OAAD,CACIxC,IAAI,UACJyC,OAAO,sCACPP,QAAQ,SACRQ,QAAUlC,KAAKoR,oBAJnB,UAQA,kBAAC,EAAApP,OAAD,CACIxC,IAAI,SACJyC,OAAO,6CACPP,QAAQ,OACRQ,QAAU,kBAAMqP,MAJpB,YAhBR,qBA0BwB,IA1BxB,IA0B4D,KAA5BD,MAAAA,OAAA,EAAAA,EAAiBvN,QAAe,uBAAyB,8BACnF,IA3BN,kBA4BI,6BACE,yBAAKpD,UAAU,kBAAf,yDAjDtB,GAA6CyB,EAAAA,WAwD7C+O,GAAwB9O,UAAY,CAChCI,WAAYH,IAAAA,OACZkP,+BAAgClP,IAAAA,KAChC4K,oBAAqB5K,IAAAA,KACrB+O,aAAc/O,IAAAA,KACdgP,gBAAiBhP,IAAAA,MACjBiP,+BAAgCjP,IAAAA,MAGpC,Y,4BCjCA,SAlCA,WACI,MAAO,CACHhB,KAAMmQ,GAAAA,EAAAA,mCAgCd,GA5BA,SAA4BzF,GACxB,MAAO,CACH1K,KAAMmQ,GAAAA,EAAAA,sBACNnF,QAASN,IAyBjB,GArBA,SAA6BvJ,EAAYuJ,GACrC,MAAO,CACH1K,KAAMmQ,GAAAA,EAAAA,qBACNnF,QAASiC,GAAAA,EAAAA,0BAA8B9L,EAAYuJ,KAkB3D,GAdA,SAA0BvJ,GACtB,MAAO,CACHnB,KAAMmQ,GAAAA,EAAAA,kBACNnF,QAASiC,GAAAA,EAAAA,wBAA4B9L,KAW7C,GAPA,SAA0BA,EAAYiP,GAClC,MAAO,CACHpQ,KAAMmQ,GAAAA,EAAAA,kBACNnF,QAASiC,GAAAA,EAAAA,sBAA0B9L,EAAYiP,KCvBhD,IAAMC,GAAb,+B,IAAA,G,EAAA,E,gaACI,WAAY3S,GAAO,6BACf,cAAMA,IAgBV4S,mBAAqB,SAAC9E,GAClB,IACI1D,EAAU,CACV,CAAE5J,IAAK,eAAgBR,MAAO,CAAE6S,MAAO/E,EAA2B,GAAK,MAAQlL,MAAO,QACtF,CAAEpC,IAAK,OAAQR,MAAO,CAAE6S,MAAO/E,EAA2B,GAAK,KAAMgF,UAAU,GAAQlQ,MAAO,QAC9F,CAAEpC,IAAK,UAAWR,MAAO,CAAE6S,MAAO/E,EAA2B,GAAK,MAAQlL,MAAO,cAarF,OAjBwB,EAAK5C,MAArBiG,YAOQmK,qBAAuBtC,GACnC1D,EAAQT,KAAK,CACTnJ,IAAK,sBACLoC,MAAO,GACP5C,MAAO,CACH8S,UAAU,KAKf1I,GAnCQ,EAsCnB8D,oBAtCmB,mCAsCG,WAAOlB,GAAP,2EAC6C,EAAKhN,MAA5D+S,EADU,EACVA,oBAAoBR,EADV,EACUA,kCAG5BQ,EAAmB/F,GAJD,2CAtCH,wDA6CnBiB,mBAAqB,SAACjB,GAClB,IAAQY,EAA0B,EAAK5N,MAA/B4N,sBACJoF,GAAQ,OAAKpF,GAEXqF,EAASjG,EAAU8C,QAAO,SAACoD,GAAD,OAAYF,EAAMG,MAAK,SAACC,GAAD,OAAgBA,IAAeF,QAEtF,EAAKpS,SAAS,CAAE4R,aAAcO,KAnDf,EAsDnBI,iBAtDmB,iBAsDD,iGACNX,EAAiB,EAAK/R,MAAtB+R,aADM,EAE2B,EAAK1S,MAAtCsT,EAFM,EAENA,iBAAkB7P,EAFZ,EAEYA,WAFZ,SAIR6P,EAAiB7P,EAAYiP,GAJrB,OAKd,EAAK5R,SAAS,CAAE4R,aAAc,KAE9B,EAAKzN,cACL,EAAKoN,aAAa5O,GARJ,2CAtDC,EAiEnB8P,yBAA2B,WACvB,OAAO,kBAAC,EAAAvQ,OAAD,CACHxC,IAAI,4BACJkC,QAAQ,UACRQ,QAAU,EAAK+B,YACfhC,OAAO,oCAJJ,0BAlEQ,EA4EnBoP,aA5EmB,mCA4EJ,WAAO5O,GAAP,kEACH+P,EAAqB,EAAKxT,MAA1BwT,kBAES/P,GAHN,2CA5EI,sDAGf,EAAK9C,MAAQ,CACT6B,aAAa,EACbkQ,aAAc,IAGlB,EAAKzN,YAAc,WACf,IAAQ8H,EAAyB,EAAK/M,MAA9B+M,qBACAvK,EAAgB,EAAK7B,MAArB6B,YAERuK,EAAqB,IACrB,EAAKjM,SAAS,CAAE0B,aAAcA,KAbnB,EADvB,qEAmFI,8FACUxB,KAAKqR,aAAarR,KAAKhB,MAAMyD,YADvC,gDAnFJ,iEAuFI,WACI,MAEkFzC,KAAKhB,MAF/EyD,EAAR,EAAQA,WAAY7C,EAApB,EAAoBA,aAAcsN,EAAlC,EAAkCA,oBAAqBsE,EAAvD,EAAuDA,+BAAgCtF,EAAvF,EAAuFA,kBAAmBuB,EAA1G,EAA0GA,SACtGxI,EADJ,EACIA,YAAamH,EADjB,EACiBA,eAAgBM,EADjC,EACiCA,uBAAwBX,EADzD,EACyDA,qBAAsBa,EAD/E,EAC+EA,sBAC3E0E,EAFJ,EAEIA,gBAAiBC,EAFrB,EAEqBA,+BAAgCkB,EAFrD,EAEqDA,yBAC7CjR,EAAgBxB,KAAKL,MAArB6B,YAER,OACI,kBAAC,aAAD,KACI,kBAAC,GAAD,CACIiB,WAAaA,EACbyK,oBAAsBA,EACtBsE,+BAAiCA,EACjCF,gBAAkBA,EAClBC,+BAAiCA,EACjCF,aAAerR,KAAKqR,eAExB,kBAAC,EAAA5P,MAAD,CACId,UAAU,QACVsB,OAAO,kCACPP,QAAUC,EAAAA,aAAAA,OACVC,MAAQ,yBAA2BhC,EACnCiC,OAASL,EACTM,QAAU9B,KAAKiE,YACflC,QAAY,CACR,kBAAC,EAAAC,OAAD,CACIxC,IAAI,UACJyC,OAAO,mCACPP,QAAQ,UACRQ,QAAUlC,KAAKqS,iBAJnB,UAQA,kBAAC,EAAArQ,OAAD,CACIxC,IAAI,SACJyC,OAAO,0CACPP,QAAQ,OACRQ,QAAUlC,KAAKiE,aAJnB,YAUJ,kBAAC,KAAD,CACIwI,gBAAiB,EACjBxH,YAAcA,EACdwI,SAAWA,EACXd,cAAc,WACdC,sBAAwBA,EACxBnK,WAAaA,EACbqK,0BAA2B,EAC3BZ,kBAAoBA,EACpBE,eAAiBA,EACjBM,uBAAyBA,EACzBO,mBAAqBjN,KAAKiN,mBAC1BS,mBAAoBD,MAAAA,OAAA,EAAAA,EAAUC,oBAAqB,GACnDP,cAAgBnN,KAAK4R,oBAAmB,MAG9Ca,EAA2B,kBAACC,GAAD,CACzBjG,gBAAiB,EACjBxH,YAAcA,EACd0H,cAAc,WACdC,sBAAwBA,EACxBnK,WAAaA,EACboK,cAAgB7M,KAAKuS,2BACrBrG,kBAAoBA,EACpBE,eAAiBA,EACjBM,uBAAyBA,EACzBM,eAAiBjB,EACjBmB,oBAAsBlN,KAAKkN,oBAC3BC,cAAgBnN,KAAK4R,uBACpB,kBAAC,EAAAe,SAAD,KAAU,kBAAC,EAAAC,QAAD,CAASC,KAAK,aA9J7C,GAAwCzQ,EAAAA,WAoKxCuP,GAAmBtP,UAAY,CAC3BiQ,iBAAkBhQ,IAAAA,KAClBG,WAAYH,IAAAA,OACZ1C,aAAc0C,IAAAA,OACdmL,SAAUnL,IAAAA,OACV2C,YAAa3C,IAAAA,OACboK,uBAAwBpK,IAAAA,KACxByJ,qBAAsBzJ,IAAAA,KACtB4J,kBAAmB5J,IAAAA,KACnB8J,eAAgB9J,IAAAA,KAChBiP,+BAAgCjP,IAAAA,KAChCyP,mBAAoBzP,IAAAA,KACpBgP,gBAAiBhP,IAAAA,MACjB4K,oBAAqB5K,IAAAA,KACrBkP,+BAAgClP,IAAAA,KAChCkQ,iBAAkBlQ,IAAAA,KAClBwQ,gBAAiBxQ,IAAAA,KACjBsK,sBAAuBtK,IAAAA,MACvBmQ,yBAA0BnQ,IAAAA,MAuB9B,UAAeC,EAAAA,EAAAA,UApBf,SAAyB5C,GACrB,MAAO,CACH6R,+BAAgC7R,EAAMoT,yBAAyBvB,+BAC/D5E,sBAAuBjN,EAAMoT,yBAAyBnG,sBACtD6F,yBAA0B9S,EAAMoT,yBAAyBN,yBACzDnB,gBAAiB3R,EAAMoT,yBAAyBzB,oBAIxD,SAA4B9O,GACxB,MAAO,CACH8P,iBAAkB,SAAC7P,EAAYiP,GAAb,OAA8BlP,EAASwQ,GAA4CvQ,EAAYiP,KACjHH,+BAAgC,kBAAM/O,EAASwQ,OAC/CjB,mBAAoB,SAAC/F,GAAD,OAAexJ,EAASwQ,GAA8ChH,KAC1FkB,oBAAqB,SAACzK,EAAYuJ,GAAb,OAA2BxJ,EAASwQ,GAA+CvQ,EAAYuJ,KACpHwG,iBAAkB,SAAC/P,GAAD,OAAgBD,EAASwQ,GAA4CvQ,KACvFsJ,qBAAsB,SAACC,GAAD,OAAexJ,EAAS,CAAElB,KAAM,0BAA2BgL,QAASN,QAIlG,CAA4D2F,I,wCC/LrD,IAAMsB,GAAb,iC,IAAA,G,EAAA,E,gaACI,WAAYjU,GAAO,6BACf,cAAMA,IA2CVkU,gBAAkB,SAAC3T,EAAO4T,GACtB,EAAKrT,SAAS,CAAEsT,UAAWD,KA7CZ,EA8DnBhL,mBAAqB,YAGjBC,EAF2B,EAAKpJ,MAAxBoJ,kBAGR,EAAKC,mBAlEU,EAsHnBgL,iBAAmB,YAA0D,IAAvDC,EAAuD,EAAvDA,cAAepO,EAAwC,EAAxCA,eAAgBqO,EAAwB,EAAxBA,kBACzC/R,EAAgB,EAAK7B,MAArB6B,YACR,EAA2D,EAAKxC,MAAxDG,EAAR,EAAQA,aAAckM,EAAtB,EAAsBA,oBAAqBxD,EAA3C,EAA2CA,YAmC3C,OAhCIwD,EACa,kBAAC,EAAAmI,WAAD,KACT,6BAAK,kBAAC,EAAAC,SAAD,CAAUZ,KAAOa,EAAAA,aAAAA,YAGLvO,IAAjBhG,EACa,kBAAC,aAAD,KACT,kBAAC,EAAD,CACIA,aAAeA,EACfqC,YAAcA,EACdtC,oBAAsB,EAAKA,oBAC3BkB,MAAQyH,IAEZ,kBAAC,EAAA2L,WAAD,CAAY7S,UAAY4S,EAAoB,mBAAqB,IAC3D,EAAKI,iBAAiBxU,EAAcmU,GACtC,yBAAKpT,GAAG,uBACF,EAAK0T,gBAAgBzU,EAAcmU,EAAepO,IAEtDqO,EACI,EAAKM,aACL,OAKD,kBAAC,EAAAL,WAAD,KACP,EAAKG,mBACP,kBAAC,EAAAG,gBAAD,CAAiBlS,MAAM,eAnJnC,EAAKjC,MAAQ,CACT6B,aAAa,EACbuH,aAAc,CAAE,qEACZ,0DACA,IAEJC,eAAgB,CACZ,CAAEpH,MAAO,OAAQqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,MACzC,CAAEtH,MAAO,QAASqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,MAC1C,CAAEtH,MAAO,GAAIqH,WAAY,EAAEC,EAAAA,EAAAA,WAAU,MAEzCkK,UAAW,GAGf,EAAK/K,kBACL,EAAKsL,iBAAmB,EAAKA,iBAAiB5T,MAAtB,WACxB,EAAKgU,kBAAoB,EAAKA,kBAAkBhU,MAAvB,WAEzB,EAAKb,oBAAsB,WACvB,IAAQsC,EAAgB,EAAK7B,MAArB6B,YACA4G,EAAmB,EAAKpJ,MAAxBoJ,eAER,EAAKtI,SAAS,CAAE0B,aAAcA,IAC9B4G,KA1BW,EADvB,qEA+BI,qGACqB4L,EAAYhU,KAAKhB,MAA1B6M,MAASmI,OADrB,SAGUC,OAAOC,SAASC,OAAOC,KAAKC,UAHtC,iCAIUJ,OAAOC,gBAJjB,iBAIU,EAAiBC,cAJ3B,iBAIU,EAAyBG,iBAJnC,aAIU,SAAqC,iBAJ/C,iCAKUL,OAAOC,gBALjB,iBAKU,EAAiBC,cAL3B,aAKU,EAAyBI,YAAYP,EAAO9T,IALtD,gDA/BJ,6EAuCI,WACQF,KAAKhB,MAAMG,eACXqV,SAAS5S,MAAQ5B,KAAKhB,MAAMG,aAAaE,aAAe,6CAzCpE,kDAiDI,iGACqDW,KAAKhB,MAArCgV,EADrB,EACYnI,MAASmI,OAAU5M,EAD/B,EAC+BA,kBAD/B,SAGUA,EAAkB4M,EAAO9T,IAHnC,gDAjDJ,4EAuDI,WACI,MAAuDF,KAAKhB,MAApDyV,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,eAAgB9I,EAA3C,EAA2CA,QAE3C6I,EAAkB,YAClBC,EAAe,YACf9I,EAAQjD,KAAK,gBA5DrB,8BAsEI,SAAiBxJ,EAAcmU,GAAe,WAmB1C,OAfa,kBAAC,EAAAqB,WAAD,CAAY1S,OAAO,4BAC5B,kBAAC,EAAA2S,eAAD,KACI,uBAAG1S,QAAU,kBAAM,EAAK6R,sBAAxB,cAIF5U,GAAgBmU,EACZ,kBAAC,EAAAuB,kBAAD,KACI1V,EAAaE,cAEjB,QApFlB,6BA4FI,SAAgBF,EAAcmU,EAAepO,GAAgB,WAwBzD,OArBIoO,EACIpO,EACY,kBAAC,aAAD,KACR,0BAAMvE,UAAU,uBACT,IAAUxB,GAA4C,KAA5BA,EAAaE,cAE9C,8BACM,kBAAC,EAAAyV,YAAD,CACEnU,UAAU,sCACV,yBAAuB,4BACvB,2BAAyB,aACzBuB,QAAU,kBAAM,EAAKhD,2BAIrB,kBAAC,aAAD,KAAmB,IAAUC,GAA4C,KAA5BA,EAAaE,cAG9D,kBAAC,aAAD,KAAkB,cAjH1C,wBA+JI,WACI,IAAQ+T,EAAcpT,KAAKL,MAAnByT,UAER,OAAO,6BACH,kBAAC,EAAA2B,KAAD,CACIC,UAAY5B,EACZ9M,SAAWtG,KAAKkT,iBAEhB,kBAAC,EAAA+B,IAAD,CACIC,SAAW,EACXtT,MAAM,QACN1B,GAAG,eACH,yBAAuB,wBAG3B,kBAAC,EAAA+U,IAAD,CACIC,SAAW,EACXtT,MAAM,qBACN1B,GAAG,2BACH,yBAAuB,SAlL3C,wBAyLI,SAAW+E,GACP,MAEwFjF,KAAKhB,MAFrFG,EAAR,EAAQA,aAAckM,EAAtB,EAAsBA,oBAAqBjD,EAA3C,EAA2CA,eAAgB8D,EAA3D,EAA2DA,kBAAmBlH,EAA9E,EAA8EA,uBAAwB0F,EAAtG,EAAsGA,kBAClG9H,EADJ,EACIA,sBAAuB6K,EAD3B,EAC2BA,SAAU9D,EADrC,EACqCA,UAAWH,EADhD,EACgDA,aAAc7D,EAD9D,EAC8DA,YAAaqC,EAD3E,EAC2EA,gBAAiBO,EAD5F,EAC4FA,WAC/EyL,EAFb,EAEInI,MAASmI,OAAU5H,EAFvB,EAEuBA,eAAgBM,EAFvC,EAEuCA,uBAAwBX,EAF/D,EAE+DA,qBAiC/D,OA7BkB,IAHI/L,KAAKL,MAAnByT,UAIG,kBAAC,EAAD,CACHjU,aAAeA,EACfkM,oBAAsBA,EACtBjD,eAAiBA,EACjBpD,uBAAyBA,EACzB0F,kBAAoBA,EACpB9H,sBAAwBA,EACxB+G,UAAYA,EACZH,aAAeA,EACf7D,YAAcA,EACdqC,gBAAkBA,EAClB/C,YAAcA,EACd2G,QACArD,WAAaA,IAGV,kBAAC,GAAD,CACH9F,WAAauR,EAAO9T,GACpBN,aAAeT,MAAAA,OAAH,EAAGA,EAAcE,aAC7B4F,YAAcA,EACdwI,SAAWA,EACXvB,kBAAoBA,EACpBE,eAAiBA,EACjBM,uBAAyBA,EACzBX,qBAAuBA,MAzNvC,oBAiOI,WAAS,WACL,OACI,kBAAC,cAAD,MACM,SAAAlM,GAAK,OACH,kBAAC,aAAD,KACM,EAAKwT,iBAAiBxT,EAAMoF,aAC9B,kBAAC,EAAAkQ,KAAD,MAC0C,IAApCtV,EAAMoF,YAAYqO,cACd,kBAAC1I,EAAA,EAAD,CACEC,KAAOuF,EAAAA,SACPrF,MAAM,UACNnJ,MAAQ,+CACRoJ,KAAO,CAAE,sEAEX,EAAKoK,WAAWvV,EAAMoF,sBA/OxD,GAAsC7C,EAAAA,WA0PtC6Q,GAAiB5Q,UAAY,CACzBuJ,QAAStJ,IAAAA,OACTuJ,MAAOvJ,IAAAA,IACPmS,kBAAmBnS,IAAAA,KACnBnD,aAAcmD,IAAAA,OACd+I,oBAAqB/I,IAAAA,KACrB8E,kBAAmB9E,IAAAA,KACnB0F,gBAAiB1F,IAAAA,KACjBM,sBAAuBN,IAAAA,MACvBqH,UAAWrH,IAAAA,KACXkH,aAAclH,IAAAA,MACdiG,WAAYjG,IAAAA,KACZ8F,eAAgB9F,IAAAA,KAChBoI,kBAAmBpI,IAAAA,OACnBuF,YAAavF,IAAAA,OACb0C,uBAAwB1C,IAAAA,KACxBqD,YAAarD,IAAAA,KACboS,eAAgBpS,IAAAA,KAChBmL,SAAUnL,IAAAA,OACVoK,uBAAwBpK,IAAAA,KACxByJ,qBAAsBzJ,IAAAA,KACtB4J,kBAAmB5J,IAAAA,KACnB8J,eAAgB9J,IAAAA,MAmCpB,UAAe+S,EAAAA,EAAAA,aAAW9S,EAAAA,EAAAA,UAhC1B,SAAyB5C,GACrB,MAAO,CACHR,aAAcQ,EAAM8E,kBAAkBtF,aACtCkM,oBAAqB1L,EAAM8E,kBAAkB4G,oBAC7CrD,gBAAiBrI,EAAM8E,kBAAkBuD,gBACzCpF,sBAAuBjD,EAAM8E,kBAAkB7B,sBAC/C4G,aAAc7J,EAAM8E,kBAAkB+E,aACtCkB,kBAAmB/K,EAAM8E,kBAAkBiG,kBAC3C1F,uBAAwBrF,EAAM8E,kBAAkBO,uBAChD6C,YAAalI,EAAM8E,kBAAkBoD,YACrC4F,SAAU9N,EAAM8N,aAIxB,SAA4BjL,GACxB,MAAO,CACHiS,kBAAmB,SAACa,GAAD,OAAa9S,EAAS+S,GAAAA,EAAAA,kBAAwCD,KACjF3L,UAAW,SAAC7E,GAAD,OAActC,EAASG,EAAAA,EAAAA,UAA8BmC,KAChEsC,kBAAmB,SAACa,GAAD,OAAkBzF,EAASG,EAAAA,EAAAA,kBAAsCsF,KACpFM,WAAY,SAACzF,EAAOwF,GAAR,OAAuB9F,EAASG,EAAAA,EAAAA,WAA+BG,EAAOwF,KAClFF,eAAgB,kBAAM5F,EAASG,EAAAA,EAAAA,mBAC/BgD,YAAa,SAAC6P,EAAYC,GACtBjT,EAASG,EAAAA,EAAAA,YAAgC6S,EAAYC,KAEzDf,eAAgB,SAACY,EAAStB,GAAV,OAAqBxR,EAAS+S,GAAAA,EAAAA,eAAqCD,EAAStB,KAC5FtH,uBAAwB,SAACgJ,GAAD,OAAwBlT,EAASmT,GAAAA,EAAAA,uBAA+CD,KACxG3J,qBAAsB,SAACC,GAAD,OAAexJ,EAASyJ,GAAAA,EAAAA,qBAAoCD,KAClFE,kBAAmB,kBAAM1J,EAAS2J,GAAAA,EAAAA,oBAClCC,eAAgB,SAACC,GAAD,OAAc7J,EAAS,CAAElB,KAAM,gBAAiBgL,QAASD,QAIvD9J,CAA6C0Q","sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaseline/EditBaseline.js","webpack:///./src/SmartComponents/SystemsTable/NotificationsSystemsTable.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/DeleteNotificationModal/DeleteNotificationModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/SystemNotification.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselinePage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = Object.prototype.hasOwnProperty.call(error, 'status')  ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(error, 'detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"save\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"cancel\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import editBaselineHelpers from '../EditBaseline/helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../EditBaseline/helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                data-ouia-component-id='delete-facts-dropdown-item'\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={{ float: 'left' }}\n                    toggle={ <KebabToggle\n                        data-ouia-component-id='delete-facts-dropdown-toggle'\n                        data-ouia-component-type='PF4/DropdownToggle'\n                        onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                    ouiaId='delete-facts-dropdown'\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { editBaselineEmptyState, isDisabled, permissions } = this.props;\n\n        return (\n            <React.Fragment>\n                { !permissions.baselinesWrite && permissions.baselinesWrite !== undefined\n                    ? <Tooltip\n                        content={ <div>You do not have permissions to perform this action</div> }\n                    >\n                        <div className={ editBaselineEmptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }\n                                ouiaId='add-fact-or-category-button'\n                            >\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }\n                        ouiaId='add-fact-or-category-button'\n                    >\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    permissions: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    ouiaId='edit-baseline-export-to-csv'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { isDisabled, onBulkSelect, permissions, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                            ouiaId='edit-baseline-bulk-selector-dropdown'\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ isDisabled }\n                            permissions={ permissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                                ouiaId='edit-baseline-export-dropdown'\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    permissions: PropTypes.object\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../EditBaseline/helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            data-ouia-component-type='PF4/Checkbox'\n            data-ouia-component-id='category-checkbox'\n            className=\"sm-padding-bottom\"\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { inlineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label={ isCategory ? 'Category name' : 'Fact name' }\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact name'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='fact-name-input'\n                        value={ factName }\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        onChange={ this.handleNewName }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"fact name\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { inlineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label='Value'\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact value'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='value-input'\n                        value={ factValue }\n                        type=\"text\"\n                        placeholder=\"Value\"\n                        onChange={ this.handleNewValue }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"value\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                <Form>\n                    { this.renderFactInput() }\n                    { isCategory ? null : this.renderValueInput() }\n                </Form>\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                ouiaId='add-fact-modal'\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"fact-modal-save-button\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"fact-modal-cancel-button\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    inlineError: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineToolbar from '../EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../../ErrorAlert/ErrorAlert';\nimport FactModal from '../FactModal/FactModal';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../../constants';\nimport EmptyStateDisplay from '../../../EmptyStateDisplay/EmptyStateDisplay';\n\nclass EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ]\n        };\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderHeaderRow(baselinesWrite) {\n        return (\n            <tr\n                key='edit-baseline-table-header'\n                data-ouia-component-type='PF4/TableHeaderRow'\n                data-ouia-component-id='edit-baseline-table-header-row'>\n                { baselinesWrite ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        const { loadingColumns } = this.state;\n\n        return <SkeletonTable\n            columns={ loadingColumns }\n            rowSize={ 8 }\n            onSelect={ true }\n            canSelectAll={ false }\n            isSelectable={ true }\n        />;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className=\"pointer active-blue\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className=\"pointer\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                data-ouia-component-type='PF4/Checkbox'\n                data-ouia-component-id={ 'checkbox-' + fact[FACT_NAME] }\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, baselinesWrite) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            if (baselineFact.name === fact[FACT_NAME]) {\n                if (baselineFact.value && fact[FACT_VALUE] === baselineFact.value) {\n                    return fact;\n                } else if (baselineFact.values && Array.isArray(fact[FACT_VALUE])) {\n                    return fact;\n                }\n            }\n        });\n\n        baselinesWrite\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) && Array.isArray(fact[2])\n                    ? 'pf-c-table__check nested-fact'\n                    : 'pf-c-table__check' }\n            >\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, baselinesWrite }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    baselinesWrite\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        baselinesWrite\n                    }));\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'edit-baseline-table-row-' + subFact[FACT_NAME] }\n                        category={ factData?.name }\n                        key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, baselinesWrite }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(baselinesWrite) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], baselinesWrite);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState(permissions) {\n        const { editBaselineEmptyState, editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + editBaselineError.status + ': ' + editBaselineError.detail }\n                button={ <a onClick={ () => this.retryBaselineFetch() }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton\n                    permissions={ permissions }\n                    editBaselineEmptyState={ editBaselineEmptyState }\n                /> }\n            />;\n        }\n    }\n\n    renderTable({ baselinesWrite }) {\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table edit-baseline-table\">\n                <thead>\n                    { this.renderHeaderRow(baselinesWrite) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { this.renderRows(baselinesWrite) }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, baselineDataLoading, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData, permissions } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <React.Fragment>\n                { factModalOpened\n                    ? <FactModal />\n                    : <div></div>\n                }\n                <ErrorAlert\n                    error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                    onClose={ clearErrorData }\n                />\n                { editBaselineEmptyState\n                    ? this.renderEmptyState(permissions)\n                    : <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            <EditBaselineToolbar\n                                selected={ selected }\n                                onBulkSelect={ this.onBulkSelect }\n                                isDisabled={ editBaselineTableData.length === 0 || !permissions.baselinesWrite }\n                                totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                baselineData={ baselineData }\n                                exportToCSV={ exportToCSV }\n                                tableData={ editBaselineTableData }\n                                permissions={ permissions }\n                            />\n                            { baselineDataLoading\n                                ? this.renderLoadingRows()\n                                : this.renderTable(permissions)\n                            }\n                        </CardBody>\n                    </Card>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    permissions: PropTypes.object\n};\n\nexport default EditBaseline;\n","/*eslint-disable camelcase*/\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { Provider } from 'react-redux';\nimport MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/MiddlewareListener';\n\nimport selectedReducer from '../../store/reducers';\nimport { compareActions } from '../modules';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport helpers from '../helpers';\nimport isEqual from 'lodash/isEqual';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport const SystemsTable = connect(null, mapDispatchToProps)(({\n    baselineId,\n    setSelectedSystemIds,\n    driftClearFilters,\n    createBaselineModal,\n    historicalProfiles,\n    hasMultiSelect,\n    selectHistoricProfiles,\n    permissions,\n    selectEntities,\n    selectVariant,\n    systemNotificationIds,\n    toolbarButton,\n    isAddSystemNotifications,\n    registry,\n    onSystemSelect,\n    selectSystemsToAdd,\n    deleteNotifications,\n    systemColumns\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n    const entities = useSelector(({ entities }) => entities);\n    const selected = useSelector(({ entities }) => entities?.selectedSystemIds || []);\n    const getEntities = useRef(() => undefined);\n    const selectedRef = useRef([]);\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    const buildTableProps = () => {\n        if (permissions.notificationsWrite) {\n            return {\n                canSelectAll: false,\n                selectVariant,\n                ouiaId: 'systems-table'\n            };\n        } else {\n            return {\n                canSelectAll: false,\n                selectVariant,\n                ouiaId: 'systems-table',\n                onSelect: false\n            };\n        }\n    };\n\n    const buildDeleteNotificationsKebab = () => {\n        return <div\n            className='pointer'\n            key=\"delete-baseline-notification\"\n            onClick={ () => deleteNotifications(entities?.selectedSystemIds) }\n            isDisabled={ !entities?.selectedSystemIds?.length }\n        >\n            { entities?.selectedSystemIds?.length > 1 ? 'Delete associated systems' : 'Delete associated system' }\n        </div>;\n    };\n\n    const buildActionsConfig = () => {\n        if (permissions.notificationsWrite) {\n            return [\n                toolbarButton,\n                buildDeleteNotificationsKebab()\n            ];\n        } else {\n            return [];\n        }\n    };\n\n    useEffect(() => {\n        if (!isEqual(selectedRef.current, selected)) {\n            selectedRef.current = [ ...selected ];\n            onSystemSelect(selected);\n        }\n    });\n\n    return (\n        permissions.inventoryRead ? (\n            <InventoryTable\n                columns={ systemColumns }\n                onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                    getEntities.current = api?.getEntities;\n                    driftClearFilters();\n                    registry.register(mergeWithEntities(\n                        selectedReducer(\n                            INVENTORY_ACTION_TYPES, baselineId, createBaselineModal, historicalProfiles,\n                            hasMultiSelect, undefined, isAddSystemNotifications, selectHistoricProfiles,\n                            systemNotificationIds, selectSystemsToAdd, deleteNotifications, permissions\n                        )\n                    ));\n                    setSelectedSystemIds(selected);\n                } }\n                showTags\n                noDetail\n                customFilters={{\n                    tags: tagsFilter,\n                    filter: {\n                        system_profile: {\n                            ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                            ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                        }\n                    }\n                }}\n                tableProps={ buildTableProps() }\n                getEntities={ async (_items, config) => {\n                    const currIds = (systemNotificationIds || [])\n                    .slice((config.page - 1) * config.per_page, config.page * config.per_page);\n                    const data = await getEntities.current?.(\n                        currIds,\n                        {\n                            hasItems: true\n                        },\n                        true\n                    );\n                    return {\n                        ...data,\n                        results: data.results.map((system) => ({\n                            ...system,\n                            ...currIds.find(({ uuid }) => uuid === system.id) || {}\n                        })),\n                        total: (systemNotificationIds || []).length,\n                        page: config.page,\n                        per_page: config.per_page\n                    };\n                } }\n                bulkSelect={ onSelect && {\n                    isDisabled: !hasMultiSelect || !permissions.notificationsWrite,\n                    count: entities?.selectedSystemIds ? entities.selectedSystemIds.length : 0,\n                    items: [{\n                        title: `Select none (0)`,\n                        onClick: () => {\n                            onSelect('none');\n                        }\n                    }, {\n                        title: `Select page (${ entities?.count || 0 })`,\n                        onClick: () => {\n                            onSelect('page');\n                        }\n                    }],\n                    onSelect: (value) => {\n                        value ? onSelect('page') : onSelect('none');\n                    },\n                    checked: entities?.selectedSystemIds\n                        ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                        : null\n                } }\n                actionsConfig={{\n                    actions: buildActionsConfig()\n                }}\n            />\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n});\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    selectedHSPIds: PropTypes.array,\n    permissions: PropTypes.object,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string,\n    systemNotificationIds: PropTypes.array,\n    baselineId: PropTypes.string,\n    toolbarDropdown: PropTypes.array,\n    isAddSystemNotifications: PropTypes.bool,\n    registry: PropTypes.shape({\n        register: PropTypes.func\n    }),\n    onSystemSelect: PropTypes.func,\n    systemColumns: PropTypes.array\n};\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst SystemsTableWithContext = (props) => {\n    const [ registry, setRegistry ] = useState();\n    const listener = useRef();\n\n    useEffect(() => {\n        listener.current = new MiddlewareListener();\n        setRegistry(() => new ReducerRegistry({}, [ listener.current.getMiddleware(), promiseMiddleware() ]));\n    }, []);\n    return registry?.store ? <Provider store={ registry.store }>\n        <SystemsTable { ...props } registry={ registry } addNewListener={ (...args) => listener.current.addNew(...args) } />\n    </Provider> : null;\n};\n\nexport default SystemsTableWithContext;\n/*eslint-enable camelcase*/\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport class DeleteNotificationModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    /*eslint-disable camelcase*/\n    deleteNotification = async () => {\n        const { baselineId, deleteNotifications, fetchSystems, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        await deleteNotifications(baselineId, systemsToDelete);\n        fetchSystems(baselineId);\n        toggleDeleteNotificationsModal();\n    }\n    /*eslint-enable camelcase*/\n\n    render() {\n        const { deleteNotificationsModalOpened, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    ouiaId='delete-baseline-notification-modal'\n                    variant={ ModalVariant.small }\n                    title={ systemsToDelete?.length === 1 ? 'Delete associated system' : 'Delete associated systems' }\n                    isOpen={ deleteNotificationsModalOpened }\n                    onClose={ () => toggleDeleteNotificationsModal() }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='delete-baseline-notification-button'\n                            variant=\"danger\"\n                            onClick={ this.deleteNotification }\n                        >\n                            Delete\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='delete-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ () => toggleDeleteNotificationsModal() }\n                        >\n                        Cancel\n                        </Button>\n                    ] }\n                >\n                    You have selected { ' ' } { systemsToDelete?.length === 1 ? 'an associated system' : 'multiple associated systems' }\n                    { ' ' } to be deleted.\n                    <br></br>\n                    { <div className=\"md-padding-top\">Deleting an associated system cannot be undone.</div> }\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nDeleteNotificationModal.propTypes = {\n    baselineId: PropTypes.string,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    deleteNotifications: PropTypes.func,\n    fetchSystems: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    toggleDeleteNotificationsModal: PropTypes.func\n};\n\nexport default DeleteNotificationModal;\n","import types from './types';\nimport api from '../../../../../api';\n\nfunction toggleDeleteNotificationsModal() {\n    return {\n        type: types.TOGGLE_DELETE_NOTIFICATION_MODAL\n    };\n}\n\nfunction setSystemsToDelete(systemIds) {\n    return {\n        type: types.SET_SYSTEMS_TO_DELETE,\n        payload: systemIds\n    };\n}\n\nfunction deleteNotifications(baselineId, systemIds) {\n    return {\n        type: types.DELETE_NOTIFICATIONS,\n        payload: api.deleteSystemNotifications(baselineId, systemIds)\n    };\n}\n\nfunction getNotifications(baselineId) {\n    return {\n        type: types.GET_NOTIFICATIONS,\n        payload: api.getBaselineNotification(baselineId)\n    };\n}\n\nfunction addNotifications(baselineId, systemsToAdd) {\n    return {\n        type: types.ADD_NOTIFICATIONS,\n        payload: api.addSystemNotification(baselineId, systemsToAdd)\n    };\n}\n\nexport default {\n    toggleDeleteNotificationsModal,\n    setSystemsToDelete,\n    deleteNotifications,\n    getNotifications,\n    addNotifications\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Bullseye, Button, Modal, ModalVariant, Spinner } from '@patternfly/react-core';\nimport NotificationsSystemsTable from '../../../SystemsTable/NotificationsSystemsTable';\nimport SystemsTable from '../../../SystemsTable/SystemsTable';\nimport DeleteNotificationModal from './DeleteNotificationModal/DeleteNotificationModal';\nimport { systemNotificationsActions } from './redux';\n\nexport class SystemNotification extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            systemsToAdd: []\n        };\n\n        this.toggleModal = () => {\n            const { setSelectedSystemIds } = this.props;\n            const { modalOpened } = this.state;\n\n            setSelectedSystemIds([]);\n            this.setState({ modalOpened: !modalOpened });\n        };\n    }\n\n    buildSystemColumns = (isAddSystemNotifications) => {\n        const { permissions } = this.props;\n        let columns = [\n            { key: 'display_name', props: { width: isAddSystemNotifications ? 20 : null }, title: 'Name' },\n            { key: 'tags', props: { width: isAddSystemNotifications ? 10 : null, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: isAddSystemNotifications ? 10 : null }, title: 'Last seen' }\n        ];\n\n        if (permissions.notificationsWrite && !isAddSystemNotifications) {\n            columns.push({\n                key: 'system_notification',\n                title: '',\n                props: {\n                    isStatic: true\n                }\n            });\n        }\n\n        return columns;\n    };\n\n    deleteNotifications = async (systemIds) => {\n        const { setSystemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        toggleDeleteNotificationsModal();\n        setSystemsToDelete(systemIds);\n    }\n\n    selectSystemsToAdd = (systemIds) => {\n        const { systemNotificationIds } = this.props;\n        let array = [ ...systemNotificationIds ];\n\n        const newIds = systemIds.filter((newId) => !array.some((existingId) => existingId === newId));\n\n        this.setState({ systemsToAdd: newIds });\n    }\n\n    addNotification = async () => {\n        const { systemsToAdd } = this.state;\n        const { addNotifications, baselineId } = this.props;\n\n        await addNotifications(baselineId, systemsToAdd);\n        this.setState({ systemsToAdd: []});\n\n        this.toggleModal();\n        this.fetchSystems(baselineId);\n    }\n\n    buildNotificationsButton = () => {\n        return <Button\n            key=\"add-baseline-notification\"\n            variant=\"primary\"\n            onClick={ this.toggleModal }\n            ouiaId=\"add-baseline-notification-button\"\n        >\n            Add associated system\n        </Button>;\n    }\n\n    fetchSystems = async (baselineId) => {\n        const { getNotifications } = this.props;\n\n        getNotifications(baselineId);\n    }\n\n    async componentDidMount() {\n        await this.fetchSystems(this.props.baselineId);\n    }\n\n    render() {\n        const { baselineId, baselineName, deleteNotifications, deleteNotificationsModalOpened, driftClearFilters, entities,\n            permissions, selectEntities, selectHistoricProfiles, setSelectedSystemIds, systemNotificationIds,\n            systemsToDelete, toggleDeleteNotificationsModal, systemNotificationLoaded } = this.props;\n        const { modalOpened } = this.state;\n\n        return (\n            <React.Fragment>\n                <DeleteNotificationModal\n                    baselineId={ baselineId }\n                    deleteNotifications={ deleteNotifications }\n                    deleteNotificationsModalOpened={ deleteNotificationsModalOpened }\n                    systemsToDelete={ systemsToDelete }\n                    toggleDeleteNotificationsModal={ toggleDeleteNotificationsModal }\n                    fetchSystems={ this.fetchSystems }\n                />\n                <Modal\n                    className=\"drift\"\n                    ouiaId='add-baseline-notification-modal'\n                    variant={ ModalVariant.medium }\n                    title={ 'Associate system with ' + baselineName }\n                    isOpen={ modalOpened }\n                    onClose={ this.toggleModal }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='add-baseline-notification-button'\n                            variant=\"primary\"\n                            onClick={ this.addNotification }\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='add-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ this.toggleModal }\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <SystemsTable\n                        hasMultiSelect={ true }\n                        permissions={ permissions }\n                        entities={ entities }\n                        selectVariant='checkbox'\n                        systemNotificationIds={ systemNotificationIds }\n                        baselineId={ baselineId }\n                        isAddSystemNotifications={ true }\n                        driftClearFilters={ driftClearFilters }\n                        selectEntities={ selectEntities }\n                        selectHistoricProfiles={ selectHistoricProfiles }\n                        selectSystemsToAdd={ this.selectSystemsToAdd }\n                        selectedSystemIds={ entities?.selectedSystemIds || [] }\n                        systemColumns={ this.buildSystemColumns(true) }\n                    />\n                </Modal>\n                { systemNotificationLoaded ? <NotificationsSystemsTable\n                    hasMultiSelect={ true }\n                    permissions={ permissions }\n                    selectVariant='checkbox'\n                    systemNotificationIds={ systemNotificationIds }\n                    baselineId={ baselineId }\n                    toolbarButton={ this.buildNotificationsButton() }\n                    driftClearFilters={ driftClearFilters }\n                    selectEntities={ selectEntities }\n                    selectHistoricProfiles={ selectHistoricProfiles }\n                    onSystemSelect={ setSelectedSystemIds }\n                    deleteNotifications={ this.deleteNotifications }\n                    systemColumns={ this.buildSystemColumns() }\n                /> : <Bullseye><Spinner size=\"xl\"/></Bullseye> }\n            </React.Fragment>\n        );\n    }\n}\n\nSystemNotification.propTypes = {\n    addNotifications: PropTypes.func,\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    entities: PropTypes.object,\n    permissions: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    selectEntities: PropTypes.func,\n    toggleDeleteNotificationsModal: PropTypes.func,\n    setSystemsToDelete: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    deleteNotifications: PropTypes.func,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    getNotifications: PropTypes.func,\n    setSystemsToAdd: PropTypes.func,\n    systemNotificationIds: PropTypes.array,\n    systemNotificationLoaded: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        deleteNotificationsModalOpened: state.systemNotificationsState.deleteNotificationsModalOpened,\n        systemNotificationIds: state.systemNotificationsState.systemNotificationIds,\n        systemNotificationLoaded: state.systemNotificationsState.systemNotificationLoaded,\n        systemsToDelete: state.systemNotificationsState.systemsToDelete\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotifications: (baselineId, systemsToAdd) => dispatch(systemNotificationsActions.addNotifications(baselineId, systemsToAdd)),\n        toggleDeleteNotificationsModal: () => dispatch(systemNotificationsActions.toggleDeleteNotificationsModal()),\n        setSystemsToDelete: (systemIds) => dispatch(systemNotificationsActions.setSystemsToDelete(systemIds)),\n        deleteNotifications: (baselineId, systemIds) => dispatch(systemNotificationsActions.deleteNotifications(baselineId, systemIds)),\n        getNotifications: (baselineId) => dispatch(systemNotificationsActions.getNotifications(baselineId)),\n        setSelectedSystemIds: (systemIds) => dispatch({ type: 'SET_SELECTED_SYSTEM_IDS', payload: systemIds })\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemNotification);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbHeading, Tab, Tabs } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { EditAltIcon, LockIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport EditBaseline from './EditBaseline/EditBaseline';\nimport SystemNotification from './SystemNotification/SystemNotification';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport systemsTableActions from '../../SystemsTable/actions';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaselinePage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            activeTab: 0\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        const { match: { params }} = this.props;\n\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-view');\n        await window.insights?.chrome?.appObjectId(params.id);\n    }\n\n    componentDidUpdate() {\n        if (this.props.baselineData) {\n            document.title = this.props.baselineData.display_name + ' - Baselines - Drift | Red Hat Insights';\n        }\n    }\n\n    changeActiveTab = (event, tabIndex) => {\n        this.setState({ activeTab: tabIndex });\n    }\n\n    async fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        await fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { clearBaselineData, fetchBaselines, history } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        fetchBaselines('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData, baselinesRead) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb ouiaId='edit-baseline-breadcrumb'>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData && baselinesRead\n                ? <BreadcrumbHeading>\n                    { baselineData.display_name }\n                </BreadcrumbHeading>\n                : null\n            }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageTitle(baselineData, baselinesRead, baselinesWrite) {\n        let pageTitle;\n\n        if (baselinesRead) {\n            if (baselinesWrite) {\n                pageTitle = <React.Fragment>\n                    <span className='pf-c-title pf-m-2xl'>\n                        { !_.isEmpty(baselineData) ? baselineData.display_name : null }\n                    </span>\n                    <span>\n                        { <EditAltIcon\n                            className='pointer not-active edit-icon-margin'\n                            data-ouia-component-id='edit-baseline-name-button'\n                            data-ouia-component-type='PF4/Button'\n                            onClick={ () => this.toggleEditNameModal() } /> }\n                    </span>\n                </React.Fragment>;\n            } else {\n                pageTitle = <React.Fragment>{ !_.isEmpty(baselineData) ? baselineData.display_name : null }</React.Fragment>;\n            }\n        } else {\n            pageTitle = <React.Fragment>{ 'Baseline' }</React.Fragment>;\n        }\n\n        return pageTitle;\n    }\n\n    renderPageHeader = ({ baselinesRead, baselinesWrite, notificationsRead }) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader className={ notificationsRead ? 'bottom-padding-0' : '' }>\n                        { this.renderBreadcrumb(baselineData, baselinesRead) }\n                        <div id=\"edit-baseline-title\">\n                            { this.renderPageTitle(baselineData, baselinesRead, baselinesWrite) }\n                        </div>\n                        { notificationsRead\n                            ? this.renderTabs()\n                            : null\n                        }\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderTabs() {\n        const { activeTab } = this.state;\n\n        return <div>\n            <Tabs\n                activeKey={ activeTab }\n                onSelect={ this.changeActiveTab }\n            >\n                <Tab\n                    eventKey={ 0 }\n                    title=\"Facts\"\n                    id=\"baseline-tab\"\n                    data-ouia-component-id=\"baseline-tab-button\"\n                >\n                </Tab>\n                <Tab\n                    eventKey={ 1 }\n                    title=\"Associated systems\"\n                    id=\"system-notifications-tab\"\n                    data-ouia-component-id=\"\"\n                >\n                </Tab>\n            </Tabs>\n        </div>;\n    }\n\n    renderMain(permissions) {\n        const { baselineData, baselineDataLoading, clearErrorData, driftClearFilters, editBaselineEmptyState, editBaselineError,\n            editBaselineTableData, entities, expandRow, expandedRows, exportToCSV, factModalOpened, selectFact,\n            match: { params }, selectEntities, selectHistoricProfiles, setSelectedSystemIds } = this.props;\n        const { activeTab } = this.state;\n        let body;\n\n        if (activeTab === 0) {\n            body = <EditBaseline\n                baselineData={ baselineData }\n                baselineDataLoading={ baselineDataLoading }\n                clearErrorData={ clearErrorData }\n                editBaselineEmptyState={ editBaselineEmptyState }\n                editBaselineError={ editBaselineError }\n                editBaselineTableData={ editBaselineTableData }\n                expandRow={ expandRow }\n                expandedRows={ expandedRows }\n                exportToCSV={ exportToCSV }\n                factModalOpened={ factModalOpened }\n                permissions={ permissions }\n                history={ history }\n                selectFact={ selectFact }\n            />;\n        } else {\n            body = <SystemNotification\n                baselineId={ params.id }\n                baselineName={ baselineData?.display_name }\n                permissions={ permissions }\n                entities={ entities }\n                driftClearFilters={ driftClearFilters }\n                selectEntities={ selectEntities }\n                selectHistoricProfiles={ selectHistoricProfiles }\n                setSelectedSystemIds={ setSelectedSystemIds }\n            />;\n        }\n\n        return body;\n    }\n\n    /*eslint-disable*/\n    render() {\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to view this Baseline' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : this.renderMain(value.permissions)\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n/*eslint-enable*/\n\nEditBaselinePage.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    fetchBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    selectEntities: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError,\n        entities: state.entities\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        },\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaselinePage));\n"],"names":["EditBaselineNameModal","props","cancelModal","toggleEditNameModal","baselineData","updateBaselineName","display_name","checkKeyPress","event","key","preventDefault","confirmModal","state","baselineName","value","setState","bind","this","patchBaseline","id","facts_patch","error","hasError","Object","prototype","hasOwnProperty","call","ValidatedOptions","className","Form","FormGroup","label","isRequired","fieldId","helperTextInvalid","detail","validated","onKeyPress","TextInput","type","onChange","modalOpened","Modal","variant","ModalVariant","title","isOpen","onClose","actions","Button","ouiaId","onClick","renderModalBody","Component","propTypes","PropTypes","connect","dispatch","baselineId","newBaselineBody","editBaselineActions","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","subFact","EditBaselineKebab","isDisabled","kebabOpened","toggleKebab","toggleModalOpened","dropdownItems","categoryMessage","factMessage","deleteFactModalHelpers","DropdownItem","component","length","DeleteFactModal","toggleModal","Dropdown","style","float","toggle","KebabToggle","onToggle","isPlain","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","editBaselineEmptyState","permissions","baselinesWrite","undefined","Tooltip","content","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","onBulkSelect","exportToCSV","tableData","totalFacts","Toolbar","ToolbarContent","ToolbarItem","BulkSelect","count","items","checked","helpers","onSelect","ToolbarGroup","ExportCSVButton","FactModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","isCategory","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","fetchBaselineData","newAPIBody","addFact","editFact","newFactData","editedFactData","Checkbox","name","isChecked","inlineError","placeholder","isSubFact","factModalOpened","baselineUUID","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","FACT_NAME","errorMessage","loadingColumns","transforms","cellWidth","SkeletonTable","columns","rowSize","canSelectAll","isSelectable","expandedRows","includes","AngleDownIcon","expandRow","AngleRightIcon","row","rows","baseline_facts","find","baselineFact","values","Array","isArray","renderExpandableRowButton","category","rowData","i","renderRowData","editBaselineError","status","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","UndoIcon","renderHeaderRow","renderRows","baselineDataLoading","ErrorAlert","renderEmptyState","Card","CardBody","renderLoadingRows","renderTable","history","match","SystemsTable","setSelectedSystemIds","systemIds","compareActions","driftClearFilters","systemsTableActions","selectEntities","toSelect","payload","createBaselineModal","historicalProfiles","hasMultiSelect","selectHistoricProfiles","selectVariant","systemNotificationIds","toolbarButton","isAddSystemNotifications","registry","onSystemSelect","selectSystemsToAdd","deleteNotifications","systemColumns","tagsFilter","useSelector","globalFilterState","workloadsFilter","sidsFilter","entities","selectedSystemIds","getEntities","useRef","selectedRef","bulk","useEffect","isEqual","current","inventoryRead","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","selectedReducer","showTags","noDetail","customFilters","tags","filter","system_profile","SAP","sap_system","sap_sids","tableProps","notificationsWrite","_items","config","currIds","slice","page","per_page","hasItems","data","results","map","system","uuid","total","bulkSelect","actionsConfig","LockIcon","selectedHSPIds","toolbarDropdown","defaultProps","useState","setRegistry","listener","MiddlewareListener","ReducerRegistry","getMiddleware","promiseMiddleware","store","Provider","addNewListener","addNew","DeleteNotificationModal","deleteNotification","fetchSystems","systemsToDelete","toggleDeleteNotificationsModal","deleteNotificationsModalOpened","types","systemsToAdd","SystemNotification","buildSystemColumns","width","isStatic","setSystemsToDelete","array","newIds","newId","some","existingId","addNotification","addNotifications","buildNotificationsButton","getNotifications","systemNotificationLoaded","NotificationsSystemsTable","Bullseye","Spinner","size","setSystemsToAdd","systemNotificationsState","systemNotificationsActions","EditBaselinePage","changeActiveTab","tabIndex","activeTab","renderPageHeader","baselinesRead","notificationsRead","PageHeader","Skeleton","SkeletonSize","renderBreadcrumb","renderPageTitle","renderTabs","PageHeaderTitle","goToBaselinesList","params","window","insights","chrome","auth","getUser","appAction","appObjectId","document","clearBaselineData","fetchBaselines","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","EditAltIcon","Tabs","activeKey","Tab","eventKey","Main","renderMain","withRouter","tableId","baselinesTableActions","exportData","baselineRowData","historicProfileIds","historicProfilesActions"],"sourceRoot":""}