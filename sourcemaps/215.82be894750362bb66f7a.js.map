{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaseline/EditBaseline.js","webpack:///./src/SmartComponents/SystemsTable/NotificationsSystemsTable.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/DeleteNotificationModal/DeleteNotificationModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/SystemNotification/SystemNotification.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/EditBaselinePage.js"],"names":["EditBaselineNameModal","props","cancelModal","toggleEditNameModal","baselineData","updateBaselineName","display_name","checkKeyPress","event","key","preventDefault","confirmModal","state","baselineName","value","setState","bind","this","patchBaseline","id","facts_patch","error","hasError","Object","prototype","hasOwnProperty","call","ValidatedOptions","className","Form","FormGroup","label","isRequired","fieldId","helperTextInvalid","detail","validated","onKeyPress","TextInput","type","onChange","aria-label","modalOpened","Modal","variant","ModalVariant","title","isOpen","onClose","actions","Button","ouiaId","onClick","status","Alert","isInline","renderModalBody","Component","propTypes","PropTypes","connect","dispatch","baselineId","newBaselineBody","editBaselineActions","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","subFact","EditBaselineKebab","isDisabled","kebabOpened","toggleKebab","toggleModalOpened","dropdownItems","categoryMessage","factMessage","deleteFactModalHelpers","DropdownItem","component","data-ouia-component-id","length","DeleteFactModal","toggleModal","Dropdown","style","float","toggle","KebabToggle","data-ouia-component-type","onToggle","isPlain","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","editBaselineEmptyState","permissions","baselinesWrite","undefined","Tooltip","content","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","onBulkSelect","exportToCSV","tableData","totalFacts","Toolbar","ToolbarContent","ToolbarItem","BulkSelect","count","items","checked","helpers","onSelect","ToolbarGroup","ExportCSVButton","FactModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","isCategory","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","fetchBaselineData","newAPIBody","addFact","editFact","newFactData","editedFactData","Checkbox","name","isChecked","inlineError","placeholder","isSubFact","factModalOpened","baselineUUID","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","FACT_NAME","errorMessage","loadingColumns","transforms","cellWidth","SkeletonTable","columns","rowSize","canSelectAll","isSelectable","expandedRows","includes","AngleDownIcon","expandRow","AngleRightIcon","row","rows","baseline_facts","find","baselineFact","renderExpandableRowButton","category","rowData","i","renderRowData","editBaselineError","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","UndoIcon","renderHeaderRow","renderRows","baselineDataLoading","ErrorAlert","renderEmptyState","Card","CardBody","renderLoadingRows","renderTable","history","match","SystemsTable","setSelectedSystemIds","systemIds","compareActions","driftClearFilters","systemsTableActions","updateColumns","selectEntities","toSelect","payload","createBaselineModal","hasHistoricalDropdown","historicalProfiles","hasMultiSelect","selectHistoricProfiles","selectVariant","systemNotificationIds","toolbarButton","isAddSystemNotifications","registry","onSystemSelect","selectSystemsToAdd","deleteNotifications","addNewListener","tagsFilter","useSelector","globalFilterState","workloadsFilter","sidsFilter","entities","selectedSystemIds","getEntities","useRef","selectedRef","deselectHistoricalProfiles","bulk","useEffect","window","entityListener","on","callback","isEqual","current","inventoryRead","InventoryTable","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","selectedReducer","showTags","noDetail","customFilters","tags","filter","system_profile","SAP","sap_system","sap_sids","tableProps","_items","config","currIds","slice","page","per_page","hasItems","data","results","map","system","uuid","total","bulkSelect","actionsConfig","LockIcon","selectedHSPIds","toolbarDropdown","defaultProps","useState","setRegistry","listener","MiddlewareListener","ReducerRegistry","getMiddleware","promiseMiddleware","store","Provider","addNew","DeleteNotificationModal","deleteNotification","fetchSystems","systemsToDelete","toggleDeleteNotificationsModal","deleteNotificationsModalOpened","types","systemsToAdd","SystemNotification","setSystemsToDelete","array","newIds","newId","some","existingId","addNotification","addNotifications","buildNotificationsButton","getNotifications","systemNotificationLoaded","NotificationsSystemsTable","Bullseye","Spinner","size","setSystemsToAdd","systemNotificationsState","systemNotificationsActions","EditBaselinePage","changeActiveTab","tabIndex","activeTab","renderPageHeader","baselinesRead","PageHeader","Skeleton","SkeletonSize","renderBreadcrumb","renderPageTitle","renderTabs","PageHeaderTitle","goToBaselinesList","params","insights","chrome","auth","getUser","appAction","appObjectId","document","clearBaselineData","fetchBaselines","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","EditAltIcon","Tabs","activeKey","Tab","eventKey","Main","renderMain","withRouter","tableId","baselinesTableActions","exportData","baselineRowData","historicProfileIds","historicProfilesActions"],"mappings":"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","file":"js/215.7d62f2b7d4b42adead3c.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = Object.prototype.hasOwnProperty.call(error, 'status')  ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(error, 'detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"save\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"cancel\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import editBaselineHelpers from '../EditBaseline/helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../EditBaseline/helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                data-ouia-component-id='delete-facts-dropdown-item'\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={{ float: 'left' }}\n                    toggle={ <KebabToggle\n                        data-ouia-component-id='delete-facts-dropdown-toggle'\n                        data-ouia-component-type='PF4/DropdownToggle'\n                        onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                    ouiaId='delete-facts-dropdown'\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { editBaselineEmptyState, isDisabled, permissions } = this.props;\n\n        return (\n            <React.Fragment>\n                { !permissions.baselinesWrite && permissions.baselinesWrite !== undefined\n                    ? <Tooltip\n                        content={ <div>You do not have permissions to perform this action</div> }\n                    >\n                        <div className={ editBaselineEmptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }\n                                ouiaId='add-fact-or-category-button'\n                            >\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }\n                        ouiaId='add-fact-or-category-button'\n                    >\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    permissions: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    ouiaId='edit-baseline-export-to-csv'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { isDisabled, onBulkSelect, permissions, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                            ouiaId='edit-baseline-bulk-selector-dropdown'\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ isDisabled }\n                            permissions={ permissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                                ouiaId='edit-baseline-export-dropdown'\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    permissions: PropTypes.object\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../EditBaseline/helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            data-ouia-component-type='PF4/Checkbox'\n            data-ouia-component-id='category-checkbox'\n            className=\"sm-padding-bottom\"\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { inlineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label={ isCategory ? 'Category name' : 'Fact name' }\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact name'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='fact-name-input'\n                        value={ factName }\n                        type=\"text\"\n                        placeholder=\"Name\"\n                        onChange={ this.handleNewName }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"fact name\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { inlineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <FormGroup\n                    label='Value'\n                    isRequired\n                    helperTextInvalid={ Object.prototype.hasOwnProperty.call(inlineError, 'detail') ? inlineError.detail : null }\n                    validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? 'error' : null }\n                    fieldId='fact value'\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        data-ouia-component-type='PF4/TextInput'\n                        data-ouia-component-id='value-input'\n                        value={ factValue }\n                        type=\"text\"\n                        placeholder=\"Value\"\n                        onChange={ this.handleNewValue }\n                        validated={ Object.prototype.hasOwnProperty.call(inlineError, 'status') ? ValidatedOptions.error : null }\n                        aria-label=\"value\"\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { inlineError, isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                <Form>\n                    { this.renderFactInput() }\n                    { isCategory ? null : this.renderValueInput() }\n                </Form>\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"drift\"\n                ouiaId='add-fact-modal'\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        ouiaId=\"fact-modal-save-button\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        ouiaId=\"fact-modal-cancel-button\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    inlineError: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineToolbar from '../EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../../ErrorAlert/ErrorAlert';\nimport FactModal from '../FactModal/FactModal';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../../constants';\nimport EmptyStateDisplay from '../../../EmptyStateDisplay/EmptyStateDisplay';\n\nclass EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ]\n        };\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderHeaderRow(baselinesWrite) {\n        return (\n            <tr\n                key='edit-baseline-table-header'\n                data-ouia-component-type='PF4/TableHeaderRow'\n                data-ouia-component-id='edit-baseline-table-header-row'>\n                { baselinesWrite ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        const { loadingColumns } = this.state;\n\n        return <SkeletonTable\n            columns={ loadingColumns }\n            rowSize={ 8 }\n            onSelect={ true }\n            canSelectAll={ false }\n            isSelectable={ true }\n        />;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className=\"pointer active-blue\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className=\"pointer\"\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                data-ouia-component-type='PF4/Checkbox'\n                data-ouia-component-id={ 'checkbox-' + fact[FACT_NAME] }\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, baselinesWrite) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        baselinesWrite\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, baselinesWrite }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    baselinesWrite\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        baselinesWrite\n                    }));\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'edit-baseline-table-row-' + subFact[FACT_NAME] }\n                        category={ factData?.name }\n                        key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, baselinesWrite }));\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'edit-baseline-table-row-' + factData?.name }\n                key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(baselinesWrite) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], baselinesWrite);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState(permissions) {\n        const { editBaselineEmptyState, editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + editBaselineError.status + ': ' + editBaselineError.detail }\n                button={ <a onClick={ () => this.retryBaselineFetch() }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton\n                    permissions={ permissions }\n                    editBaselineEmptyState={ editBaselineEmptyState }\n                /> }\n            />;\n        }\n    }\n\n    renderTable({ baselinesWrite }) {\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table\">\n                <thead>\n                    { this.renderHeaderRow(baselinesWrite) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { this.renderRows(baselinesWrite) }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, baselineDataLoading, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData, permissions } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <React.Fragment>\n                { factModalOpened\n                    ? <FactModal />\n                    : <div></div>\n                }\n                <ErrorAlert\n                    error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                    onClose={ clearErrorData }\n                />\n                { editBaselineEmptyState\n                    ? this.renderEmptyState(permissions)\n                    : <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            <EditBaselineToolbar\n                                selected={ selected }\n                                onBulkSelect={ this.onBulkSelect }\n                                isDisabled={ editBaselineTableData.length === 0 || !permissions.baselinesWrite }\n                                totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                baselineData={ baselineData }\n                                exportToCSV={ exportToCSV }\n                                tableData={ editBaselineTableData }\n                                permissions={ permissions }\n                            />\n                            { baselineDataLoading\n                                ? this.renderLoadingRows()\n                                : this.renderTable(permissions)\n                            }\n                        </CardBody>\n                    </Card>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    permissions: PropTypes.object\n};\n\nexport default EditBaseline;\n","/*eslint-disable camelcase*/\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { Provider } from 'react-redux';\nimport MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/files/MiddlewareListener';\n\nimport selectedReducer from '../../store/reducers';\nimport { compareActions } from '../modules';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport helpers from '../helpers';\nimport isEqual from 'lodash/isEqual';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key)),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport const SystemsTable = connect(null, mapDispatchToProps)(({\n    baselineId,\n    setSelectedSystemIds,\n    driftClearFilters,\n    createBaselineModal,\n    hasHistoricalDropdown,\n    historicalProfiles,\n    hasMultiSelect,\n    selectHistoricProfiles,\n    updateColumns,\n    //hasInventoryReadPermissions,\n    permissions,\n    selectEntities,\n    selectVariant,\n    systemNotificationIds,\n    toolbarButton,\n    isAddSystemNotifications,\n    registry,\n    onSystemSelect,\n    selectSystemsToAdd,\n    deleteNotifications,\n    addNewListener\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n    const entities = useSelector(({ entities }) => entities);\n    const selected = useSelector(({ entities }) => entities?.selectedSystemIds || []);\n    const getEntities = useRef(() => undefined);\n    const selectedRef = useRef([]);\n\n    const deselectHistoricalProfiles = () => {\n        if (!hasMultiSelect) {\n            updateColumns('display_name');\n            selectHistoricProfiles([]);\n        }\n    };\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    useEffect(() => {\n        window.entityListener = addNewListener({\n            on: 'SELECT_ENTITY',\n            callback: () => {\n                !hasMultiSelect ? deselectHistoricalProfiles() : null;\n            }\n        });\n    });\n\n    useEffect(() => {\n        if (!isEqual(selectedRef.current, selected)) {\n            selectedRef.current = [ ...selected ];\n            onSystemSelect(selected);\n        }\n    });\n\n    return (\n        /*hasInventoryReadPermissions*/ permissions.inventoryRead ? (\n            <InventoryTable\n                onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                    getEntities.current = api?.getEntities;\n                    driftClearFilters();\n                    registry.register(mergeWithEntities(\n                        selectedReducer(\n                            INVENTORY_ACTION_TYPES, baselineId, createBaselineModal, historicalProfiles,\n                            hasMultiSelect, hasHistoricalDropdown, deselectHistoricalProfiles, isAddSystemNotifications,\n                            selectHistoricProfiles, systemNotificationIds, selectSystemsToAdd, deleteNotifications\n                        )\n                    ));\n                    setSelectedSystemIds(selected);\n                } }\n                showTags\n                noDetail\n                customFilters={{\n                    tags: tagsFilter,\n                    filter: {\n                        system_profile: {\n                            ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                            ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                        }\n                    }\n                }}\n                tableProps={{\n                    canSelectAll: false,\n                    selectVariant,\n                    ouiaId: 'systems-table'\n                }}\n                getEntities={ async (_items, config) => {\n                    const currIds = (systemNotificationIds || [])\n                    .slice((config.page - 1) * config.per_page, config.page * config.per_page);\n                    const data = await getEntities.current?.(\n                        currIds,\n                        {\n                            hasItems: true\n                        },\n                        true\n                    );\n                    return {\n                        ...data,\n                        results: data.results.map((system) => ({\n                            ...system,\n                            ...currIds.find(({ uuid }) => uuid === system.id) || {}\n                        })),\n                        total: (systemNotificationIds || []).length,\n                        page: config.page,\n                        per_page: config.per_page\n                    };\n                } }\n                bulkSelect={ onSelect && {\n                    isDisabled: !hasMultiSelect,\n                    count: entities?.selectedSystemIds ? entities.selectedSystemIds.length : 0,\n                    items: [{\n                        title: `Select none (0)`,\n                        onClick: () => {\n                            onSelect('none');\n                        }\n                    }, {\n                        title: `Select page (${ entities?.count || 0 })`,\n                        onClick: () => {\n                            onSelect('page');\n                        }\n                    }],\n                    onSelect: (value) => {\n                        value ? onSelect('page') : onSelect('none');\n                    },\n                    checked: entities?.selectedSystemIds\n                        ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                        : null\n                } }\n                actionsConfig={{\n                    actions: [\n                        toolbarButton,\n                        <div\n                            className='pointer'\n                            key=\"delete-baseline-notification\"\n                            onClick={ () => deleteNotifications(entities?.selectedSystemIds) }\n                            isDisabled={ !entities?.selectedSystemIds?.length }\n                        >\n                            { entities?.selectedSystemIds?.length > 1 ? 'Delete notifications' : 'Delete notification' }\n                        </div>\n                    ]\n                }}\n            />\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n});\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    hasHistoricalDropdown: PropTypes.bool,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    updateColumns: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    //hasInventoryReadPermissions: PropTypes.bool,\n    permissions: PropTypes.object,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string,\n    systemNotificationIds: PropTypes.array,\n    baselineId: PropTypes.string,\n    toolbarDropdown: PropTypes.array,\n    isAddSystemNotifications: PropTypes.bool,\n    registry: PropTypes.shape({\n        register: PropTypes.func\n    }),\n    onSystemSelect: PropTypes.func\n};\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst SystemsTableWithContext = (props) => {\n    const [ registry, setRegistry ] = useState();\n    const listener = useRef();\n\n    useEffect(() => {\n        listener.current = new MiddlewareListener();\n        setRegistry(() => new ReducerRegistry({}, [ listener.current.getMiddleware(), promiseMiddleware() ]));\n    }, []);\n    return registry?.store ? <Provider store={ registry.store }>\n        <SystemsTable { ...props } registry={ registry } addNewListener={ (...args) => listener.current.addNew(...args) } />\n    </Provider> : null;\n};\n\nexport default SystemsTableWithContext;\n/*eslint-enable camelcase*/\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\n\nexport class DeleteNotificationModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    /*eslint-disable camelcase*/\n    deleteNotification = async () => {\n        const { baselineId, deleteNotifications, fetchSystems, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        await deleteNotifications(baselineId, systemsToDelete);\n        fetchSystems(baselineId);\n        toggleDeleteNotificationsModal();\n    }\n    /*eslint-enable camelcase*/\n\n    render() {\n        const { deleteNotificationsModalOpened, systemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    ouiaId='delete-baseline-notification-modal'\n                    variant={ ModalVariant.small }\n                    title={ systemsToDelete?.length === 1 ? 'Delete baseline notification' : 'Delete baseline notifications' }\n                    isOpen={ deleteNotificationsModalOpened }\n                    onClose={ () => toggleDeleteNotificationsModal() }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='delete-baseline-notification-button'\n                            variant=\"danger\"\n                            onClick={ this.deleteNotification }\n                        >\n                            Delete\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='delete-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ () => toggleDeleteNotificationsModal() }\n                        >\n                        Cancel\n                        </Button>\n                    ] }\n                >\n                    You have selected { ' ' } { systemsToDelete?.length === 1 ? 'a baseline notification' : 'multiple baseline notifications' }\n                    { ' ' } to be deleted.\n                    <br></br>\n                    { <div className=\"md-padding-top\">Deleting a baseline notification cannot be undone.</div> }\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nDeleteNotificationModal.propTypes = {\n    baselineId: PropTypes.string,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    deleteNotifications: PropTypes.func,\n    fetchSystems: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    toggleDeleteNotificationsModal: PropTypes.func\n};\n\nexport default DeleteNotificationModal;\n","import types from './types';\nimport api from '../../../../../api';\n\nfunction toggleDeleteNotificationsModal() {\n    return {\n        type: types.TOGGLE_DELETE_NOTIFICATION_MODAL\n    };\n}\n\nfunction setSystemsToDelete(systemIds) {\n    return {\n        type: types.SET_SYSTEMS_TO_DELETE,\n        payload: systemIds\n    };\n}\n\nfunction deleteNotifications(baselineId, systemIds) {\n    return {\n        type: types.DELETE_NOTIFICATIONS,\n        payload: api.deleteSystemNotifications(baselineId, systemIds)\n    };\n}\n\nfunction getNotifications(baselineId) {\n    return {\n        type: types.GET_NOTIFICATIONS,\n        payload: api.getBaselineNotification(baselineId)\n    };\n}\n\nfunction addNotifications(baselineId, systemsToAdd) {\n    return {\n        type: types.ADD_NOTIFICATIONS,\n        payload: api.addSystemNotification(baselineId, systemsToAdd)\n    };\n}\n\nexport default {\n    toggleDeleteNotificationsModal,\n    setSystemsToDelete,\n    deleteNotifications,\n    getNotifications,\n    addNotifications\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Bullseye, Button, Modal, ModalVariant, Spinner } from '@patternfly/react-core';\nimport NotificationsSystemsTable from '../../../SystemsTable/NotificationsSystemsTable';\nimport SystemsTable from '../../../SystemsTable/SystemsTable';\nimport DeleteNotificationModal from './DeleteNotificationModal/DeleteNotificationModal';\nimport { systemNotificationsActions } from './redux';\n\nexport class SystemNotification extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            systemsToAdd: []\n        };\n\n        this.toggleModal = () => {\n            const { setSelectedSystemIds } = this.props;\n            const { modalOpened } = this.state;\n\n            setSelectedSystemIds([]);\n            this.setState({ modalOpened: !modalOpened });\n        };\n    }\n\n    deleteNotifications = async (systemIds) => {\n        const { setSystemsToDelete, toggleDeleteNotificationsModal } = this.props;\n\n        toggleDeleteNotificationsModal();\n        setSystemsToDelete(systemIds);\n    }\n\n    selectSystemsToAdd = (systemIds) => {\n        const { systemNotificationIds } = this.props;\n        let array = [ ...systemNotificationIds ];\n\n        const newIds = systemIds.filter((newId) => !array.some((existingId) => existingId === newId));\n\n        this.setState({ systemsToAdd: newIds });\n    }\n\n    addNotification = async () => {\n        const { systemsToAdd } = this.state;\n        const { addNotifications, baselineId } = this.props;\n\n        await addNotifications(baselineId, systemsToAdd);\n        this.setState({ systemsToAdd: []});\n\n        this.toggleModal();\n        this.fetchSystems(baselineId);\n    }\n\n    buildNotificationsButton = () => {\n        const { permissions } = this.props;\n\n        return <Button\n            key=\"add-baseline-notification\"\n            variant=\"primary\"\n            onClick={ this.toggleModal }\n            ouiaId=\"add-baseline-notification-button\"\n            isDisabled={ !permissions.baselinesWrite }\n        >\n            Add system\n        </Button>;\n    }\n\n    fetchSystems = async (baselineId) => {\n        const { getNotifications } = this.props;\n\n        getNotifications(baselineId);\n    }\n\n    async componentDidMount() {\n        await this.fetchSystems(this.props.baselineId);\n    }\n\n    render() {\n        const { baselineId, baselineName, deleteNotifications, deleteNotificationsModalOpened, driftClearFilters, entities,\n            permissions, selectEntities, selectHistoricProfiles, setSelectedSystemIds, systemNotificationIds,\n            systemsToDelete, toggleDeleteNotificationsModal, updateColumns, systemNotificationLoaded } = this.props;\n        const { modalOpened } = this.state;\n\n        return (\n            <React.Fragment>\n                <DeleteNotificationModal\n                    baselineId={ baselineId }\n                    deleteNotifications={ deleteNotifications }\n                    deleteNotificationsModalOpened={ deleteNotificationsModalOpened }\n                    systemsToDelete={ systemsToDelete }\n                    toggleDeleteNotificationsModal={ toggleDeleteNotificationsModal }\n                    fetchSystems={ this.fetchSystems }\n                />\n                <Modal\n                    className=\"drift\"\n                    ouiaId='add-baseline-notification-modal'\n                    variant={ ModalVariant.medium }\n                    title={ 'Associate system with ' + baselineName }\n                    isOpen={ modalOpened }\n                    onClose={ this.toggleModal }\n                    actions = { [\n                        <Button\n                            key=\"confirm\"\n                            ouiaId='add-baseline-notification-button'\n                            variant=\"primary\"\n                            onClick={ this.addNotification }\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            ouiaId='add-baseline-notification-cancel-button'\n                            variant=\"link\"\n                            onClick={ this.toggleModal }\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <SystemsTable\n                        hasMultiSelect={ true }\n                        permissions={ permissions }\n                        entities={ entities }\n                        selectVariant='checkbox'\n                        systemNotificationIds={ systemNotificationIds }\n                        baselineId={ baselineId }\n                        isAddSystemNotifications={ true }\n                        driftClearFilters={ driftClearFilters }\n                        selectEntities={ selectEntities }\n                        selectHistoricProfiles={ selectHistoricProfiles }\n                        updateColumns={ updateColumns }\n                        selectSystemsToAdd={ this.selectSystemsToAdd }\n                        selectedSystemIds={ entities?.selectedSystemIds || [] }\n                    />\n                </Modal>\n                { systemNotificationLoaded ? <NotificationsSystemsTable\n                    hasMultiSelect={ true }\n                    permissions={ permissions }\n                    selectVariant='checkbox'\n                    systemNotificationIds={ systemNotificationIds }\n                    baselineId={ baselineId }\n                    toolbarButton={ this.buildNotificationsButton() }\n                    driftClearFilters={ driftClearFilters }\n                    selectEntities={ selectEntities }\n                    selectHistoricProfiles={ selectHistoricProfiles }\n                    onSystemSelect={ setSelectedSystemIds }\n                    updateColumns={ updateColumns }\n                    deleteNotifications={ this.deleteNotifications }\n                /> : <Bullseye><Spinner size=\"xl\"/></Bullseye> }\n            </React.Fragment>\n        );\n    }\n}\n\nSystemNotification.propTypes = {\n    addNotifications: PropTypes.func,\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    entities: PropTypes.object,\n    permissions: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectEntities: PropTypes.func,\n    toggleDeleteNotificationsModal: PropTypes.func,\n    setSystemsToDelete: PropTypes.func,\n    systemsToDelete: PropTypes.array,\n    deleteNotifications: PropTypes.func,\n    deleteNotificationsModalOpened: PropTypes.bool,\n    getNotifications: PropTypes.func,\n    setSystemsToAdd: PropTypes.func,\n    systemNotificationIds: PropTypes.array,\n    systemNotificationLoaded: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        deleteNotificationsModalOpened: state.systemNotificationsState.deleteNotificationsModalOpened,\n        systemNotificationIds: state.systemNotificationsState.systemNotificationIds,\n        systemNotificationLoaded: state.systemNotificationsState.systemNotificationLoaded,\n        systemsToDelete: state.systemNotificationsState.systemsToDelete\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotifications: (baselineId, systemsToAdd) => dispatch(systemNotificationsActions.addNotifications(baselineId, systemsToAdd)),\n        toggleDeleteNotificationsModal: () => dispatch(systemNotificationsActions.toggleDeleteNotificationsModal()),\n        setSystemsToDelete: (systemIds) => dispatch(systemNotificationsActions.setSystemsToDelete(systemIds)),\n        deleteNotifications: (baselineId, systemIds) => dispatch(systemNotificationsActions.deleteNotifications(baselineId, systemIds)),\n        getNotifications: (baselineId) => dispatch(systemNotificationsActions.getNotifications(baselineId)),\n        setSelectedSystemIds: (systemIds) => dispatch({ type: 'SET_SELECTED_SYSTEM_IDS', payload: systemIds })\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemNotification);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbHeading, Tab, Tabs } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { EditAltIcon, LockIcon } from '@patternfly/react-icons';\nimport { cellWidth } from '@patternfly/react-table';\n\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport EditBaseline from './EditBaseline/EditBaseline';\nimport SystemNotification from './SystemNotification/SystemNotification';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport systemsTableActions from '../../SystemsTable/actions';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaselinePage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ],\n            loadingColumns: [\n                { title: 'Fact', transforms: [ cellWidth(40) ]},\n                { title: 'Value', transforms: [ cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            activeTab: 0\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        const { match: { params }} = this.props;\n\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-view');\n        await window.insights?.chrome?.appObjectId(params.id);\n    }\n\n    componentDidUpdate() {\n        if (this.props.baselineData) {\n            document.title = this.props.baselineData.display_name + ' - Baselines - Drift | Red Hat Insights';\n        }\n    }\n\n    changeActiveTab = (event, tabIndex) => {\n        this.setState({ activeTab: tabIndex });\n    }\n\n    async fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        await fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { clearBaselineData, fetchBaselines, history } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        fetchBaselines('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData, baselinesRead) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb ouiaId='edit-baseline-breadcrumb'>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData && baselinesRead\n                ? <BreadcrumbHeading>\n                    { baselineData.display_name }\n                </BreadcrumbHeading>\n                : null\n            }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageTitle(baselineData, baselinesRead, baselinesWrite) {\n        let pageTitle;\n\n        if (baselinesRead) {\n            if (baselinesWrite) {\n                pageTitle = <React.Fragment>\n                    <span className='pf-c-title pf-m-2xl'>\n                        { !_.isEmpty(baselineData) ? baselineData.display_name : null }\n                    </span>\n                    <span>\n                        { <EditAltIcon\n                            className='pointer not-active edit-icon-margin'\n                            data-ouia-component-id='edit-baseline-name-button'\n                            data-ouia-component-type='PF4/Button'\n                            onClick={ () => this.toggleEditNameModal() } /> }\n                    </span>\n                </React.Fragment>;\n            } else {\n                pageTitle = <React.Fragment>{ !_.isEmpty(baselineData) ? baselineData.display_name : null }</React.Fragment>;\n            }\n        } else {\n            pageTitle = <React.Fragment>{ 'Baseline' }</React.Fragment>;\n        }\n\n        return pageTitle;\n    }\n\n    renderPageHeader = ({ baselinesRead, baselinesWrite }) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader className='bottom-padding-0'>\n                        { this.renderBreadcrumb(baselineData, baselinesRead) }\n                        <div id=\"edit-baseline-title\">\n                            { this.renderPageTitle(baselineData, baselinesRead, baselinesWrite) }\n                        </div>\n                        { this.renderTabs() }\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderTabs() {\n        const { activeTab } = this.state;\n\n        return <div>\n            <Tabs\n                activeKey={ activeTab }\n                onSelect={ this.changeActiveTab }\n            >\n                <Tab\n                    eventKey={ 0 }\n                    title=\"Facts\"\n                    id=\"baseline-tab\"\n                    data-ouia-component-id=\"baseline-tab-button\"\n                >\n                </Tab>\n                <Tab\n                    eventKey={ 1 }\n                    title=\"Systems\"\n                    id=\"system-notifications-tab\"\n                    data-ouia-component-id=\"\"\n                >\n                </Tab>\n            </Tabs>\n        </div>;\n    }\n\n    renderMain(permissions) {\n        const { baselineData, baselineDataLoading, clearErrorData, driftClearFilters, editBaselineEmptyState, editBaselineError,\n            editBaselineTableData, entities, expandRow, expandedRows, exportToCSV, factModalOpened, selectFact,\n            match: { params }, selectEntities, selectHistoricProfiles, setSelectedSystemIds, updateColumns } = this.props;\n        const { activeTab } = this.state;\n        let body;\n\n        if (activeTab === 0) {\n            body = <EditBaseline\n                baselineData={ baselineData }\n                baselineDataLoading={ baselineDataLoading }\n                clearErrorData={ clearErrorData }\n                editBaselineEmptyState={ editBaselineEmptyState }\n                editBaselineError={ editBaselineError }\n                editBaselineTableData={ editBaselineTableData }\n                expandRow={ expandRow }\n                expandedRows={ expandedRows }\n                exportToCSV={ exportToCSV }\n                factModalOpened={ factModalOpened }\n                permissions={ permissions }\n                history={ history }\n                selectFact={ selectFact }\n            />;\n        } else {\n            body = <SystemNotification\n                baselineId={ params.id }\n                baselineName={ baselineData?.display_name }\n                permissions={ permissions }\n                entities={ entities }\n                driftClearFilters={ driftClearFilters }\n                selectEntities={ selectEntities }\n                selectHistoricProfiles={ selectHistoricProfiles }\n                setSelectedSystemIds={ setSelectedSystemIds }\n                updateColumns={ updateColumns }\n            />;\n        }\n\n        return body;\n    }\n\n    /*eslint-disable*/\n    render() {\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to view this Baseline' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : this.renderMain(value.permissions)\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n/*eslint-enable*/\n\nEditBaselinePage.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    fetchBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    driftClearFilters: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectEntities: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError,\n        entities: state.entities\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        },\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key)),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaselinePage));\n"],"sourceRoot":""}