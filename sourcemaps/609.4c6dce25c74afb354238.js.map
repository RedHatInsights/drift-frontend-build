{"version":3,"sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","onToggle","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","toggleBasketVisible","find","hspContent","item","clearDeselected","newArray","toggleSelected","array","removeId","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","position","PopoverPosition","bodyContent","maxHeight","overflowY","onClick","findSelected","AddSystemModal","basketIsVisible","disableSystemTable","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","onBulkSelect","systemContentSelect","data","handleSystemSelection","selectedSystems","bulk","row","display_name","ServerIcon","confirmModal","bind","cancelSelection","changeActiveTab","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","updateColumns","entityListener","addNewListener","actionType","callback","addSystemModalOpened","prevProps","baselines","historicalProfiles","systems","setSelectedContent","content","updated","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","findNotInComparison","baselinesToRemove","tabIndex","selectActiveTab","activeTab","globalFilterState","loading","permissions","setSelectedSystemIds","totalBaselines","Modal","width","ouiaId","isOpen","onClose","actions","Button","key","variant","isDisabled","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","hspRead","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","showModal","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","Tooltip","tooltip","ReferenceSelector","isReference","updateReferenceId","StarIcon","OutlinedStarIcon","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","last_updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","hasHSPReadPermissions","DriftTable","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","concat","entries","searchParams","URLSearchParams","getAll","Array","isArray","setSelectedBaselines","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","renderState","comparison","renderRowChild","category","multivalues","subFactItem","rowValue","cell","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","AddSystemButton","isTable","types","FilterDropDown","createDropdownItem","toggleDropDown","DropdownItem","display","label","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","clearAllFilters","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","loadEntities","PageHeader","PageHeaderTitle","Main","compareRead","ErrorAlert","Card","CardBody","pagination"],"mappings":"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","file":"js/609.d928ad23900ebf950138.js","sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    onToggle = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    render() {\n        const { entities, isVisible, selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.onToggle() }\n                        headerContent={ <div>Selected items</div> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            <SelectedTable\n                                selectedBaselineContent={ selectedBaselineContent }\n                                entities={ entities }\n                                selectedHSPContent={ selectedHSPContent }\n                                findType={ this.findType }\n                                handleDeselect={ this.handleDeselect }\n                                selectedSystemContent={ selectedSystemContent }\n                            />\n                        </div> }\n                    >\n                        <a onClick={ () => this.onToggle() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    entities: PropTypes.object,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ],\n            basketIsVisible: false\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.updateColumns('display_name');\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    /*eslint-disable camelcase*/\n    componentDidUpdate(prevProps) {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectedBaselineContent, selectedHSPContent, selectedSystemContent, systems } = this.props;\n        let newSelectedSystems = [];\n        let newSelectedBaselines = [];\n\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setSelectedContent();\n        }\n\n        if ((baselines.length || historicalProfiles.length || systems.length)\n            && (!selectedBaselineContent.length && !selectedHSPContent.length && !selectedSystemContent.length)) {\n            newSelectedSystems = systems.map(function(system) {\n                return { id: system.id, icon: <ServerIcon />, name: system.display_name };\n            });\n\n            handleSystemSelection(newSelectedSystems, true);\n\n            newSelectedBaselines = baselines.map(function(baseline) {\n                return { id: baseline.id, icon: <BlueprintIcon />, name: baseline.display_name };\n            });\n\n            handleBaselineSelection(newSelectedBaselines, true);\n\n            historicalProfiles.forEach(function(hsp) {\n                let content = {\n                    system_name: hsp.display_name,\n                    captured_date: hsp.updated,\n                    id: hsp.id,\n                    system_id: hsp.system_id\n                };\n\n                handleHSPSelection(content);\n            });\n        }\n    }\n    /*eslint-enable camelcase*/\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return { id: item[0], icon: <BlueprintIcon />, name: item[1] };\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push({\n                id: baselineTableData[rowId][0], icon: <BlueprintIcon />, name: baselineTableData[rowId][1]\n            });\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return { id: baseline[0], icon: <BlueprintIcon />, name: baseline[1] };\n        });\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return { id: row.id, name: row.display_name, icon: <ServerIcon /> };\n                });\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({ id: row.id, name: row.display_name, icon: <ServerIcon /> });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, handleBaselineSelection, handleHSPSelection,\n            historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles, selectedBaselineIds, selectedBaselineContent,\n            selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent, selectedSystemIds, setSelectedSystemIds,\n            totalBaselines } = this.props;\n        const { columns, basketIsVisible } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                hasHistoricalDropdown={ permissions.hspRead }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                let rowValue = subFactItem.systems.filter(cell => cell.value !== '')[0].value;\n                                rows.push(<tr\n                                    className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }\n                                    data-ouia-component-type='PF4/TableRow'\n                                    data-ouia-component-id={ 'comparison-table-row-multivalue-' + comparison.name + '-' + rowValue }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                permissions={ permissions }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                                selectedHSPIds={ selectedHSPIds }\n                                selectHistoricProfiles={ selectHistoricProfiles }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(async function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            await addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    await clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    await handleFactFilter(id);\n                } else {\n                    await filterByFact('');\n                }\n            }\n        } else {\n            await this.clearAllStateChips();\n            await this.clearAllFactChips();\n        }\n\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.loadEntities();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location.search !== '' && this.props.location.search === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, factSort, filterByFact, handleFactFilter, historicalProfiles, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, history, loading, page, perPage, referenceId, selectedBaselineIds, selectedHSPIds,\n            stateFilters, stateSort, systems, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                        setHistory={ this.setHistory }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    handleBaselineSelection={ handleBaselineSelection }\n                                                    handleHSPSelection={ handleHSPSelection }\n                                                    handleSystemSelection={ handleSystemSelection }\n                                                    permissions={ value.permissions }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    addStateFilter={ addStateFilter }\n                                                    stateFilters={ stateFilters }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    factFilter={ factFilter }\n                                                    setHistory={ this.setHistory }\n                                                    factSort={ factSort }\n                                                    stateSort={ stateSort }\n                                                    referenceId={ referenceId }\n                                                    systems={ systems }\n                                                    baselines={ baselines }\n                                                    historicalProfiles={ historicalProfiles }\n                                                    selectedHSPIds={ selectedHSPIds }\n                                                    selectedBaselineIds={ selectedBaselineIds }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    ouiaId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}