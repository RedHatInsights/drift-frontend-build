{"version":3,"file":"js/149.1691095142804.81b7c08420270acc24f3.js","mappings":"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","sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/RowFact.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/DriftTableRow.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterDropdown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterValue.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilter.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js"],"sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    navigate, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, factTypeFilters, stateFilters, factSort,\n    stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let filterFactType = factTypeFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    let searchString = searchPrefix + queryString.stringify({\n        system_ids: systemIds,\n        baseline_ids: baselineIds,\n        hsp_ids: hspIds,\n        reference_id: referenceId\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    navigate({\n        search: searchString + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            'filter[show]': filterFactType,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport addSystemModalHelpers from '../redux/helpers';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    async componentDidMount() {\n        addSystemModalHelpers.setContent({\n            systems: this.props.systems,\n            baselines: this.props.baselines,\n            historicalProfiles: this.props.historicalProfiles\n        }, this.props.handleSystemSelection, this.props.handleBaselineSelection, this.props.handleHSPSelection, this.props.selectedHSPContent);\n    }\n\n    toggleBasket = () => {\n        const { toggleBasketVisible } = this.props;\n\n        this.clearDeselected();\n        toggleBasketVisible();\n    }\n\n    applyChanges = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    displayBodyContent = (isEmpty) => {\n        const { entities, selectedSystemContent, selectedBaselineContent, selectedHSPContent } = this.props;\n        let bodyContent;\n\n        if (isEmpty) {\n            bodyContent = <EmptyStateDisplay\n                title='Nothing selected'\n                text={ [ 'Select systems and baselines to compare.' ] }\n            />;\n        } else {\n            bodyContent = <SelectedTable\n                selectedBaselineContent={ selectedBaselineContent }\n                entities={ entities }\n                selectedHSPContent={ selectedHSPContent }\n                findType={ this.findType }\n                handleDeselect={ this.handleDeselect }\n                selectedSystemContent={ selectedSystemContent }\n            />;\n        }\n\n        return bodyContent;\n    }\n\n    render() {\n        const { isVisible } = this.props;\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.toggleBasket() }\n                        headerContent={ <div>Selected items ({ this.findSelected() })</div> }\n                        footerContent={ <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ () => this.applyChanges() }\n                            ouiaId=\"confirm-selected-basket-button\"\n                            isDisabled={ !systemsToDeselect.length && !baselinesToDeselect.length && !hspsToDeselect.length }\n                        >\n                            Apply changes\n                        </Button> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            { this.displayBodyContent(this.findSelected() === 0) }\n                        </div> }\n                    >\n                        <a onClick={ () => this.toggleBasket() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    baselines: PropTypes.array,\n    entities: PropTypes.object,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    systems: PropTypes.array,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\nimport { RegistryContext } from '../../Utilities/registry';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]},\n                { title: 'Associated systems', transforms: [ cellWidth(20) ]}\n            ],\n            basketIsVisible: false,\n            previousSelectedBaselineIds: []\n        };\n\n        this.addSystemModal = React.createRef();\n    }\n\n    async componentDidMount() {\n\n        if (this.props.middlewareListener) {\n            window.entityListener = addNewListener(this.props.middlewareListener, {\n                actionType: 'SELECT_ENTITY',\n                callback: ({ data }) => {\n                    this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n                }\n            });\n        }\n    }\n\n    closePopover = () => {\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(false);\n        this.setState({ basketIsVisible: false });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setState({ previousSelectedBaselineIds: this.props.selectedBaselineIds });\n        }\n    }\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal, setSelectedBaselines } = this.props;\n        const { previousSelectedBaselineIds } = this.state;\n\n        setSelectedBaselines(previousSelectedBaselineIds, 'COMPARISON');\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    bulkSelectBasket = (baselineTableData, isSelected) => {\n        const { handleBaselineSelection } = this.props;\n        let selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselines, baselineTableData, emptyState, globalFilterState, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles,\n            selectedBaselineIds, selectedBaselineContent, selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent,\n            selectedSystemIds, setSelectedSystemIds, systems, totalBaselines, baselineError, revertBaselineFetch } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className='drift'\n                    ref={ this.addSystemModal }\n                    onScroll={ basketIsVisible ? this.closePopover : null }\n                    style={{ maxHeight: '600px' }}\n                    width={ '1200px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleSystemSelection={ handleSystemSelection }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                    systems={ systems }\n                                    baselines={ baselines }\n                                    historicalProfiles={ historicalProfiles }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                bulkSelectBasket={ this.bulkSelectBasket }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                                leftAlignToolbar={ true }\n                                hasSwitch={ false }\n                                emptyState={ emptyState }\n                                baselineError={ baselineError }\n                                revertBaselineFetch={ revertBaselineFetch }\n                                selectBaseline={ selectBaseline }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func,\n    setSelectedBaselines: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    emptyState: PropTypes.bool,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    middlewareListener: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.comparisonTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent,\n        emptyState: state.baselinesTableState.comparisonTable.emptyState,\n        baselineError: state.baselinesTableState.comparisonTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        setSelectedBaselines: (ids, tableId) => dispatch(baselinesTableActions.setSelectedBaselines(ids, tableId)),\n        revertBaselineFetch: () => dispatch(baselinesTableActions.revertBaselineFetch('COMPARISON'))\n    };\n}\n\nconst WrappedAddSystemModal = (props) => {\n    return <RegistryContext.Consumer>\n        {\n            registryContextValue =>\n                <AddSystemModal\n                    { ...props }\n                    middlewareListener={ registryContextValue?.middlewareListener } />\n        }\n    </RegistryContext.Consumer>;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedAddSystemModal);\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\nimport debounce from 'lodash/debounce';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.columnWidth = React.createRef();\n\n        this.state = {\n            refState: null\n        };\n    }\n\n    setColumnWidth = () => {\n        if (this.columnWidth) {\n            this.props.setColumnHeaderWidth(this.columnWidth.current.offsetWidth);\n            this.setState({ refState: this.columnWidth });\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', debounce(this.setColumnWidth, 500));\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderLoadingSystems() {\n        return [ <td key='loading-systems-header'><Skeleton size={ SkeletonSize.md } /></td> ];\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    ref={ this.columnWidth }\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header right-border reference-header sticky-header'\n                        : `drift-header right-border ${item.type}-header sticky-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div>\n                            <span className=\"drift-header-icon\">\n                                { typeIcon }\n                            </span>\n                            <span className=\"system-name\">{ item.display_name }</span>\n                        </div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            <span className='margin-right-4-px'>\n                                { item.last_updated\n                                    ? this.formatDate(item.last_updated)\n                                    : this.formatDate(item.updated)\n                                }\n                            </span>\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        if (this.state.refState === null && this.columnWidth?.current !== null) {\n            this.setColumnWidth();\n        }\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, masterList, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer sticky-header\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer right-border sticky-header\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { masterList.length ? this.renderSystemHeaders() : this.renderLoadingSystems() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    columnWidth: PropTypes.number,\n    setColumnHeaderWidth: PropTypes.func.isRequired\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#6A6E73' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\nfunction RowFact(props) {\n    const { expandedRows, expandRow, factName, type } = props;\n\n    const buildClassName = () => {\n        if (type === 'fact' || (type === 'category' && !expandedRows.includes(factName))) {\n            return 'sticky-column fixed-column-1';\n        } else {\n            return 'nested-fact sticky-column fixed-column-1';\n        }\n    };\n\n    const renderExpandableRowButton = () => {\n        if (expandedRows.includes(factName)) {\n            return <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        } else {\n            return <AngleRightIcon\n                className={ 'carat-margin pointer' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        }\n    };\n\n    const renderFact = () => {\n        let fact;\n\n        if (type === 'category' || type === 'multi fact') {\n            let button = renderExpandableRowButton();\n            fact = <span>{ button } { factName }</span>;\n        } else if (type === 'sub fact') {\n            fact = <p className='child-row'>{ factName }</p>;\n        } else {\n            fact = factName;\n        }\n\n        return fact;\n    };\n\n    return (\n        <td className={ buildClassName() }>\n            { renderFact() }\n        </td>\n    );\n}\n\nRowFact.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    factName: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default RowFact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport StateIcon from '../../../StateIcon/StateIcon';\nimport RowFact from './RowFact';\n\nfunction DriftTableRow(props) {\n    const { columnWidth, expandedRows, expandRow, fact, masterList, referenceId, stateSort, type } = props;\n\n    const findSystem = (systems, id) => {\n        return systems.find(system => system.id === id);\n    };\n\n    const renderState = () => {\n        return <td className='fact-state sticky-column fixed-column-2'>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    };\n\n    const createClassname = (system) => {\n        let className = [ 'comparison-cell' ];\n\n        if (system?.is_obfuscated) {\n            className.push('obfuscated');\n        }\n\n        if (referenceId && system?.state === 'DIFFERENT') {\n            className.push('highlight');\n            className.push('different-fact-cell');\n        } else if (!referenceId && fact.state === 'DIFFERENT') {\n            className.push('highlight');\n        }\n\n        return className;\n    };\n\n    const createCells = () => {\n        let cell = [];\n        let system;\n        let cellWidth;\n\n        for (let i = 0; i < masterList.length; i++) {\n            if (fact.systems) {\n                system = findSystem(fact.systems, masterList[i].id);\n            }\n\n            let className = createClassname(system);\n            if (className.includes('comparison-cell')) {\n                cellWidth = columnWidth;\n            }\n\n            cell.push(<td style={{ width: cellWidth }} className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        }\n\n        return cell;\n    };\n\n    const createRow = () => {\n        let row = [];\n\n        row.push(<RowFact expandedRows={ expandedRows } expandRow={ expandRow } factName={ fact.name } type={ type } />);\n        row.push(renderState());\n\n        row = row.concat(createCells());\n        return row;\n    };\n\n    return (\n        <tr\n            data-ouia-component-type='PF4/TableRow'\n            data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n            className={ fact.state === 'DIFFERENT' || fact.state === 'INCOMPLETE_DATA_OBFUSCATED' ? 'unexpected-row' : '' }>\n            { createRow() }\n        </tr>\n    );\n}\n\nDriftTableRow.propTypes = {\n    columnWidth: PropTypes.number,\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    fact: PropTypes.object,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    stateSort: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default DriftTableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport DriftTableRow from './DriftTableRow/DriftTableRow';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columnHeaderWidth: 0\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.topScroller = React.createRef();\n        this.headerScroll = React.createRef();\n        this.bottomScroller = React.createRef();\n        this.doubleScroll = this.doubleScroll.bind(this);\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    setColumnHeaderWidth = (width) => {\n        this.setState({ columnHeaderWidth: width });\n    }\n\n    doubleScroll() {\n        let wrapper1 = this.topScroller.current;\n        let wrapper2 = this.headerScroll.current;\n        let wrapper3 = this.bottomScroller.current;\n\n        wrapper1.onscroll = function() {\n            wrapper2.scrollLeft = wrapper1.scrollLeft;\n            wrapper3.scrollLeft = wrapper1.scrollLeft;\n        };\n\n        wrapper3.onscroll = function() {\n            wrapper1.scrollLeft = wrapper3.scrollLeft;\n            wrapper2.scrollLeft = wrapper3.scrollLeft;\n        };\n    }\n\n    async componentDidMount() {\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            await this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (!this.props.emptyState && prevProps.emptyState) {\n            const chrome = this.props.chrome;\n            await chrome?.appAction('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = this.props.searchParams\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds?.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = this.props.searchParams\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds?.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles, searchParams } = this.props;\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds?.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { updateReferenceId, searchParams } = this.props;\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    addFilters(newFilters, filters, addFunction, type) {\n        if (newFilters?.length > 0) {\n            filters.forEach(function(filter) {\n                let x = { ...filter };\n\n                if (newFilters?.includes(filter.filter.toLowerCase())) {\n                    x.selected = false;\n\n                    if (type === 'fact') {\n                        addFunction(x);\n                    }\n                }\n\n                if (type === 'state') {\n                    addFunction(x);\n                }\n            });\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, factTypeFilters, handleFactFilter, stateFilters, toggleFactTypeFilter, searchParams } = this.props;\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n        let newFactTypeFilters = searchParams.get('filter[show]')?.split(',');\n\n        this.addFilters(newStateFilters, stateFilters, addStateFilter, 'state');\n        this.addFilters(newFactTypeFilters, factTypeFilters, toggleFactTypeFilter, 'fact');\n    }\n\n    setSort() {\n        const { toggleFactSort, toggleStateSort, searchParams } = this.props;\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        if (!systemIds.includes(reference) && !baselineIds.includes(reference) && !HSPIds.includes(reference)) {\n            reference = undefined;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        rowData.push(<td className='fact-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td className='state-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, expandRow, referenceId, stateSort } = this.props;\n        const { columnHeaderWidth } = this.state;\n        let rows = [];\n\n        if (fact.comparisons) {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                expandRow={ expandRow }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'category' }\n                columnWidth={ columnHeaderWidth }\n            />);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    if (comparison.multivalues) {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            expandRow={ expandRow }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'multi fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                rows.push(<DriftTableRow\n                                    expandedRows={ expandedRows }\n                                    fact={ subFactItem }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    stateSort={ stateSort }\n                                    type={ 'multi value' }\n                                    columnWidth={ columnHeaderWidth }\n                                />);\n                            });\n                        }\n                    } else {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'sub fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n                    }\n                });\n            }\n        } else {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'fact' }\n                columnWidth={ columnHeaderWidth }\n            />);\n        }\n\n        return rows;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n        let scrollWidth = '';\n\n        if (this.bottomScroller.current) {\n            scrollWidth = this.bottomScroller.current.scrollWidth;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='sticky-table-header'>\n                    <div className='second-scroll-wrapper' onScroll={ this.doubleScroll } ref={ this.topScroller }>\n                        <div\n                            className='second-scroll'\n                            style={{ width: scrollWidth }}\n                        ></div>\n                    </div>\n                    <div\n                        className=\"drift-table-wrapper\"\n                        onScroll={ this.doubleScroll }\n                        ref={ this.headerScroll }>\n                        <table\n                            className=\"pf-c-table pf-m-compact drift-table\"\n                            data-ouia-component-type='PF4/Table'\n                            data-ouia-component-id='comparison-table'>\n                            <thead>\n                                <ComparisonHeader\n                                    factSort={ factSort }\n                                    fetchCompare={ this.fetchCompare }\n                                    permissions={ permissions }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    removeSystem={ this.removeSystem }\n                                    stateSort={ stateSort }\n                                    systemIds={ this.systemIds }\n                                    toggleFactSort={ toggleFactSort }\n                                    toggleStateSort={ toggleStateSort }\n                                    updateReferenceId={ this.updateReferenceId }\n                                    setHistory={ setHistory }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                    setColumnHeaderWidth={ this.setColumnHeaderWidth }\n                                />\n                            </thead>\n                        </table>\n                    </div>\n                </div>\n                <div\n                    className=\"drift-table-wrapper table-body-scroll\"\n                    onScroll={ this.doubleScroll }\n                    ref={ this.bottomScroller }>\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions,\n            updateReferenceId } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                    updateReferenceId={ updateReferenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    factTypeFilters: PropTypes.array,\n    toggleFactTypeFilters: PropTypes.func,\n    chrome: PropTypes.object,\n    searchParams: PropTypes.object\n};\n\nconst DriftTableWithHooks = props => {\n    const chrome = useChrome();\n    return (\n        <DriftTable { ...props } chrome={ chrome } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftTableWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isToolbar } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isToolbar ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isToolbar ? 'Add to comparison' : 'Add systems or baselines' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isToolbar: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\nfunction DriftFilterDropdown(props) {\n    const { filterType, toggleFilterType } = props;\n    const [ isOpen, toggleOpen ] = useState(false);\n\n    const selectFilter = (type) => {\n        toggleFilterType(type);\n        toggleOpen(!isOpen);\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            data-ouia-component-id='fact-name-filter'\n            key='fact-name'\n            onClick={ () => selectFilter('Fact name') }\n        >\n            Fact name\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='fact-type-filter'\n            key='fact-type'\n            onClick={ () => selectFilter('Fact type') }\n        >\n            Fact type\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='state-filter'\n            key='state'\n            onClick={ () => selectFilter('State') }\n        >\n            State\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            ouiaId='drift-filter-dropdown'\n            className='comparison-filter-dropdown-width'\n            toggle={ <DropdownToggle\n                onToggle={ toggleOpen }\n                ouiaId='drift-filter-toggle'\n                icon={ <FilterIcon /> }>\n                { filterType }\n            </DropdownToggle> }\n            isOpen={ isOpen }\n            dropdownItems={ dropdownItems }\n        />\n    );\n}\n\nDriftFilterDropdown.propTypes = {\n    filterType: PropTypes.string,\n    toggleFilterType: PropTypes.func\n};\n\nexport default DriftFilterDropdown;\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addFilter = async (filter) => {\n        const { filterFunction, setHistory } = this.props;\n\n        await filterFunction(filter);\n        setHistory();\n    }\n\n    createDropdownItem(filter, type) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ `${ type }-filter-option-${ filter.display }` } >\n                <Checkbox\n                    id={ filter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ `${ type }-filter-option-checkbox-${ filter.display }` }\n                    label={ filter.display }\n                    isChecked={ filter.selected }\n                    onChange={ () => this.addFilter(filter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(filters, type) {\n        let dropdownItems = [];\n\n        filters.forEach(function(filter) {\n            let dropdownItem = this.createDropdownItem(filter, type);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    render() {\n        const { filters, type } = this.props;\n        let dropdownItems = [];\n        const ouiaPrefix = type.split(' ').join('-').toLowerCase();\n\n        dropdownItems = this.createDropdownArray(filters, type);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId={ ouiaPrefix }\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId={ `${ ouiaPrefix }-toggle` }>\n                        { type === 'State'\n                            ? `Filter by ${ type.toLowerCase() }`\n                            : 'Show'\n                        }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    factTypeFilters: PropTypes.array,\n    filterDropdownOpened: PropTypes.bool,\n    filters: PropTypes.array,\n    filterFunction: PropTypes.func,\n    setHistory: PropTypes.func,\n    type: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown())\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarFilter } from '@patternfly/react-core';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport FilterDropDown from '../../FilterDropDown/FilterDropDown';\n\nfunction DriftFilterValue(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, filterType, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n\n    const setFactFilterChips = () => {\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    };\n\n    const setDropdownChips = (dropdownFilters) => {\n        let chips = [];\n\n        dropdownFilters.forEach(function(filter) {\n            if (filter.selected && filter.display !== 'All facts') {\n                chips.push(filter.display);\n            }\n        });\n\n        return chips;\n    };\n\n    const renderFilterInput = (type) => {\n        return <React.Fragment>\n            <ToolbarFilter\n                chips={ setFactFilterChips() }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"Fact name\"\n            >\n                { type === 'Fact name'\n                    ? <SearchBar\n                        factFilter={ factFilter }\n                        activeFactFilters={ activeFactFilters }\n                        handleFactFilter={ handleFactFilter }\n                        filterByFact={ filterByFact }\n                        setHistory={ setHistory }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(factTypeFilters) }\n                deleteChip={ removeChip }\n                categoryName=\"Fact type\"\n            >\n                { type === 'Fact type'\n                    ? <FilterDropDown\n                        filterFunction={ toggleFactTypeFilter }\n                        filters={ factTypeFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(stateFilters) }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"State\"\n            >\n                { type === 'State'\n                    ? <FilterDropDown\n                        filterFunction={ addStateFilter }\n                        filters={ stateFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n        </React.Fragment>;\n    };\n\n    return (\n        <React.Fragment>\n            { renderFilterInput(filterType) }\n        </React.Fragment>\n    );\n}\n\nDriftFilterValue.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    filterType: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilterValue;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup } from '@patternfly/react-core';\n\nimport DriftFilterDropdown from './DriftFilterDropdown';\nimport DriftFilterValue from './DriftFilterValue';\n\nfunction DriftFilter(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n    const [ filterType, toggleFilterType ] = useState('Fact name');\n\n    return (\n        <ToolbarGroup variant='filter-group'>\n            <DriftFilterDropdown\n                filterType={ filterType }\n                toggleFilterType={ toggleFilterType }\n            />\n            <DriftFilterValue\n                activeFactFilters={ activeFactFilters }\n                addStateFilter={ addStateFilter }\n                factFilter={ factFilter }\n                factTypeFilters={ factTypeFilters }\n                filterByFact={ filterByFact }\n                filterType={ filterType }\n                handleFactFilter={ handleFactFilter }\n                removeChip={ removeChip }\n                setHistory={ setHistory }\n                stateFilters={ stateFilters }\n                toggleFactTypeFilter={ toggleFactTypeFilter }\n            />\n        </ToolbarGroup>\n    );\n}\n\nDriftFilter.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    clearAllStateChips: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent } from '@patternfly/react-core';\n\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport DriftFilter from './DriftFilter/DriftFilter';\nimport { TablePagination } from '../../Pagination/Pagination';\nimport { errorExportNotification, preparingExportNotification, successfulExportNotification } from '../../../constants';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToCSV) }\n                >\n                    Export to CSV\n                </DropdownItem>,\n                <DropdownItem\n                    key='export-to-JSON'\n                    component='button'\n                    data-ouia-component-id='export-to-json-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToJSON) }\n                >\n                    Export to JSON\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { exportStatus, resetExportStatus, store } = this.props;\n\n        if (exportStatus === 'success' && prevProps.exportStatus !== 'success') {\n            successfulExportNotification(store);\n            resetExportStatus();\n        }\n\n        if (exportStatus === 'failure' && prevProps.exportStatus !== 'failure') {\n            errorExportNotification(store);\n            resetExportStatus();\n        }\n    }\n\n    prepareExport = (exportFunc) => {\n        const { store } = this.props;\n        console.log(store, 'store');\n\n        preparingExportNotification(store);\n\n        exportFunc();\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearAllSelections, clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        await clearAllSelections();\n        setHistory();\n\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, factTypeFilters, filterByFact, handleFactFilter, setHistory, stateFilters,\n            toggleFactTypeFilter } = this.props;\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else if (type === 'Fact type') {\n            toggleFactTypeFilter(factTypeFilters[1]);\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, toggleFactTypeFilter, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <DriftFilter\n                            activeFactFilters={ activeFactFilters }\n                            addStateFilter={ addStateFilter }\n                            factFilter={ factFilter }\n                            factTypeFilters={ factTypeFilters }\n                            filterByFact={ filterByFact }\n                            handleFactFilter={ handleFactFilter }\n                            removeChip={ this.removeChip }\n                            setHistory={ setHistory }\n                            stateFilters={ stateFilters }\n                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                        />\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } isToolbar={ true } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportStatus: PropTypes.string,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    resetExportStatus: PropTypes.func,\n    store: PropTypes.object\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\nimport { RegistryContext } from '../../Utilities/registry';\n\nimport { EMPTY_COMPARISON_TITLE, EMPTY_COMPARISON_MESSAGE } from '../../constants';\nimport { useSearchParams } from 'react-router-dom';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFirstReference: true\n        };\n    }\n\n    componentDidMount() {\n        document.title = this.props.title;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.searchParams !== '' && this.props.searchParams === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, factTypeFilters, historicalProfiles, referenceId, stateFilters,\n            stateSort, systems, navigate } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            navigate, systemIds, baselineIds, HSPIds, referenceId,\n            activeFactFilters, factFilter, factTypeFilters, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, previousStateSystems, navigate } = this.props;\n\n        revertCompareData();\n        setHistory(navigate, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ EMPTY_COMPARISON_TITLE }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                button={ <AddSystemButton/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearAllSelections, clearComparison, clearComparisonFilters,\n            clearSelectedBaselines, emptyState, error, exportToCSV, exportToJSON, exportStatus, factFilter, factSort, factTypeFilters, filterByFact,\n            handleFactFilter, historicalProfiles, handleBaselineSelection, handleHSPSelection, handleSystemSelection, loading, page, perPage,\n            referenceId, resetComparisonFilters, resetExportStatus, selectedBaselineIds, selectedHSPIds, stateFilters, stateSort, systems,\n            toggleFactTypeFilter, totalFacts, updatePagination, updateReferenceId, searchParams } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <RegistryContext.Consumer>\n                {\n                    registryContextValue =>\n                        (<>\n                            <PageHeader>\n                                <PageHeaderTitle title='Comparison'/>\n                            </PageHeader>\n                            <Main store={ registryContextValue?.registry.getStore() }>\n                                <PermissionContext.Consumer>\n                                    { value =>\n                                        value.permissions.compareRead === false\n                                            ? <EmptyStateDisplay\n                                                icon={ LockIcon }\n                                                color='#6a6e73'\n                                                title={ 'You do not have access to Drift comparison' }\n                                                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                            />\n                                            : <React.Fragment>\n                                                <ErrorAlert\n                                                    error={ error }\n                                                    onClose={ this.onClose }\n                                                />\n                                                { emptyState && !loading\n                                                    ? this.renderEmptyState()\n                                                    : <div></div>\n                                                }\n                                                <Card className='pf-t-light pf-m-opaque-100'>\n                                                    <CardBody>\n                                                        { !emptyState\n                                                            ? <DriftToolbar\n                                                                loading={ loading }\n                                                                history={ history }\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                totalFacts={ totalFacts }\n                                                                updatePagination={ updatePagination }\n                                                                clearComparison={ clearComparison }\n                                                                clearComparisonFilters={ clearComparisonFilters }\n                                                                exportToCSV={ exportToCSV }\n                                                                exportToJSON={ exportToJSON }\n                                                                updateReferenceId={ updateReferenceId }\n                                                                setIsFirstReference={ this.setIsFirstReference }\n                                                                clearSelectedBaselines={ clearSelectedBaselines }\n                                                                factFilter={ factFilter }\n                                                                factTypeFilters={ factTypeFilters }\n                                                                filterByFact={ filterByFact }\n                                                                stateFilters={ stateFilters }\n                                                                addStateFilter={ addStateFilter }\n                                                                toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                                activeFactFilters={ activeFactFilters }\n                                                                handleFactFilter={ handleFactFilter }\n                                                                clearAllFactFilters={ clearAllFactFilters }\n                                                                setHistory={ this.setHistory }\n                                                                resetComparisonFilters={ resetComparisonFilters }\n                                                                clearAllSelections={ clearAllSelections }\n                                                                exportStatus={ exportStatus }\n                                                                resetExportStatus={ resetExportStatus }\n                                                                store={ registryContextValue?.registry.getStore() }\n                                                            />\n                                                            : null\n                                                        }\n                                                        <DriftTable\n                                                            updateReferenceId={ updateReferenceId }\n                                                            error={ error }\n                                                            isFirstReference={ isFirstReference }\n                                                            setIsFirstReference={ this.setIsFirstReference }\n                                                            clearComparison= { clearComparison }\n                                                            handleBaselineSelection={ handleBaselineSelection }\n                                                            handleHSPSelection={ handleHSPSelection }\n                                                            handleSystemSelection={ handleSystemSelection }\n                                                            permissions={ value.permissions }\n                                                            handleFactFilter={ handleFactFilter }\n                                                            addStateFilter={ addStateFilter }\n                                                            stateFilters={ stateFilters }\n                                                            activeFactFilters={ activeFactFilters }\n                                                            factFilter={ factFilter }\n                                                            setHistory={ this.setHistory }\n                                                            factSort={ factSort }\n                                                            stateSort={ stateSort }\n                                                            referenceId={ referenceId }\n                                                            systems={ systems }\n                                                            baselines={ baselines }\n                                                            historicalProfiles={ historicalProfiles }\n                                                            selectedHSPIds={ selectedHSPIds }\n                                                            selectedBaselineIds={ selectedBaselineIds }\n                                                            factTypeFilters={ factTypeFilters }\n                                                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                            searchParams={ searchParams }\n                                                        />\n                                                        { !emptyState && !loading ?\n                                                            <Toolbar className=\"drift-toolbar\">\n                                                                <ToolbarGroup className=\"pf-c-pagination\">\n                                                                    <ToolbarItem>\n                                                                        <TablePagination\n                                                                            page={ page }\n                                                                            perPage={ perPage }\n                                                                            total={ totalFacts }\n                                                                            isCompact={ false }\n                                                                            updatePagination={ updatePagination }\n                                                                            widgetId='drift-pagination-bottom'\n                                                                            ouiaId='drift-pagination-bottom'\n                                                                            variant={ PaginationVariant.bottom }\n                                                                        />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                            </Toolbar>\n                                                            : null\n                                                        }\n                                                    </CardBody>\n                                                </Card>\n                                            </React.Fragment>\n                                    }\n                                </PermissionContext.Consumer>\n                            </Main>\n                        </>)}\n            </RegistryContext.Consumer>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.string,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    exportStatus: PropTypes.string,\n    resetExportStatus: PropTypes.func,\n    searchParams: PropTypes.object,\n    navigate: PropTypes.func,\n    title: PropTypes.string\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        exportToJSON: () => dispatch(compareActions.exportToJSON()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        toggleFactTypeFilter: (filter) => dispatch(compareActions.toggleFactTypeFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters()),\n        clearAllSelections: () => dispatch(addSystemModalActions.clearAllSelections()),\n        resetExportStatus: () => dispatch(compareActions.resetExportStatus())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        factTypeFilters: state.compareState.factTypeFilters,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        exportStatus: state.compareState.exportStatus\n    };\n}\n\nconst DriftPageWithHooks = props => {\n    const [ searchParams ] = useSearchParams();\n    const navigate = useInsightsNavigate();\n    return (\n        <DriftPage { ...props } searchParams={ searchParams } navigate={ navigate } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftPageWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n"],"names":["setHistory","navigate","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","factTypeFilters","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","filterFactType","sort","ASC","DESC","searchPrefix","searchString","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","search","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","push","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","toggleBasket","toggleBasketVisible","clearDeselected","applyChanges","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","find","hspContent","item","newArray","toggleSelected","array","removeId","displayBodyContent","isEmpty","EmptyStateDisplay","title","text","addSystemModalHelpers","setContent","systems","baselines","historicalProfiles","handleSystemSelection","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","findSelected","footerContent","Button","key","variant","onClick","ouiaId","isDisabled","position","PopoverPosition","bottom","bodyContent","maxHeight","overflowY","AddSystemModal","closePopover","disableSystemTable","basketIsVisible","createContent","content","body","DriftTooltip","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","bulkSelectBasket","systemContentSelect","data","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","transforms","sortable","cellWidth","previousSelectedBaselineIds","addSystemModal","React","middlewareListener","window","entityListener","addNewListener","actionType","callback","addSystemModalOpened","width","isStatic","hspRead","prevProps","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","findNotInComparison","baselinesToRemove","setSelectedBaselines","setSelectedContent","tabIndex","selectActiveTab","activeTab","emptyState","globalFilterState","loading","setSelectedSystemIds","totalBaselines","baselineError","revertBaselineFetch","Modal","ref","onScroll","isOpen","onClose","actions","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","leftAlignToolbar","hasSwitch","showModal","updateReferenceId","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","Consumer","registryContextValue","ReferenceSelector","isReference","StarIcon","OutlinedStarIcon","Tooltip","renderMessage","renderIcon","ComparisonHeader","setColumnWidth","columnWidth","setColumnHeaderWidth","current","offsetWidth","refState","formatDate","dateString","addEventListener","debounce","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","Skeleton","size","SkeletonSize","md","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","color","last_updated","updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderLoadingSystems","renderHeaderRow","hasHSPReadPermissions","isRequired","StateIcon","fact","CheckCircleIcon","height","ExclamationCircleIcon","QuestionCircleIcon","tooltip","RowFact","expandedRows","expandRow","factName","button","AngleDownIcon","AngleRightIcon","renderFact","DriftTableRow","findSystem","createClassname","is_obfuscated","concat","cell","i","join","value","float","LockIcon","createCells","DriftTable","columnHeaderWidth","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","topScroller","headerScroll","bottomScroller","doubleScroll","wrapper1","wrapper2","wrapper3","onscroll","scrollLeft","chrome","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","entries","searchParams","getAll","Array","isArray","get","newFilters","filters","addFunction","x","addStateFilter","handleFactFilter","toggleFactTypeFilter","split","newStateFilters","newFactTypeFilters","addFilters","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","comparisons","comparison","multivalues","subFactItem","compareData","scrollWidth","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","history","fullCompareData","error","toggleFactTypeFilters","compareActions","useChrome","AddSystemButton","isToolbar","DriftFilterDropdown","filterType","toggleFilterType","useState","toggleOpen","selectFilter","dropdownItems","DropdownItem","Dropdown","toggle","DropdownToggle","onToggle","FilterIcon","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","fieldId","onKeyPress","TextInput","placeholder","types","OPEN_FILTER_DROPDOWN","FilterDropDown","addFilter","filterFunction","createDropdownItem","toggleDropDown","display","label","dropdownItem","ouiaPrefix","createDropdownArray","filterDropdownOpened","filterDropdownActions","DriftFilterValue","factFilterChips","removeChip","setDropdownChips","dropdownFilters","chips","ToolbarFilter","deleteChip","deleteChipGroup","categoryName","DriftFilter","ToolbarGroup","clearAllFactFilters","clearAllStateChips","DriftToolbar","prepareExport","exportFunc","store","console","log","preparingExportNotification","stateFilter","resetFilters","resetComparisonFilters","dropdownOpen","clearFilters","clearComparisonFilters","clearAllSelections","clearSelectedBaselines","actionKebabItems","component","exportToCSV","exportToJSON","exportStatus","resetExportStatus","successfulExportNotification","errorExportNotification","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","top","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EMPTY_COMPARISON_MESSAGE","detail","PlusCircleIcon","EMPTY_COMPARISON_TITLE","document","PageHeader","PageHeaderTitle","Main","registry","getStore","compareRead","ErrorAlert","Card","CardBody","loadEntities","pagination","useSearchParams","useInsightsNavigate","closeToast","addNotification","description","dismissable"],"sourceRoot":""}