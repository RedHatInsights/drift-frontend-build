{"version":3,"sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","aria-label","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","onToggle","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","toggleBasketVisible","find","hspContent","item","clearDeselected","newArray","toggleSelected","array","removeId","selectedCount","isVisible","Popover","shouldClose","headerContent","position","PopoverPosition","bodyContent","maxHeight","overflowY","onClick","findSelected","AddSystemModal","basketIsVisible","disableSystemTable","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","onBulkSelect","systemContentSelect","data","handleSystemSelection","selectedSystems","row","display_name","ServerIcon","confirmModal","bind","cancelSelection","changeActiveTab","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","updateColumns","entityListener","addNewListener","actionType","callback","addSystemModalOpened","baselines","historicalProfiles","systems","content","updated","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","tabIndex","selectActiveTab","activeTab","globalFilterState","hasBaselinesReadPermissions","hasBaselinesWritePermissions","hasInventoryReadPermissions","loading","setSelectedSystemIds","totalBaselines","Modal","width","ouiaId","isOpen","onClose","actions","Button","key","variant","isDisabled","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","data-ouia-component-id","SystemsTable","hasHistoricalDropdown","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","hasReadPermissions","hasWritePermissions","kebab","showModal","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","Tooltip","tooltip","ReferenceSelector","isReference","updateReferenceId","StarIcon","data-ouia-component-type","OutlinedStarIcon","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","header-id","TimesIcon","system_profile_exists","ExclamationTriangleIcon","last_updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","DriftTable","shiftReferenceToFront","index","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","concat","entries","searchParams","URLSearchParams","getAll","Array","isArray","setSelectedBaselines","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","renderState","comparison","renderRowChild","category","multivalues","subFactItem","rowValue","cell","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","AddSystemButton","isTable","types","FilterDropDown","createDropdownItem","toggleDropDown","DropdownItem","display","label","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","prevProps","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","clearAllFilters","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","loadEntities","PageHeader","PageHeaderTitle","Main","permissions","compareRead","ErrorAlert","Card","CardBody","baselinesRead","baselinesWrite","inventoryRead","pagination"],"mappings":"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","file":"js/287.ddd2a82c62fd5c1c27cb.js","sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    onToggle = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    render() {\n        const { entities, isVisible, selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.onToggle() }\n                        headerContent={ <div>Selected items</div> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '350px', overflowY: 'scroll' }}>\n                            <SelectedTable\n                                selectedBaselineContent={ selectedBaselineContent }\n                                entities={ entities }\n                                selectedHSPContent={ selectedHSPContent }\n                                findType={ this.findType }\n                                handleDeselect={ this.handleDeselect }\n                                selectedSystemContent={ selectedSystemContent }\n                            />\n                        </div> }\n                    >\n                        <a onClick={ () => this.onToggle() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    entities: PropTypes.object,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ],\n            basketIsVisible: false\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.updateColumns('display_name');\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    /*eslint-disable camelcase*/\n    componentDidUpdate() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectedBaselineContent, selectedHSPContent, selectedSystemContent, systems } = this.props;\n        let newSelectedSystems = [];\n        let newSelectedBaselines = [];\n\n        if ((baselines.length || historicalProfiles.length || systems.length)\n            && (!selectedBaselineContent.length && !selectedHSPContent.length && !selectedSystemContent.length)) {\n            newSelectedSystems = systems.map(function(system) {\n                return { id: system.id, icon: <ServerIcon />, name: system.display_name };\n            });\n\n            handleSystemSelection(newSelectedSystems, true);\n\n            newSelectedBaselines = baselines.map(function(baseline) {\n                return { id: baseline.id, icon: <BlueprintIcon />, name: baseline.display_name };\n            });\n\n            handleBaselineSelection(newSelectedBaselines, true);\n\n            historicalProfiles.forEach(function(hsp) {\n                let content = {\n                    system_name: hsp.display_name,\n                    captured_date: hsp.updated,\n                    id: hsp.id,\n                    system_id: hsp.system_id\n                };\n\n                handleHSPSelection(content);\n            });\n        }\n    }\n    /*eslint-enable camelcase*/\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return { id: item[0], icon: <BlueprintIcon />, name: item[1] };\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push({\n                id: baselineTableData[rowId][0], icon: <BlueprintIcon />, name: baselineTableData[rowId][1]\n            });\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return { id: baseline[0], icon: <BlueprintIcon />, name: baseline[1] };\n        });\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            selectedSystems = entities.rows.map(function(row) {\n                return { id: row.id, name: row.display_name, icon: <ServerIcon /> };\n            });\n        } else {\n            entities.rows.forEach(function(row) {\n                if (row.id === data.id) {\n                    selectedSystems.push({ id: row.id, name: row.display_name, icon: <ServerIcon /> });\n                }\n            });\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, handleBaselineSelection, handleHSPSelection,\n            hasBaselinesReadPermissions, hasBaselinesWritePermissions, hasInventoryReadPermissions, historicalProfiles, loading, entities,\n            selectEntity, selectHistoricProfiles, selectedBaselineIds, selectedBaselineContent, selectedHSPContent, selectedHSPIds,\n            selectBaseline, selectedSystemContent, selectedSystemIds, setSelectedSystemIds, totalBaselines } = this.props;\n        const { columns, basketIsVisible } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                hasReadPermissions={ hasBaselinesReadPermissions }\n                                hasWritePermissions={ hasBaselinesWritePermissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    updateColumns: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, referenceId, removeSystem, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                let rowValue = subFactItem.systems.filter(cell => cell.value !== '')[0].value;\n                                rows.push(<tr\n                                    className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }\n                                    data-ouia-component-type='PF4/TableRow'\n                                    data-ouia-component-id={ 'comparison-table-row-multivalue-' + comparison.name + '-' + rowValue }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, referenceId, selectedBaselineIds, selectedHSPIds, selectHistoricProfiles,\n            setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                                selectedHSPIds={ selectedHSPIds }\n                                selectHistoricProfiles={ selectHistoricProfiles }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, hasBaselinesReadPermissions, hasBaselinesWritePermissions,\n            hasInventoryReadPermissions, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    hasBaselinesReadPermissions={ hasBaselinesReadPermissions }\n                    hasBaselinesWritePermissions={ hasBaselinesWritePermissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(async function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            await addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    await clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    await handleFactFilter(id);\n                } else {\n                    await filterByFact('');\n                }\n            }\n        } else {\n            await this.clearAllStateChips();\n            await this.clearAllFactChips();\n        }\n\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.loadEntities();\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, factSort, filterByFact, handleFactFilter, historicalProfiles, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, history, loading, page, perPage, referenceId, selectedBaselineIds, selectedHSPIds,\n            stateFilters, stateSort, systems, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                        setHistory={ this.setHistory }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    handleBaselineSelection={ handleBaselineSelection }\n                                                    handleHSPSelection={ handleHSPSelection }\n                                                    handleSystemSelection={ handleSystemSelection }\n                                                    hasBaselinesReadPermissions={ value.permissions.baselinesRead }\n                                                    hasBaselinesWritePermissions={ value.permissions.baselinesWrite }\n                                                    hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    addStateFilter={ addStateFilter }\n                                                    stateFilters={ stateFilters }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    factFilter={ factFilter }\n                                                    setHistory={ this.setHistory }\n                                                    factSort={ factSort }\n                                                    stateSort={ stateSort }\n                                                    referenceId={ referenceId }\n                                                    systems={ systems }\n                                                    baselines={ baselines }\n                                                    historicalProfiles={ historicalProfiles }\n                                                    selectedHSPIds={ selectedHSPIds }\n                                                    selectedBaselineIds={ selectedBaselineIds }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    ouiaId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}