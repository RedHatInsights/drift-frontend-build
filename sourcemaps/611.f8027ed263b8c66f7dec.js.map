{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","deselectHistoricalProfiles","selectSingleHSP","updateColumns","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","key","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","renderRadioButtons","className","Form","FormGroup","label","isRequired","type","helperTextInvalid","Object","prototype","hasOwnProperty","call","detail","fieldId","validated","onKeyPress","TextInput","placeholder","value","onChange","ValidatedOptions","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","cellWidth","setState","handleChecked","_","currentTarget","window","entityListener","addNewListener","actionType","callback","createBaselineModalOpened","selectedKey","this","radioChecked","keys","forEach","substring","length","toLowerCase","createBaseline","selectedBaselineIds","history","entities","newBaselineObject","display_name","baseline_facts","selectedSystemIds","inventory_uuid","selectedHSP","hsp_uuid","id","push","baselineData","Radio","isChecked","ouiaId","name","loading","permissions","totalBaselines","BaselinesTable","tableId","tableData","hasMultiSelect","SystemsTable","createBaselineModal","hasHistoricalDropdown","hspRead","historicalProfiles","selectVariant","Button","variant","isDisabled","findSelectedRadio","onClick","globalFilterState","Modal","width","isOpen","onClose","actions","renderActions","GlobalFilterAlert","status","Alert","isInline","Component","propTypes","PropTypes","updatePagination","selectHistoricProfiles","setSelectedSystemIds","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","dispatch","createBaselineModalActions","uuid","baselinesTableActions","profile","systemsTableActions","BaselinesPage","fetchBaseline","baselineId","map","item","onBulkSelect","ids","baseline","renderEmptyState","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","undefined","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","error","button","UndoIcon","AddCircleOIcon","CreateBaselineButton","insights","chrome","auth","getUser","appAction","clearEditBaselineData","CardBody","kebab","createButton","exportButton","PageHeader","PageHeaderTitle","Main","baselinesRead","LockIcon","ErrorAlert","Card","renderTable","entitiesLoading","checkboxTable","editBaselineActions","historicProfileIds","historicProfilesActions","addSystemModalActions"],"mappings":"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","file":"js/611.ef348682a6488928a5ec.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../../store';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../../GlobalFilterAlert/GlobalFilterAlert';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport systemsTableActions from '../../SystemsTable/actions';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(40) ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async componentDidMount() {\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: () => {\n                this.props.createBaselineModalOpened ? this.deselectHistoricalProfiles() : null;\n            }\n        });\n    }\n\n    deselectHistoricalProfiles = async () => {\n        const { selectSingleHSP, updateColumns } = this.props;\n\n        await updateColumns('display_name');\n        selectSingleHSP();\n    };\n\n    findSelectedRadio() {\n        const { copyBaselineChecked, copySystemChecked, fromScratchChecked } = this.state;\n        const radioChecked = { copyBaselineChecked, copySystemChecked, fromScratchChecked };\n        let keys = Object.keys(radioChecked);\n        let selectedKey;\n\n        keys.forEach(function(key) {\n            if (radioChecked[key]) {\n                selectedKey = key.substring(0, key.length - 7).toLowerCase();\n            }\n        });\n\n        return selectedKey;\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectSingleHSP } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities?.selectedSystemIds.length && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities?.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (entities?.selectedHSP && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = entities.selectedHSP.id;\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                selectSingleHSP();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n\n        let id = [ baselineTableData[rowId][0] ];\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines, selectSingleHSP } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        selectSingleHSP();\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                ouiaId='create-baseline-from-scratch-radio'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                ouiaId='create-baseline-copy-baseline-radio'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                ouiaId='create-baseline-copy-system-radio'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, createBaselineModalOpened, loading, permissions, selectedBaselineIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n                permissions={ permissions }\n                hasMultiSelect={ false }\n                selectedBaselineIds={ selectedBaselineIds }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { entities, permissions } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <br></br>\n            <SystemsTable\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ permissions.hspRead }\n                hasMultiSelect={ false }\n                historicalProfiles={ entities?.selectedHSP ? [ entities.selectedHSP ] : [] }\n                permissions={ permissions }\n                entities={ entities }\n                selectVariant='radio'\n                deselectHistoricalProfiles={ this.deselectHistoricalProfiles }\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <div className='md-padding-top md-padding-bottom'>\n                <Form>\n                    <FormGroup\n                        label='Baseline name'\n                        isRequired\n                        type=\"text\"\n                        helperTextInvalid={ Object.prototype.hasOwnProperty.call(createBaselineError, 'detail') ? createBaselineError.detail : null }\n                        fieldId=\"name\"\n                        validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? 'error' : null }\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            className=\"fact-value\"\n                            placeholder=\"Baseline name\"\n                            value={ baselineName }\n                            type=\"text\"\n                            onChange={ this.updateBaselineName }\n                            validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? ValidatedOptions.error : null }\n                            aria-label=\"baseline name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                (!entities?.selectedSystemIds.length && !entities?.selectedHSP)\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled\n                    ouiaId={ 'create-baseline-button-' + this.findSelectedRadio() }\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"create-baseline-modal-cancel-button\"\n                >\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }\n                    ouiaId={ 'create-baseline-button-' + this.findSelectedRadio() }\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"create-baseline-modal-cancel-button\"\n                >\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened, globalFilterState } = this.props;\n        const { copySystemChecked } = this.state;\n\n        return (\n            <Modal\n                className=\"drift\"\n                width=\"1200px\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { copySystemChecked\n                    ? <GlobalFilterAlert globalFilterState={ globalFilterState }/>\n                    : null\n                }\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                        ouiaId=\"status\"\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    selectSingleHSP: PropTypes.func,\n    updateColumns: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        selectSingleHSP: (profile) => dispatch(systemsTableActions.selectSingleHSP(profile)),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaselinePage/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable, cellWidth(40) ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-list');\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable(permissions) {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                        permissions={ permissions }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = (permissions) => {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton\n                    emptyState={ emptyState }\n                    permissions={ permissions }\n                    loading={ loading } /> }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + baselineError.status + ': ' + baselineError.detail }\n                button={ <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch, selectHistoricProfiles, setSelectedSystemIds } = this.props;\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        <CreateBaselineModal\n                            permissions={ value.permissions }\n                            selectHistoricProfiles={ selectHistoricProfiles }\n                            setSelectedSystemIds={ setSelectedSystemIds }\n                        />\n                        <PageHeader>\n                            <PageHeaderTitle title='Baselines'/>\n                        </PageHeader>\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState(value.permissions)\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable(value.permissions)\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number,\n    selectHistoricProfiles: PropTypes.func,\n    setSelectedSystemIds: PropTypes.func,\n    entitiesLoading: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}