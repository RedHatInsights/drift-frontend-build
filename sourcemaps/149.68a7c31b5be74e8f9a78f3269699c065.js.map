{"version":3,"file":"js/149.08fe55dad3b7ecb8f795.js","mappings":"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","sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/RowFact.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/DriftTableRow.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterDropdown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilterValue.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftFilter/DriftFilter.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js"],"sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    navigate, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, factTypeFilters, stateFilters, factSort,\n    stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let filterFactType = factTypeFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    let searchString = searchPrefix + queryString.stringify({\n        system_ids: systemIds,\n        baseline_ids: baselineIds,\n        hsp_ids: hspIds,\n        reference_id: referenceId\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    navigate({\n        search: searchString + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            'filter[show]': filterFactType,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport addSystemModalHelpers from '../redux/helpers';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    async componentDidMount() {\n        addSystemModalHelpers.setContent({\n            systems: this.props.systems,\n            baselines: this.props.baselines,\n            historicalProfiles: this.props.historicalProfiles\n        }, this.props.handleSystemSelection, this.props.handleBaselineSelection, this.props.handleHSPSelection, this.props.selectedHSPContent);\n    }\n\n    toggleBasket = () => {\n        const { toggleBasketVisible } = this.props;\n\n        this.clearDeselected();\n        toggleBasketVisible();\n    }\n\n    applyChanges = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    displayBodyContent = (isEmpty) => {\n        const { entities, selectedSystemContent, selectedBaselineContent, selectedHSPContent } = this.props;\n        let bodyContent;\n\n        if (isEmpty) {\n            bodyContent = <EmptyStateDisplay\n                title='Nothing selected'\n                text={ [ 'Select systems and baselines to compare.' ] }\n            />;\n        } else {\n            bodyContent = <SelectedTable\n                selectedBaselineContent={ selectedBaselineContent }\n                entities={ entities }\n                selectedHSPContent={ selectedHSPContent }\n                findType={ this.findType }\n                handleDeselect={ this.handleDeselect }\n                selectedSystemContent={ selectedSystemContent }\n            />;\n        }\n\n        return bodyContent;\n    }\n\n    render() {\n        const { isVisible } = this.props;\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.toggleBasket() }\n                        headerContent={ <div>Selected items ({ this.findSelected() })</div> }\n                        footerContent={ <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ () => this.applyChanges() }\n                            ouiaId=\"confirm-selected-basket-button\"\n                            isDisabled={ !systemsToDeselect.length && !baselinesToDeselect.length && !hspsToDeselect.length }\n                        >\n                            Apply changes\n                        </Button> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            { this.displayBodyContent(this.findSelected() === 0) }\n                        </div> }\n                    >\n                        <a onClick={ () => this.toggleBasket() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    baselines: PropTypes.array,\n    entities: PropTypes.object,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    systems: PropTypes.array,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\nimport { RegistryContext } from '../../Utilities/registry';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]},\n                { title: 'Associated systems', transforms: [ cellWidth(20) ]}\n            ],\n            basketIsVisible: false,\n            previousSelectedBaselineIds: []\n        };\n\n        this.addSystemModal = React.createRef();\n    }\n\n    async componentDidMount() {\n\n        if (this.props.middlewareListener) {\n            window.entityListener = addNewListener(this.props.middlewareListener, {\n                actionType: 'SELECT_ENTITY',\n                callback: ({ data }) => {\n                    this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n                }\n            });\n        }\n    }\n\n    closePopover = () => {\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(false);\n        this.setState({ basketIsVisible: false });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setState({ previousSelectedBaselineIds: this.props.selectedBaselineIds });\n        }\n    }\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal, setSelectedBaselines } = this.props;\n        const { previousSelectedBaselineIds } = this.state;\n\n        setSelectedBaselines(previousSelectedBaselineIds, 'COMPARISON');\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    bulkSelectBasket = (baselineTableData, isSelected) => {\n        const { handleBaselineSelection } = this.props;\n        let selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselines, baselineTableData, emptyState, globalFilterState, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles,\n            selectedBaselineIds, selectedBaselineContent, selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent,\n            selectedSystemIds, setSelectedSystemIds, systems, totalBaselines, baselineError, revertBaselineFetch } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className='drift'\n                    ref={ this.addSystemModal }\n                    onScroll={ basketIsVisible ? this.closePopover : null }\n                    style={{ maxHeight: '600px' }}\n                    width={ '1200px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleSystemSelection={ handleSystemSelection }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                    systems={ systems }\n                                    baselines={ baselines }\n                                    historicalProfiles={ historicalProfiles }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                bulkSelectBasket={ this.bulkSelectBasket }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                                leftAlignToolbar={ true }\n                                hasSwitch={ false }\n                                emptyState={ emptyState }\n                                baselineError={ baselineError }\n                                revertBaselineFetch={ revertBaselineFetch }\n                                selectBaseline={ selectBaseline }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func,\n    setSelectedBaselines: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    emptyState: PropTypes.bool,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    middlewareListener: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.comparisonTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent,\n        emptyState: state.baselinesTableState.comparisonTable.emptyState,\n        baselineError: state.baselinesTableState.comparisonTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        setSelectedBaselines: (ids, tableId) => dispatch(baselinesTableActions.setSelectedBaselines(ids, tableId)),\n        revertBaselineFetch: () => dispatch(baselinesTableActions.revertBaselineFetch('COMPARISON'))\n    };\n}\n\nconst WrappedAddSystemModal = (props) => {\n    return <RegistryContext.Consumer>\n        {\n            registryContextValue =>\n                <AddSystemModal\n                    { ...props }\n                    middlewareListener={ registryContextValue?.middlewareListener } />\n        }\n    </RegistryContext.Consumer>;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedAddSystemModal);\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\nimport debounce from 'lodash/debounce';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.columnWidth = React.createRef();\n\n        this.state = {\n            refState: null\n        };\n    }\n\n    setColumnWidth = () => {\n        if (this.columnWidth) {\n            this.props.setColumnHeaderWidth(this.columnWidth.current.offsetWidth);\n            this.setState({ refState: this.columnWidth });\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', debounce(this.setColumnWidth, 500));\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderLoadingSystems() {\n        return [ <td key='loading-systems-header'><Skeleton size={ SkeletonSize.md } /></td> ];\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    ref={ this.columnWidth }\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header right-border reference-header sticky-header'\n                        : `drift-header right-border ${item.type}-header sticky-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div>\n                            <span className=\"drift-header-icon\">\n                                { typeIcon }\n                            </span>\n                            <span className=\"system-name\">{ item.display_name }</span>\n                        </div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            <span className='margin-right-4-px'>\n                                { item.last_updated\n                                    ? this.formatDate(item.last_updated)\n                                    : this.formatDate(item.updated)\n                                }\n                            </span>\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        if (this.state.refState === null && this.columnWidth?.current !== null) {\n            this.setColumnWidth();\n        }\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, masterList, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer sticky-header\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer right-border sticky-header\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { masterList.length ? this.renderSystemHeaders() : this.renderLoadingSystems() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    columnWidth: PropTypes.number,\n    setColumnHeaderWidth: PropTypes.func.isRequired\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#6A6E73' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\nfunction RowFact(props) {\n    const { expandedRows, expandRow, factName, type } = props;\n\n    const buildClassName = () => {\n        if (type === 'fact' || (type === 'category' && !expandedRows.includes(factName))) {\n            return 'sticky-column fixed-column-1';\n        } else {\n            return 'nested-fact sticky-column fixed-column-1';\n        }\n    };\n\n    const renderExpandableRowButton = () => {\n        if (expandedRows.includes(factName)) {\n            return <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        } else {\n            return <AngleRightIcon\n                className={ 'carat-margin pointer' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        }\n    };\n\n    const renderFact = () => {\n        let fact;\n\n        if (type === 'category' || type === 'multi fact') {\n            let button = renderExpandableRowButton();\n            fact = <span>{ button } { factName }</span>;\n        } else if (type === 'sub fact') {\n            fact = <p className='child-row'>{ factName }</p>;\n        } else {\n            fact = factName;\n        }\n\n        return fact;\n    };\n\n    return (\n        <td className={ buildClassName() }>\n            { renderFact() }\n        </td>\n    );\n}\n\nRowFact.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    factName: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default RowFact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport StateIcon from '../../../StateIcon/StateIcon';\nimport RowFact from './RowFact';\n\nfunction DriftTableRow(props) {\n    const { columnWidth, expandedRows, expandRow, fact, masterList, referenceId, stateSort, type } = props;\n\n    const findSystem = (systems, id) => {\n        return systems.find(system => system.id === id);\n    };\n\n    const renderState = () => {\n        return <td className='fact-state sticky-column fixed-column-2'>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    };\n\n    const createClassname = (system) => {\n        let className = [ 'comparison-cell' ];\n\n        if (system?.is_obfuscated) {\n            className.push('obfuscated');\n        }\n\n        if (referenceId && system?.state === 'DIFFERENT') {\n            className.push('highlight');\n            className.push('different-fact-cell');\n        } else if (!referenceId && fact.state === 'DIFFERENT') {\n            className.push('highlight');\n        }\n\n        return className;\n    };\n\n    const createCells = () => {\n        let cell = [];\n        let system;\n        let cellWidth;\n\n        for (let i = 0; i < masterList.length; i++) {\n            if (fact.systems) {\n                system = findSystem(fact.systems, masterList[i].id);\n            }\n\n            let className = createClassname(system);\n            if (className.includes('comparison-cell')) {\n                cellWidth = columnWidth;\n            }\n\n            cell.push(<td style={{ width: cellWidth }} className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        }\n\n        return cell;\n    };\n\n    const createRow = () => {\n        let row = [];\n\n        row.push(<RowFact expandedRows={ expandedRows } expandRow={ expandRow } factName={ fact.name } type={ type } />);\n        row.push(renderState());\n\n        row = row.concat(createCells());\n        return row;\n    };\n\n    return (\n        <tr\n            data-ouia-component-type='PF4/TableRow'\n            data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n            className={ fact.state === 'DIFFERENT' || fact.state === 'INCOMPLETE_DATA_OBFUSCATED' ? 'unexpected-row' : '' }>\n            { createRow() }\n        </tr>\n    );\n}\n\nDriftTableRow.propTypes = {\n    columnWidth: PropTypes.number,\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    fact: PropTypes.object,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    stateSort: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default DriftTableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport DriftTableRow from './DriftTableRow/DriftTableRow';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columnHeaderWidth: 0\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.topScroller = React.createRef();\n        this.headerScroll = React.createRef();\n        this.bottomScroller = React.createRef();\n        this.doubleScroll = this.doubleScroll.bind(this);\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    setColumnHeaderWidth = (width) => {\n        this.setState({ columnHeaderWidth: width });\n    }\n\n    doubleScroll() {\n        let wrapper1 = this.topScroller.current;\n        let wrapper2 = this.headerScroll.current;\n        let wrapper3 = this.bottomScroller.current;\n\n        wrapper1.onscroll = function() {\n            wrapper2.scrollLeft = wrapper1.scrollLeft;\n            wrapper3.scrollLeft = wrapper1.scrollLeft;\n        };\n\n        wrapper3.onscroll = function() {\n            wrapper1.scrollLeft = wrapper3.scrollLeft;\n            wrapper2.scrollLeft = wrapper3.scrollLeft;\n        };\n    }\n\n    async componentDidMount() {\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            await this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async componentDidUpdate(prevProps) {\n        if (!this.props.emptyState && prevProps.emptyState) {\n            const chrome = this.props.chrome;\n            await chrome?.appAction('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = this.props.searchParams\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds?.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = this.props.searchParams\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds?.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles, searchParams } = this.props;\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds?.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { updateReferenceId, searchParams } = this.props;\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    addFilters(newFilters, filters, addFunction, type) {\n        if (newFilters?.length > 0) {\n            filters.forEach(function(filter) {\n                let x = { ...filter };\n\n                if (newFilters?.includes(filter.filter.toLowerCase())) {\n                    x.selected = false;\n\n                    if (type === 'fact') {\n                        addFunction(x);\n                    }\n                }\n\n                if (type === 'state') {\n                    addFunction(x);\n                }\n            });\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, factTypeFilters, handleFactFilter, stateFilters, toggleFactTypeFilter, searchParams } = this.props;\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n        let newFactTypeFilters = searchParams.get('filter[show]')?.split(',');\n\n        this.addFilters(newStateFilters, stateFilters, addStateFilter, 'state');\n        this.addFilters(newFactTypeFilters, factTypeFilters, toggleFactTypeFilter, 'fact');\n    }\n\n    setSort() {\n        const { toggleFactSort, toggleStateSort, searchParams } = this.props;\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        if (!systemIds.includes(reference) && !baselineIds.includes(reference) && !HSPIds.includes(reference)) {\n            reference = undefined;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        rowData.push(<td className='fact-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td className='state-loading-width'><Skeleton size={ SkeletonSize.md } /></td>);\n        rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, expandRow, referenceId, stateSort } = this.props;\n        const { columnHeaderWidth } = this.state;\n        let rows = [];\n\n        if (fact.comparisons) {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                expandRow={ expandRow }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'category' }\n                columnWidth={ columnHeaderWidth }\n            />);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    if (comparison.multivalues) {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            expandRow={ expandRow }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'multi fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                rows.push(<DriftTableRow\n                                    expandedRows={ expandedRows }\n                                    fact={ subFactItem }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    stateSort={ stateSort }\n                                    type={ 'multi value' }\n                                    columnWidth={ columnHeaderWidth }\n                                />);\n                            });\n                        }\n                    } else {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'sub fact' }\n                            columnWidth={ columnHeaderWidth }\n                        />);\n                    }\n                });\n            }\n        } else {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'fact' }\n                columnWidth={ columnHeaderWidth }\n            />);\n        }\n\n        return rows;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n        let scrollWidth = '';\n\n        if (this.bottomScroller.current) {\n            scrollWidth = this.bottomScroller.current.scrollWidth;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='sticky-table-header'>\n                    <div className='second-scroll-wrapper' onScroll={ this.doubleScroll } ref={ this.topScroller }>\n                        <div\n                            className='second-scroll'\n                            style={{ width: scrollWidth }}\n                        ></div>\n                    </div>\n                    <div\n                        className=\"drift-table-wrapper\"\n                        onScroll={ this.doubleScroll }\n                        ref={ this.headerScroll }>\n                        <table\n                            className=\"pf-c-table pf-m-compact drift-table\"\n                            data-ouia-component-type='PF4/Table'\n                            data-ouia-component-id='comparison-table'>\n                            <thead>\n                                <ComparisonHeader\n                                    factSort={ factSort }\n                                    fetchCompare={ this.fetchCompare }\n                                    permissions={ permissions }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    removeSystem={ this.removeSystem }\n                                    stateSort={ stateSort }\n                                    systemIds={ this.systemIds }\n                                    toggleFactSort={ toggleFactSort }\n                                    toggleStateSort={ toggleStateSort }\n                                    updateReferenceId={ this.updateReferenceId }\n                                    setHistory={ setHistory }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                    setColumnHeaderWidth={ this.setColumnHeaderWidth }\n                                />\n                            </thead>\n                        </table>\n                    </div>\n                </div>\n                <div\n                    className=\"drift-table-wrapper table-body-scroll\"\n                    onScroll={ this.doubleScroll }\n                    ref={ this.bottomScroller }>\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions,\n            updateReferenceId } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                    updateReferenceId={ updateReferenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    factTypeFilters: PropTypes.array,\n    toggleFactTypeFilters: PropTypes.func,\n    chrome: PropTypes.object,\n    searchParams: PropTypes.object\n};\n\nconst DriftTableWithHooks = props => {\n    const chrome = useChrome();\n    return (\n        <DriftTable { ...props } chrome={ chrome } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftTableWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isToolbar } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isToolbar ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isToolbar ? 'Add to comparison' : 'Add systems or baselines' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isToolbar: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\nfunction DriftFilterDropdown(props) {\n    const { filterType, toggleFilterType } = props;\n    const [ isOpen, toggleOpen ] = useState(false);\n\n    const selectFilter = (type) => {\n        toggleFilterType(type);\n        toggleOpen(!isOpen);\n    };\n\n    const dropdownItems = [\n        <DropdownItem\n            data-ouia-component-id='fact-name-filter'\n            key='fact-name'\n            onClick={ () => selectFilter('Fact name') }\n        >\n            Fact name\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='fact-type-filter'\n            key='fact-type'\n            onClick={ () => selectFilter('Fact type') }\n        >\n            Fact type\n        </DropdownItem>,\n        <DropdownItem\n            data-ouia-component-id='state-filter'\n            key='state'\n            onClick={ () => selectFilter('State') }\n        >\n            State\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            ouiaId='drift-filter-dropdown'\n            className='comparison-filter-dropdown-width'\n            toggle={ <DropdownToggle\n                onToggle={ toggleOpen }\n                ouiaId='drift-filter-toggle'\n                icon={ <FilterIcon /> }>\n                { filterType }\n            </DropdownToggle> }\n            isOpen={ isOpen }\n            dropdownItems={ dropdownItems }\n        />\n    );\n}\n\nDriftFilterDropdown.propTypes = {\n    filterType: PropTypes.string,\n    toggleFilterType: PropTypes.func\n};\n\nexport default DriftFilterDropdown;\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addFilter = async (filter) => {\n        const { filterFunction, setHistory } = this.props;\n\n        await filterFunction(filter);\n        setHistory();\n    }\n\n    createDropdownItem(filter, type) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ `${ type }-filter-option-${ filter.display }` } >\n                <Checkbox\n                    id={ filter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ `${ type }-filter-option-checkbox-${ filter.display }` }\n                    label={ filter.display }\n                    isChecked={ filter.selected }\n                    onChange={ () => this.addFilter(filter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(filters, type) {\n        let dropdownItems = [];\n\n        filters.forEach(function(filter) {\n            let dropdownItem = this.createDropdownItem(filter, type);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    render() {\n        const { filters, type } = this.props;\n        let dropdownItems = [];\n        const ouiaPrefix = type.split(' ').join('-').toLowerCase();\n\n        dropdownItems = this.createDropdownArray(filters, type);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId={ ouiaPrefix }\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId={ `${ ouiaPrefix }-toggle` }>\n                        { type === 'State'\n                            ? `Filter by ${ type.toLowerCase() }`\n                            : 'Show'\n                        }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    factTypeFilters: PropTypes.array,\n    filterDropdownOpened: PropTypes.bool,\n    filters: PropTypes.array,\n    filterFunction: PropTypes.func,\n    setHistory: PropTypes.func,\n    type: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown())\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarFilter } from '@patternfly/react-core';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport FilterDropDown from '../../FilterDropDown/FilterDropDown';\n\nfunction DriftFilterValue(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, filterType, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n\n    const setFactFilterChips = () => {\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    };\n\n    const setDropdownChips = (dropdownFilters) => {\n        let chips = [];\n\n        dropdownFilters.forEach(function(filter) {\n            if (filter.selected && filter.display !== 'All facts') {\n                chips.push(filter.display);\n            }\n        });\n\n        return chips;\n    };\n\n    const renderFilterInput = (type) => {\n        return <React.Fragment>\n            <ToolbarFilter\n                chips={ setFactFilterChips() }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"Fact name\"\n            >\n                { type === 'Fact name'\n                    ? <SearchBar\n                        factFilter={ factFilter }\n                        activeFactFilters={ activeFactFilters }\n                        handleFactFilter={ handleFactFilter }\n                        filterByFact={ filterByFact }\n                        setHistory={ setHistory }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(factTypeFilters) }\n                deleteChip={ removeChip }\n                categoryName=\"Fact type\"\n            >\n                { type === 'Fact type'\n                    ? <FilterDropDown\n                        filterFunction={ toggleFactTypeFilter }\n                        filters={ factTypeFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n            <ToolbarFilter\n                className='comparison-filter-input-dropdown-width'\n                chips={ setDropdownChips(stateFilters) }\n                deleteChip={ removeChip }\n                deleteChipGroup={ removeChip }\n                categoryName=\"State\"\n            >\n                { type === 'State'\n                    ? <FilterDropDown\n                        filterFunction={ addStateFilter }\n                        filters={ stateFilters }\n                        setHistory={ setHistory }\n                        type={ type }\n                    />\n                    : null\n                }\n            </ToolbarFilter>\n        </React.Fragment>;\n    };\n\n    return (\n        <React.Fragment>\n            { renderFilterInput(filterType) }\n        </React.Fragment>\n    );\n}\n\nDriftFilterValue.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    filterType: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilterValue;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarGroup } from '@patternfly/react-core';\n\nimport DriftFilterDropdown from './DriftFilterDropdown';\nimport DriftFilterValue from './DriftFilterValue';\n\nfunction DriftFilter(props) {\n    const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, removeChip,\n        setHistory, stateFilters, toggleFactTypeFilter } = props;\n    const [ filterType, toggleFilterType ] = useState('Fact name');\n\n    return (\n        <ToolbarGroup variant='filter-group'>\n            <DriftFilterDropdown\n                filterType={ filterType }\n                toggleFilterType={ toggleFilterType }\n            />\n            <DriftFilterValue\n                activeFactFilters={ activeFactFilters }\n                addStateFilter={ addStateFilter }\n                factFilter={ factFilter }\n                factTypeFilters={ factTypeFilters }\n                filterByFact={ filterByFact }\n                filterType={ filterType }\n                handleFactFilter={ handleFactFilter }\n                removeChip={ removeChip }\n                setHistory={ setHistory }\n                stateFilters={ stateFilters }\n                toggleFactTypeFilter={ toggleFactTypeFilter }\n            />\n        </ToolbarGroup>\n    );\n}\n\nDriftFilter.propTypes = {\n    activeFactFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    clearAllStateChips: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    removeChip: PropTypes.func,\n    setHistory: PropTypes.func,\n    stateFilters: PropTypes.array,\n    toggleFactTypeFilter: PropTypes.func\n};\n\nexport default DriftFilter;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent } from '@patternfly/react-core';\n\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport DriftFilter from './DriftFilter/DriftFilter';\nimport { TablePagination } from '../../Pagination/Pagination';\nimport { errorExportNotification, preparingExportNotification, successfulExportNotification } from '../../../constants';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToCSV) }\n                >\n                    Export to CSV\n                </DropdownItem>,\n                <DropdownItem\n                    key='export-to-JSON'\n                    component='button'\n                    data-ouia-component-id='export-to-json-dropdown-item-comparison'\n                    onClick={ () => this.prepareExport(this.props.exportToJSON) }\n                >\n                    Export to JSON\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { exportStatus, resetExportStatus, store } = this.props;\n\n        if (exportStatus === 'success' && prevProps.exportStatus !== 'success') {\n            successfulExportNotification(store);\n            resetExportStatus();\n        }\n\n        if (exportStatus === 'failure' && prevProps.exportStatus !== 'failure') {\n            errorExportNotification(store);\n            resetExportStatus();\n        }\n    }\n\n    prepareExport = (exportFunc) => {\n        const { store } = this.props;\n        console.log(store, 'store');\n\n        preparingExportNotification(store);\n\n        exportFunc();\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearAllSelections, clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        await clearAllSelections();\n        setHistory();\n\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, factTypeFilters, filterByFact, handleFactFilter, setHistory, stateFilters,\n            toggleFactTypeFilter } = this.props;\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else if (type === 'Fact type') {\n            toggleFactTypeFilter(factTypeFilters[1]);\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, factFilter, factTypeFilters, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, toggleFactTypeFilter, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <DriftFilter\n                            activeFactFilters={ activeFactFilters }\n                            addStateFilter={ addStateFilter }\n                            factFilter={ factFilter }\n                            factTypeFilters={ factTypeFilters }\n                            filterByFact={ filterByFact }\n                            handleFactFilter={ handleFactFilter }\n                            removeChip={ this.removeChip }\n                            setHistory={ setHistory }\n                            stateFilters={ stateFilters }\n                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                        />\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } isToolbar={ true } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportStatus: PropTypes.string,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    resetExportStatus: PropTypes.func,\n    store: PropTypes.object\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\nimport { RegistryContext } from '../../Utilities/registry';\n\nimport { EMPTY_COMPARISON_TITLE, EMPTY_COMPARISON_MESSAGE } from '../../constants';\nimport { useSearchParams } from 'react-router-dom';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFirstReference: true\n        };\n    }\n\n    componentDidMount() {\n        document.title = this.props.title;\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.searchParams !== '' && this.props.searchParams === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, factTypeFilters, historicalProfiles, referenceId, stateFilters,\n            stateSort, systems, navigate } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            navigate, systemIds, baselineIds, HSPIds, referenceId,\n            activeFactFilters, factFilter, factTypeFilters, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, previousStateSystems, navigate } = this.props;\n\n        revertCompareData();\n        setHistory(navigate, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ EMPTY_COMPARISON_TITLE }\n                text={ EMPTY_COMPARISON_MESSAGE }\n                button={ <AddSystemButton/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearAllSelections, clearComparison, clearComparisonFilters,\n            clearSelectedBaselines, emptyState, error, exportToCSV, exportToJSON, exportStatus, factFilter, factSort, factTypeFilters, filterByFact,\n            handleFactFilter, historicalProfiles, handleBaselineSelection, handleHSPSelection, handleSystemSelection, loading, page, perPage,\n            referenceId, resetComparisonFilters, resetExportStatus, selectedBaselineIds, selectedHSPIds, stateFilters, stateSort, systems,\n            toggleFactTypeFilter, totalFacts, updatePagination, updateReferenceId, searchParams } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <RegistryContext.Consumer>\n                {\n                    registryContextValue =>\n                        (<>\n                            <PageHeader>\n                                <PageHeaderTitle title='Comparison'/>\n                            </PageHeader>\n                            <Main store={ registryContextValue?.registry.getStore() }>\n                                <PermissionContext.Consumer>\n                                    { value =>\n                                        value.permissions.compareRead === false\n                                            ? <EmptyStateDisplay\n                                                icon={ LockIcon }\n                                                color='#6a6e73'\n                                                title={ 'You do not have access to Drift comparison' }\n                                                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                            />\n                                            : <React.Fragment>\n                                                <ErrorAlert\n                                                    error={ error }\n                                                    onClose={ this.onClose }\n                                                />\n                                                { emptyState && !loading\n                                                    ? this.renderEmptyState()\n                                                    : <div></div>\n                                                }\n                                                <Card className='pf-t-light pf-m-opaque-100'>\n                                                    <CardBody>\n                                                        { !emptyState\n                                                            ? <DriftToolbar\n                                                                loading={ loading }\n                                                                history={ history }\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                totalFacts={ totalFacts }\n                                                                updatePagination={ updatePagination }\n                                                                clearComparison={ clearComparison }\n                                                                clearComparisonFilters={ clearComparisonFilters }\n                                                                exportToCSV={ exportToCSV }\n                                                                exportToJSON={ exportToJSON }\n                                                                updateReferenceId={ updateReferenceId }\n                                                                setIsFirstReference={ this.setIsFirstReference }\n                                                                clearSelectedBaselines={ clearSelectedBaselines }\n                                                                factFilter={ factFilter }\n                                                                factTypeFilters={ factTypeFilters }\n                                                                filterByFact={ filterByFact }\n                                                                stateFilters={ stateFilters }\n                                                                addStateFilter={ addStateFilter }\n                                                                toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                                activeFactFilters={ activeFactFilters }\n                                                                handleFactFilter={ handleFactFilter }\n                                                                clearAllFactFilters={ clearAllFactFilters }\n                                                                setHistory={ this.setHistory }\n                                                                resetComparisonFilters={ resetComparisonFilters }\n                                                                clearAllSelections={ clearAllSelections }\n                                                                exportStatus={ exportStatus }\n                                                                resetExportStatus={ resetExportStatus }\n                                                                store={ registryContextValue?.registry.getStore() }\n                                                            />\n                                                            : null\n                                                        }\n                                                        <DriftTable\n                                                            updateReferenceId={ updateReferenceId }\n                                                            error={ error }\n                                                            isFirstReference={ isFirstReference }\n                                                            setIsFirstReference={ this.setIsFirstReference }\n                                                            clearComparison= { clearComparison }\n                                                            handleBaselineSelection={ handleBaselineSelection }\n                                                            handleHSPSelection={ handleHSPSelection }\n                                                            handleSystemSelection={ handleSystemSelection }\n                                                            permissions={ value.permissions }\n                                                            handleFactFilter={ handleFactFilter }\n                                                            addStateFilter={ addStateFilter }\n                                                            stateFilters={ stateFilters }\n                                                            activeFactFilters={ activeFactFilters }\n                                                            factFilter={ factFilter }\n                                                            setHistory={ this.setHistory }\n                                                            factSort={ factSort }\n                                                            stateSort={ stateSort }\n                                                            referenceId={ referenceId }\n                                                            systems={ systems }\n                                                            baselines={ baselines }\n                                                            historicalProfiles={ historicalProfiles }\n                                                            selectedHSPIds={ selectedHSPIds }\n                                                            selectedBaselineIds={ selectedBaselineIds }\n                                                            factTypeFilters={ factTypeFilters }\n                                                            toggleFactTypeFilter={ toggleFactTypeFilter }\n                                                            searchParams={ searchParams }\n                                                        />\n                                                        { !emptyState && !loading ?\n                                                            <Toolbar className=\"drift-toolbar\">\n                                                                <ToolbarGroup className=\"pf-c-pagination\">\n                                                                    <ToolbarItem>\n                                                                        <TablePagination\n                                                                            page={ page }\n                                                                            perPage={ perPage }\n                                                                            total={ totalFacts }\n                                                                            isCompact={ false }\n                                                                            updatePagination={ updatePagination }\n                                                                            widgetId='drift-pagination-bottom'\n                                                                            ouiaId='drift-pagination-bottom'\n                                                                            variant={ PaginationVariant.bottom }\n                                                                        />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                            </Toolbar>\n                                                            : null\n                                                        }\n                                                    </CardBody>\n                                                </Card>\n                                            </React.Fragment>\n                                    }\n                                </PermissionContext.Consumer>\n                            </Main>\n                        </>)}\n            </RegistryContext.Consumer>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    factFilter: PropTypes.string,\n    factTypeFilters: PropTypes.array,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    toggleFactTypeFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.string,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func,\n    exportStatus: PropTypes.string,\n    resetExportStatus: PropTypes.func,\n    searchParams: PropTypes.object,\n    navigate: PropTypes.func,\n    title: PropTypes.string\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        exportToJSON: () => dispatch(compareActions.exportToJSON()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        toggleFactTypeFilter: (filter) => dispatch(compareActions.toggleFactTypeFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters()),\n        clearAllSelections: () => dispatch(addSystemModalActions.clearAllSelections()),\n        resetExportStatus: () => dispatch(compareActions.resetExportStatus())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        factTypeFilters: state.compareState.factTypeFilters,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        exportStatus: state.compareState.exportStatus\n    };\n}\n\nconst DriftPageWithHooks = props => {\n    const [ searchParams ] = useSearchParams();\n    const navigate = useInsightsNavigate();\n    return (\n        <DriftPage { ...props } searchParams={ searchParams } navigate={ navigate } />\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftPageWithHooks);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n"],"names":["setHistory","navigate","_stateFilters$filter","_factTypeFilters$filt","systemIds","arguments","length","undefined","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","factTypeFilters","stateFilters","factSort","stateSort","nameFilters","concat","_toConsumableArray","includes","filterState","filter","_ref","selected","map","_ref2","toLowerCase","filterFactType","_ref3","_ref4","sort","ASC","DESC","searchPrefix","searchString","queryString","system_ids","baseline_ids","hsp_ids","reference_id","search","arrayFormat","encode","SelectedBasketCheckbox","_Component","_inherits","_super","props","_this","_classCallCheck","call","handleChange","_this$props","findType","id","type","isChecked","state","setState","_createClass","key","value","this","React","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","push","icon","style","system","hsp","system_id","moment","captured_date","format","_entities$selectedSys","selectedSystemIds","system_name","className","SelectedBasket","_componentDidMount","toggleBasket","toggleBasketVisible","clearDeselected","applyChanges","_asyncToGenerator","_regeneratorRuntime","_callee3","_this$state","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","_context3","prev","next","_callee","_context","find","hspContent","stop","_x","apply","item","_callee2","_context2","_x2","newArray","_this$state2","toggleSelected","array","removeId","displayBodyContent","isEmpty","_this$props2","EmptyStateDisplay","title","text","_callee4","_context4","addSystemModalHelpers","setContent","systems","baselines","historicalProfiles","handleSystemSelection","_this$props3","selectedCount","_this2","isVisible","_this$state3","Popover","minWidth","shouldClose","headerContent","findSelected","footerContent","Button","variant","onClick","ouiaId","isDisabled","position","PopoverPosition","bottom","bodyContent","maxHeight","overflowY","AddSystemModal","closePopover","disableSystemTable","basketIsVisible","createContent","content","body","DriftTooltip","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","_assertThisInitialized","bulkSelectBasket","systemContentSelect","data","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","transforms","sortable","cellWidth","previousSelectedBaselineIds","addSystemModal","middlewareListener","window","entityListener","addNewListener","actionType","callback","addSystemModalOpened","width","isStatic","hspRead","prevProps","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","_this$props4","findNotInComparison","baselinesToRemove","_this$props5","setSelectedBaselines","setSelectedContent","tabIndex","selectActiveTab","_this$props6","activeTab","emptyState","globalFilterState","loading","setSelectedSystemIds","totalBaselines","baselineError","revertBaselineFetch","Modal","ref","onScroll","isOpen","onClose","actions","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","leftAlignToolbar","hasSwitch","showModal","updateReferenceId","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","RegistryContext","Consumer","registryContextValue","_extends","ReferenceSelector","isReference","StarIcon","OutlinedStarIcon","Tooltip","renderMessage","renderIcon","ComparisonHeader","_toggleSort","setColumnWidth","columnWidth","setColumnHeaderWidth","current","offsetWidth","refState","formatDate","dateString","addEventListener","debounce","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","Skeleton","size","SkeletonSize","md","_this$columnWidth","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","color","last_updated","updated","HistoricalProfilesPopover","systemName","hasCompareButton","_this3","toggleSort","renderSortButton","renderSystemHeaders","renderLoadingSystems","renderHeaderRow","hasHSPReadPermissions","isRequired","StateIcon","fact","CheckCircleIcon","height","ExclamationCircleIcon","QuestionCircleIcon","tooltip","RowFact","expandedRows","expandRow","factName","button","AngleDownIcon","AngleRightIcon","renderFact","DriftTableRow","findSystem","createClassname","is_obfuscated","cell","i","_system","_system2","_system3","join","float","LockIcon","createCells","DriftTable","_fetchCompare","_removeSystem","_componentDidUpdate","columnHeaderWidth","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","topScroller","headerScroll","bottomScroller","doubleScroll","wrapper1","wrapper2","wrapper3","onscroll","scrollLeft","chrome","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i","hsps","indexOf","slice","entries","_this$systemIds","searchParams","getAll","Array","isArray","_this$baselineIds","_this$HSPIds","get","newFilters","filters","addFunction","x","_objectSpread","_searchParams$get","_searchParams$get2","_searchParams$get3","addStateFilter","handleFactFilter","toggleFactTypeFilter","split","newStateFilters","newFactTypeFilters","addFilters","_searchParams$get4","_sort$","isFirstReference","setIsFirstReference","hspsToRemove","sent","profile","clearComparison","reference","_args4","facts","renderRow","rowData","_this$props7","comparisons","comparison","multivalues","subFactItem","compareData","_this$props8","scrollWidth","renderLoadingRows","renderRows","_this$props9","filteredCompareData","formatEntities","renderTable","history","fullCompareData","error","toggleFactTypeFilters","compareActions","useChrome","AddSystemButton","isToolbar","DriftFilterDropdown","filterType","toggleFilterType","_useState","useState","_useState2","toggleOpen","selectFilter","dropdownItems","DropdownItem","Dropdown","toggle","DropdownToggle","onToggle","FilterIcon","SearchBar","_addToActiveFactFilters","updateFactFilter","setFactFilter","_debounce","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","fieldId","onKeyPress","TextInput","placeholder","types","OPEN_FILTER_DROPDOWN","FilterDropDown","addFilter","filterFunction","createDropdownItem","toggleDropDown","display","label","dropdownItem","ouiaPrefix","createDropdownArray","filterDropdownOpened","filterDropdownActions","DriftFilterValue","factFilterChips","removeChip","setDropdownChips","dropdownFilters","chips","ToolbarFilter","deleteChip","deleteChipGroup","categoryName","DriftFilter","ToolbarGroup","clearAllFactFilters","clearAllStateChips","DriftToolbar","prepareExport","exportFunc","store","console","log","preparingExportNotification","stateFilter","resetFilters","resetComparisonFilters","dropdownOpen","clearFilters","clearComparisonFilters","clearAllSelections","clearSelectedBaselines","_callee6","_args6","_context6","_ref6","_callee5","_context5","actionKebabItems","component","exportToCSV","exportToJSON","exportStatus","resetExportStatus","successfulExportNotification","errorExportNotification","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ExportCSVButton","ActionKebab","align","default","TablePagination","total","isCompact","widgetId","PaginationVariant","top","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EMPTY_COMPARISON_MESSAGE","detail","PlusCircleIcon","EMPTY_COMPARISON_TITLE","document","PageHeader","PageHeaderTitle","Main","registry","getStore","PermissionContext","compareRead","ErrorAlert","Card","CardBody","loadEntities","pagination","_useSearchParams","useSearchParams","useInsightsNavigate","closeToast","addNotification","description","dismissable"],"sourceRoot":""}