{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","props","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","categoryMessage","factMessage","this","deleteFactModalHelpers","DropdownItem","component","onClick","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","editBaselineEmptyState","hasWritePermissions","undefined","Button","variant","Tooltip","content","className","bool","dispatch","editBaselineActions","factData","EditBaselineToolbar","dropdownOpen","bulkSelectItems","title","onBulkSelect","exportToCSV","tableData","baselineData","totalFacts","Toolbar","ToolbarContent","ToolbarItem","count","items","checked","helpers","findCheckedValue","onSelect","ToolbarGroup","ExportCSVButton","any","number","object","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","handleNewName","handleNewValue","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","inlineError","Form","FormGroup","isRequired","helperTextInvalid","detail","validated","fieldId","onKeyPress","TextInput","type","placeholder","ValidatedOptions","error","isSubFact","status","Alert","isInline","factModalOpened","Modal","ModalVariant","small","onClose","actions","string","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","hasError","EditBaseline","retryBaselineFetch","clearErrorData","fetchBaselineId","renderPageHeader","hasReadPermissions","baselineDataLoading","SkeletonSize","lg","renderBreadcrumb","renderPageTitle","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","errorMessage","goToBaselinesList","window","insights","chrome","auth","getUser","document","params","match","clearBaselineData","fetchBaselines","history","Breadcrumb","BreadcrumbItem","BreadcrumbHeading","rows","rowData","i","md","expandedRows","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","renderRowData","editBaselineError","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","renderHeaderRow","renderLoadingRows","renderRows","findSelected","Consumer","permissions","baselinesRead","baselinesWrite","LockIcon","ErrorAlert","renderEmptyState","Card","CardBody","findFactCount","renderTable","withRouter","tableId","baselinesTableActions","exportData","baselineRowData"],"mappings":"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","file":"js/4-0fdbbd30f9cd619789b9.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        const { editBaselineEmptyState, hasWritePermissions, isDisabled } = this.props;\n\n        return (\n            <React.Fragment>\n                { !hasWritePermissions && hasWritePermissions !== undefined\n                    ? <Tooltip\n                        content={\n                            <div>You do not have permissions to perform this action</div>\n                        }\n                    >\n                        <div className={ editBaselineEmptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                variant='primary'\n                                isDisabled\n                                onClick={ this.handleAddFact }>\n                                Add fact or category\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        variant='primary'\n                        isDisabled={ isDisabled }\n                        onClick={ this.handleAddFact }>\n                        Add fact or category\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func,\n    isDisabled: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    editBaselineEmptyState: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport helpers from '../../../helpers';\nimport ExportCSVButton from '../../../ExportCSVButton/ExportCSVButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData, this.props.baselineData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    render() {\n        const { hasWritePermissions, isDisabled, onBulkSelect, selected, totalFacts } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <Toolbar className='drift-toolbar'>\n                <ToolbarContent>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ helpers.findCheckedValue(totalFacts, selected) }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                        />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <AddFactButton\n                            isDisabled={ totalFacts > 0 ? false : true }\n                            hasWritePermissions={ hasWritePermissions }\n                        />\n                    </ToolbarItem>\n                    <ToolbarGroup variant='icon-button-group'>\n                        <ToolbarItem>\n                            <ExportCSVButton\n                                dropdownItems={ dropdownItems }\n                                isOpen={ dropdownOpen }\n                                onToggle={ this.onToggle }\n                            />\n                        </ToolbarItem>\n                        <ToolbarItem>\n                            <EditBaselineKebab />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any,\n    totalFacts: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    tableData: PropTypes.array,\n    baselineData: PropTypes.object,\n    hasWritePermissions: PropTypes.bool\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, Checkbox, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nexport class FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { inlineError } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ inlineError.hasOwnProperty('detail') ? inlineError.detail : null }\n                        validated={ inlineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            validated={ inlineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { inlineError } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ inlineError.hasOwnProperty('detail') ? inlineError.detail : null }\n                        validated={ inlineError.hasOwnProperty('status') ? 'error' : null }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            validated={ inlineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { inlineError, isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody =\n            <React.Fragment>\n                { inlineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + inlineError.status }\n                    >\n                        <p>\n                            { inlineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n                { this.renderFactInput() }\n                { isCategory ? null : this.renderValueInput() }\n            </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    inlineError: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, ModalVariant, TextInput, ValidatedOptions, Alert } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n        const hasError = error.hasOwnProperty('status') ? ValidatedOptions.error : null;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    validated={ hasError }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ hasError }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened, error } = this.props;\n\n        return (\n            <Modal\n                variant={ ModalVariant.small }\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { error.status && <Alert\n                    variant='danger'\n                    isInline\n                    title={ 'Status: ' + error.status }\n                >\n                    <p>\n                        { error.detail }\n                    </p>\n                </Alert> }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox, BreadcrumbHeading } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport ErrorAlert from '../../ErrorAlert/ErrorAlert';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../../App';\n\nimport _ from 'lodash';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false,\n            errorMessage: [ 'The baseline cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    componentDidUpdate() {\n        if (this.props.baselineData) {\n            document.title = this.props.baselineData.display_name + ' - Baselines - Drift | Red Hat Insights';\n        }\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { clearBaselineData, fetchBaselines, history } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        fetchBaselines('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    retryBaselineFetch = () => {\n        const { clearErrorData } = this.props;\n\n        clearErrorData();\n        this.fetchBaselineId();\n    }\n\n    renderBreadcrumb(baselineData, hasReadPermissions) {\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            { baselineData && hasReadPermissions\n                ? <BreadcrumbHeading>\n                    { baselineData.display_name }\n                </BreadcrumbHeading>\n                : null\n            }\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderPageTitle(baselineData, hasReadPermissions) {\n        if (hasReadPermissions) {\n            return <PageHeaderTitle title={ !_.isEmpty(baselineData) ? baselineData.display_name : null }/>;\n        } else {\n            return <PageHeaderTitle title='Baseline' />;\n        }\n    }\n\n    renderPageHeader = (hasReadPermissions, hasWritePermissions) => {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, inlineError } = this.props;\n        let pageHeader;\n\n        if (baselineDataLoading) {\n            pageHeader = <PageHeader>\n                <div><Skeleton size={ SkeletonSize.lg } /></div>\n            </PageHeader>;\n        } else {\n            if (baselineData !== undefined) {\n                pageHeader = <React.Fragment>\n                    <EditBaselineNameModal\n                        baselineData={ baselineData }\n                        modalOpened={ modalOpened }\n                        toggleEditNameModal={ this.toggleEditNameModal }\n                        error={ inlineError }\n                    />\n                    <PageHeader>\n                        { this.renderBreadcrumb(baselineData, hasReadPermissions) }\n                        { this.renderPageTitle(baselineData, hasReadPermissions) }\n                        { hasReadPermissions && hasWritePermissions\n                            ? <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } />\n                            : null\n                        }\n                    </PageHeader>\n                </React.Fragment>;\n            } else {\n                pageHeader = <PageHeader>\n                    { this.renderBreadcrumb() }\n                    <PageHeaderTitle title='Baseline' />\n                </PageHeader>;\n            }\n        }\n\n        return pageHeader;\n    }\n\n    renderHeaderRow(hasWritePermissions) {\n        return (\n            <tr key='edit-baseline-table-header'>\n                { hasWritePermissions ? <th></th> : null }\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact, hasWritePermissions) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        hasWritePermissions\n            ? row.push(<td\n                className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n                { this.renderCheckbox(fact) }\n            </td>)\n            : null;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    hasWritePermissions\n                        ? row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>)\n                        : null;\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true,\n                        hasWritePermissions\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData, hasWritePermissions }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows(hasWritePermissions) {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i], hasWritePermissions);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderEmptyState(hasWritePermissions) {\n        const { editBaselineEmptyState, editBaselineError } = this.props;\n        const { errorMessage } = this.state;\n\n        if (editBaselineError.status !== 200 && editBaselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baseline cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + editBaselineError.status + ': ' + editBaselineError.detail\n                }\n                button={\n                    <a onClick={ () => this.retryBaselineFetch() }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                title={ 'No facts' }\n                text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                button={ <AddFactButton\n                    hasWritePermissions={ hasWritePermissions }\n                    editBaselineEmptyState={ editBaselineEmptyState }\n                /> }\n            />;\n        }\n    }\n\n    renderTable(hasWritePermissions) {\n        const { baselineDataLoading } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-grid-md ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow(hasWritePermissions) }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { !baselineDataLoading\n                        ? this.renderRows(hasWritePermissions)\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, editBaselineTableData, exportToCSV, factModalOpened,\n            editBaselineEmptyState, editBaselineError, clearErrorData } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        { this.renderPageHeader(value.permissions.baselinesRead, value.permissions.baselinesWrite) }\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to view this Baseline' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    { factModalOpened\n                                        ? <FactModal />\n                                        : <div></div>\n                                    }\n                                    <ErrorAlert\n                                        error={ !editBaselineEmptyState && editBaselineError.status ? editBaselineError : {} }\n                                        onClose={ clearErrorData }\n                                    />\n                                    { editBaselineEmptyState\n                                        ? this.renderEmptyState(value.permissions.baselinesWrite)\n                                        : <Card className='pf-t-light pf-m-opaque-100'>\n                                            <CardBody>\n                                                <EditBaselineToolbar\n                                                    selected={ selected }\n                                                    onBulkSelect={ this.onBulkSelect }\n                                                    isDisabled={ editBaselineTableData.length === 0 || !value.permissions.baselinesWrite }\n                                                    totalFacts={ editBaselineHelpers.findFactCount(editBaselineTableData) }\n                                                    baselineData={ baselineData }\n                                                    exportToCSV={ exportToCSV }\n                                                    tableData={ editBaselineTableData }\n                                                    hasWritePermissions={ value.permissions.baselinesWrite }\n                                                />\n                                                { this.renderTable(value.permissions.baselinesWrite) }\n                                            </CardBody>\n                                        </Card>\n                                    }\n                                </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    editBaselineError: PropTypes.object,\n    inlineError: PropTypes.object,\n    editBaselineEmptyState: PropTypes.bool,\n    exportToCSV: PropTypes.func,\n    hasWritePermissions: PropTypes.bool,\n    fetchBaselines: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        editBaselineError: state.editBaselineState.editBaselineError,\n        editBaselineEmptyState: state.editBaselineState.editBaselineEmptyState,\n        inlineError: state.editBaselineState.inlineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData()),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(editBaselineActions.exportToCSV(exportData, baselineRowData));\n        },\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}