{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","CreateBaselineModal","props","onSelect","_","event","selectBaseline","currentTarget","id","checked","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","label","isRequired","type","helperTextInvalid","detail","fieldId","validated","onKeyPress","TextInput","className","placeholder","onChange","ValidatedOptions","error","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","setState","handleChecked","this","createBaseline","selectedBaselineIds","history","entities","selectedHSPIds","newBaselineObject","display_name","baseline_facts","selectedSystemIds","inventory_uuid","hsp_uuid","push","baselineData","Radio","isChecked","name","baselineTableData","loading","createBaselineModalOpened","totalBaselines","BaselinesTable","tableId","tableData","historicalProfiles","SystemsTable","createBaselineModal","hasHistoricalDropdown","hasMultiSelect","Button","variant","isDisabled","onClick","Modal","width","isOpen","onClose","actions","renderActions","status","Alert","isInline","Component","propTypes","PropTypes","bool","object","array","number","updatePagination","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","historicProfilesState","dispatch","createBaselineModalActions","uuid","isSelected","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","rowId","map","item","onBulkSelect","ids","forEach","baseline","renderEmptyState","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","undefined","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","AddCircleOIcon","CreateBaselineButton","window","insights","chrome","auth","getUser","clearEditBaselineData","CardBody","kebab","createButton","exportButton","Consumer","permissions","baselinesRead","LockIcon","ErrorAlert","Card","renderTable","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/4-3b8e236cd9507efd2611.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nimport _ from 'lodash';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: '' },\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectedHSPIds } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedHSPIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = selectedHSPIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (_, event) => {\n        const { selectBaseline } = this.props;\n\n        let id = [ event.currentTarget.id ];\n        let isSelected = event.currentTarget.checked;\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, loading, createBaselineModalOpened, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { historicalProfiles } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable\n                selectedSystemIds={ [] }\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ historicalProfiles }\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <Form>\n                <FormGroup\n                    label='Baseline name'\n                    isRequired\n                    type=\"text\"\n                    helperTextInvalid={ createBaselineError.hasOwnProperty('detail') ? createBaselineError.detail : null }\n                    fieldId=\"name\"\n                    validated={ createBaselineError.hasOwnProperty('status') ? 'error' : null }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeholder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ createBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, selectedHSPIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                ((_.isEmpty(entities.selectedSystemIds)) && (selectedHSPIds.length === 0))\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                width={ '1200px' }\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    selectedHSPIds: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]},\n                { title: '' }\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable() {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = () => {\n        const { baselineError, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton /> }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + baselineError.status + ': ' + baselineError.detail\n                }\n                button={\n                    <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState()\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable()\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}