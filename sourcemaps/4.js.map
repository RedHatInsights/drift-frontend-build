{"version":3,"sources":["webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["strictUriEncode","objectAssign","encode","value","opts","strict","encodeURIComponent","exports","extract","str","split","parse","formatter","result","arrayFormat","key","accumulator","exec","replace","undefined","concat","parserForArrayFormat","ret","Object","create","trim","forEach","param","parts","shift","val","length","join","decodeURIComponent","keys","sort","reduce","Boolean","Array","isArray","keysSorter","input","a","b","Number","map","stringify","obj","index","encoderForArrayFormat","slice","val2","push","filter","x","module","c","charCodeAt","toString","toUpperCase","setHistory","history","systemIds","baselineIds","hspIds","referenceId","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","item","onBulkSelect","ids","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","globalFilterState","hasBaselinesReadPermissions","hasBaselinesWritePermissions","hasInventoryReadPermissions","historicalProfiles","loading","totalBaselines","Fragment","Modal","width","isOpen","onClose","actions","Button","variant","onClick","isDisabled","GlobalFilterAlert","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","hasMultiSelect","selectVariant","BaselinesTable","tableId","tableData","hasReadPermissions","hasWritePermissions","kebab","Component","propTypes","showModal","PropTypes","bool","number","func","object","array","baselines","string","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","StateIcon","fact","color","height","stateSort","Tooltip","name","position","content","tooltip","icon","ReferenceSelector","isReference","updateReferenceId","className","type","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","moment","utc","format","ASC","DESC","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","row","typeIcon","header-id","display_name","system_profile_exists","last_updated","updated","HistoricalProfilesPopover","hasCompareButton","factSort","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","DriftTable","shiftReferenceToFront","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","fullHistoricalSystemList","historicalGroups","hsp","hasOwnProperty","system_id","hsps","find","indexOf","entries","location","setSelectedBaselines","selectHistoricProfiles","isFirstReference","setIsFirstReference","profile","reference","clearComparison","facts","rows","renderRow","rowData","i","size","SkeletonSize","md","sys","expandedRows","comparisons","includes","renderExpandableRowButton","comparison","renderRowChild","findSystem","factName","expandRow","compareData","renderLoadingRows","renderRows","emptyState","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","historicProfileIds","historicProfilesActions","AddSystemButton","isTable","toggleFilterDropDown","types","OPEN_FILTER_DROPDOWN","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","DropdownItem","Checkbox","display","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","changeFactFilter","factFilter","prevProps","TextInput","placeholder","aria-label","filterByFact","DriftToolbar","setStateChips","stateChips","clearAllStateChips","removeChip","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarFilter","chips","deleteChip","categoryName","deleteChipGroup","ToolbarItem","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","top","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","ExclamationCircleIcon","text","detail","button","PlusCircleIcon","Consumer","permissions","compareRead","LockIcon","ErrorAlert","Card","CardBody","baselinesRead","baselinesWrite","inventoryRead","bottom","pagination"],"mappings":"2FACA,IAAIA,EAAkB,EAAQ,MAC1BC,EAAe,EAAQ,KA0F3B,SAASC,EAAOC,EAAOC,GACtB,OAAIA,EAAKF,OACDE,EAAKC,OAASL,EAAgBG,GAASG,mBAAmBH,GAG3DA,EAiBRI,EAAQC,QAAU,SAAUC,GAC3B,OAAOA,EAAIC,MAAM,KAAK,IAAM,IAG7BH,EAAQI,MAAQ,SAAUF,EAAKL,GAG9B,IAAIQ,EA/EL,SAA8BR,GAC7B,IAAIS,EAEJ,OAAQT,EAAKU,aACZ,IAAK,QACJ,OAAO,SAAUC,EAAKZ,EAAOa,GAC5BH,EAAS,aAAaI,KAAKF,GAE3BA,EAAMA,EAAIG,QAAQ,WAAY,IAEzBL,QAKoBM,IAArBH,EAAYD,KACfC,EAAYD,GAAO,IAGpBC,EAAYD,GAAKF,EAAO,IAAMV,GAR7Ba,EAAYD,GAAOZ,GAWtB,IAAK,UACJ,OAAO,SAAUY,EAAKZ,EAAOa,GAC5BH,EAAS,UAAUI,KAAKF,GACxBA,EAAMA,EAAIG,QAAQ,QAAS,IAEtBL,OAG2BM,IAArBH,EAAYD,GAKvBC,EAAYD,GAAO,GAAGK,OAAOJ,EAAYD,GAAMZ,GAJ9Ca,EAAYD,GAAO,CAACZ,GAHpBa,EAAYD,GAAOZ,GAUtB,QACC,OAAO,SAAUY,EAAKZ,EAAOa,QACHG,IAArBH,EAAYD,GAKhBC,EAAYD,GAAO,GAAGK,OAAOJ,EAAYD,GAAMZ,GAJ9Ca,EAAYD,GAAOZ,IAsCPkB,CAFhBjB,EAAOH,EAAa,CAACa,YAAa,QAASV,IAMvCkB,EAAMC,OAAOC,OAAO,MAExB,MAAmB,iBAARf,EACHa,GAGRb,EAAMA,EAAIgB,OAAOP,QAAQ,YAAa,MAMtCT,EAAIC,MAAM,KAAKgB,SAAQ,SAAUC,GAChC,IAAIC,EAAQD,EAAMT,QAAQ,MAAO,KAAKR,MAAM,KAGxCK,EAAMa,EAAMC,QACZC,EAAMF,EAAMG,OAAS,EAAIH,EAAMI,KAAK,UAAOb,EAI/CW,OAAcX,IAARW,EAAoB,KAAOG,mBAAmBH,GAEpDlB,EAAUqB,mBAAmBlB,GAAMe,EAAKR,MAGlCC,OAAOW,KAAKZ,GAAKa,OAAOC,QAAO,SAAUvB,EAAQE,GACvD,IAAIe,EAAMR,EAAIP,GAQd,OAPIsB,QAAQP,IAAuB,iBAARA,IAAqBQ,MAAMC,QAAQT,GAE7DjB,EAAOE,GAvDV,SAASyB,EAAWC,GACnB,OAAIH,MAAMC,QAAQE,GACVA,EAAMN,OACc,iBAAVM,EACVD,EAAWjB,OAAOW,KAAKO,IAAQN,MAAK,SAAUO,EAAGC,GACvD,OAAOC,OAAOF,GAAKE,OAAOD,MACxBE,KAAI,SAAU9B,GAChB,OAAO0B,EAAM1B,MAIR0B,EA4CSD,CAAWV,GAEzBjB,EAAOE,GAAOe,EAGRjB,IACLU,OAAOC,OAAO,QA3BTF,GA8BTf,EAAQuC,UAAY,SAAUC,EAAK3C,GAClC,IAQIQ,EAzKL,SAA+BR,GAC9B,OAAQA,EAAKU,aACZ,IAAK,QACJ,OAAO,SAAUC,EAAKZ,EAAO6C,GAC5B,OAAiB,OAAV7C,EAAiB,CACvBD,EAAOa,EAAKX,GACZ,IACA4C,EACA,KACChB,KAAK,IAAM,CACZ9B,EAAOa,EAAKX,GACZ,IACAF,EAAO8C,EAAO5C,GACd,KACAF,EAAOC,EAAOC,IACb4B,KAAK,KAGT,IAAK,UACJ,OAAO,SAAUjB,EAAKZ,GACrB,OAAiB,OAAVA,EAAiBD,EAAOa,EAAKX,GAAQ,CAC3CF,EAAOa,EAAKX,GACZ,MACAF,EAAOC,EAAOC,IACb4B,KAAK,KAGT,QACC,OAAO,SAAUjB,EAAKZ,GACrB,OAAiB,OAAVA,EAAiBD,EAAOa,EAAKX,GAAQ,CAC3CF,EAAOa,EAAKX,GACZ,IACAF,EAAOC,EAAOC,IACb4B,KAAK,MAwIMiB,CAFhB7C,EAAOH,EANQ,CACdC,QAAQ,EACRG,QAAQ,EACRS,YAAa,QAGgBV,IAI9B,OAAO2C,EAAMxB,OAAOW,KAAKa,GAAKZ,OAAOU,KAAI,SAAU9B,GAClD,IAAIe,EAAMiB,EAAIhC,GAEd,QAAYI,IAARW,EACH,MAAO,GAGR,GAAY,OAARA,EACH,OAAO5B,EAAOa,EAAKX,GAGpB,GAAIkC,MAAMC,QAAQT,GAAM,CACvB,IAAIjB,EAAS,GAUb,OARAiB,EAAIoB,QAAQxB,SAAQ,SAAUyB,QAChBhC,IAATgC,GAIJtC,EAAOuC,KAAKxC,EAAUG,EAAKoC,EAAMtC,EAAOkB,YAGlClB,EAAOmB,KAAK,KAGpB,OAAO9B,EAAOa,EAAKX,GAAQ,IAAMF,EAAO4B,EAAK1B,MAC3CiD,QAAO,SAAUC,GACnB,OAAOA,EAAEvB,OAAS,KAChBC,KAAK,KAAO,K,kCC1MhBuB,EAAOhD,QAAU,SAAUE,GAC1B,OAAOH,mBAAmBG,GAAKS,QAAQ,YAAY,SAAUsC,GAC5D,MAAO,IAAMA,EAAEC,WAAW,GAAGC,SAAS,IAAIC,mB,uYCDrC,SAASC,EAAWC,GAAqE,IAA5DC,EAA4D,uDAAhD,GAAIC,EAA4C,uDAA9B,GAAIC,EAA0B,uDAAjB,GAAIC,EAAa,uCAE5FJ,EAAQT,KAAK,CACTc,OAAQ,IAAMC,IAAYrB,UAAU,CAChCsB,WAAYN,EACZO,aAAcN,EACdO,QAASN,EACTO,aAAcN,M,qlBCGnB,IAAMO,GAAb,mCACI,WAAYC,GAAO,0BACf,cAAMA,IAiBVC,SAAW,SAACC,EAAOC,EAAYC,GAAU,MACS,EAAKJ,MAA3CK,EAD6B,EAC7BA,mBAWRC,EAZqC,EACVA,iBAGZ,IAAXF,EACMC,EAAkBjC,KAAI,SAASmC,GACjC,OAAOA,EAAK,MAGV,CAAEF,EAAkBD,GAAO,IAGjBD,EAAY,aA9BjB,EAiEnBK,aAAe,SAACL,GAAe,MACmB,EAAKH,MAA3CK,EADmB,EACnBA,kBAAmBC,EADA,EACAA,eACvBG,EAAM,GAEVJ,EAAkBpD,SAAQ,SAASyD,GAC/BD,EAAI9B,KAAK+B,EAAS,OAGtBJ,EAAeG,EAAKN,EAAY,aAvEhC,EAAKQ,aAAe,EAAKA,aAAaC,KAAlB,QACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,QACvB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,QAEvB,EAAKG,MAAQ,CACTC,QAAS,CACL,CAAEC,MAAO,OAAQC,WAAY,CAAEC,MAC/B,CAAEF,MAAO,eAAgBC,WAAY,CAAEC,IAAUC,YAAU,QATpD,EADvB,4JAgBcC,OAAOC,SAASC,OAAOC,KAAKC,UAhB1C,6HAkCmB,MACgGC,KAAK1B,MAAxGW,EADG,EACHA,aAAcgB,EADX,EACWA,SAAUC,EADrB,EACqBA,oBAAqBC,EAD1C,EAC0CA,qBAAsBC,EADhE,EACgEA,eAAgBtC,EADhF,EACgFA,YAE3FmB,EACIgB,EAASI,kBACTH,EACAE,EACAtC,GAEJqC,MA3CR,yCAiDQA,EAFiCH,KAAK1B,MAA9B6B,0BA/ChB,0CAqDQ,IAAIpB,EAAMiB,KAAK1B,MAAMgC,QAAQ5D,KAAI,SAAU6D,GACvC,OAAOA,EAAOC,MAGlB,OAAOzB,GAAY,KAzD3B,sCA4DoBP,EAAOiC,IAGnBC,EAF4BV,KAAK1B,MAAzBoC,iBAEQD,KA/DxB,+BA6Ea,MAGkCT,KAAK1B,MAFpCqC,EADH,EACGA,UAAWC,EADd,EACcA,qBAAsBjC,EADpC,EACoCA,kBAAmBkC,EADvD,EACuDA,kBAAmBC,EAD1E,EAC0EA,4BAC3EC,EAFC,EAEDA,6BAA8BC,EAF7B,EAE6BA,4BAA6BC,EAF1D,EAE0DA,mBAAoBC,EAF9E,EAE8EA,QAASjB,EAFvF,EAEuFA,SAAUC,EAFjG,EAEiGA,oBAClGE,EAHC,EAGDA,eAAgBe,EAHf,EAGeA,eACZ7B,EAAYU,KAAKX,MAAjBC,QAER,OACI,kBAAC,IAAM8B,SAAP,KACI,kBAACC,EAAA,EAAD,CACIC,MAAQ,QACR/B,MAAM,oBACNgC,OAASX,EACTY,QAAUxB,KAAKb,gBACfsC,QAAU,CACN,kBAACC,EAAA,EAAD,CACI9G,IAAI,UACJ+G,QAAQ,UACRC,QAAU5B,KAAKf,aACf4C,YACM5B,GAAYA,EAASI,mBAA2D,IAAtCJ,EAASI,kBAAkBzE,SAAkBqE,IAC1D,IAA/BC,EAAoBtE,QACM,IAA1BwE,EAAexE,QAPvB,UAYA,kBAAC8F,EAAA,EAAD,CACI9G,IAAI,SACJ+G,QAAQ,OACRC,QAAU5B,KAAKb,iBAHnB,YAUJ,kBAAC2C,GAAA,EAAD,CAAmBjB,kBAAoBA,IACvC,kBAACkB,EAAA,EAAD,CACIC,UAAYrB,EACZpC,SAAWyB,KAAKZ,iBAEhB,kBAAC6C,EAAA,EAAD,CACIC,SAAW,EACX3C,MAAM,UACNiB,GAAG,eAEH,kBAAC2B,EAAA,EAAD,CACI9B,kBAAoBL,KAAKK,oBACzB+B,uBAAwB,EACxBnB,mBAAqBA,EACrBoB,gBAAiB,EACjBrB,4BAA8BA,EAC9Bf,SAAWA,EACXqC,cAAc,cAGtB,kBAACL,EAAA,EAAD,CACIC,SAAW,EACX3C,MAAM,YACNiB,GAAG,iBAEH,kBAAC+B,GAAA,EAAD,CACIC,QAAQ,WACRH,gBAAiB,EACjB9D,SAAWyB,KAAKzB,SAChBkE,UAAY9D,EACZuC,QAAUA,EACV5B,QAAUA,EACVR,aAAekB,KAAKlB,aACpBoB,oBAAsBA,EACtBiB,eAAiBA,EACjBuB,mBAAqB5B,EACrB6B,oBAAsB5B,EACtB6B,OAAQ,YAtJxC,GAAoCC,aAgKpCxE,GAAeyE,UAAY,CACvBC,UAAWC,IAAUC,KACrBrC,qBAAsBoC,IAAUC,KAChCtC,UAAWqC,IAAUE,OACrBjE,aAAc+D,IAAUG,KACxBhE,gBAAiB6D,IAAUG,KAC3BhD,qBAAsB6C,IAAUG,KAChCzC,gBAAiBsC,IAAUG,KAC3BlD,SAAU+C,IAAUI,OACpB9C,QAAS0C,IAAUK,MACnBnD,oBAAqB8C,IAAUK,MAC/BC,UAAWN,IAAUK,MACrBjD,eAAgB4C,IAAUK,MAC1BnC,QAAS8B,IAAUC,KACnBtE,kBAAmBqE,IAAUK,MAC7BzE,eAAgBoE,IAAUG,KAC1BlC,mBAAoB+B,IAAUK,MAC9BvF,YAAakF,IAAUO,OACvBpC,eAAgB6B,IAAUE,OAC1BlC,4BAA6BgC,IAAUC,KACvCnC,4BAA6BkC,IAAUC,KACvClC,6BAA8BiC,IAAUC,KACxCpC,kBAAmBmC,IAAUI,QA4BlBI,0BAzBf,SAAyBnE,GACrB,MAAO,CACHuB,qBAAsBvB,EAAMoE,oBAAoB7C,qBAChDN,QAASjB,EAAMqE,aAAapD,QAC5BK,UAAWtB,EAAMoE,oBAAoB9C,UACrCV,SAAUZ,EAAMY,SAChBC,oBAAqBb,EAAMsE,oBAAoBC,cAAc1D,oBAC7DoD,UAAWjE,EAAMqE,aAAaJ,UAC9BlD,eAAgBf,EAAMwE,sBAAsBzD,eAC5Cc,QAAS7B,EAAMsE,oBAAoBC,cAAc1C,QACjDvC,kBAAmBU,EAAMsE,oBAAoBC,cAAcjF,kBAC3DsC,mBAAoB5B,EAAMqE,aAAazC,mBACvCE,eAAgB9B,EAAMsE,oBAAoBC,cAAczC,eACxDN,kBAAmBxB,EAAMwB,sBAIjC,SAA4BiD,GACxB,MAAO,CACH3D,qBAAsB,kBAAM2D,EAASC,KAAsB5D,yBAC3DO,gBAAiB,SAACsD,GAAD,OAAkBF,EAASC,KAAsBrD,gBAAgBsD,KAClFpF,eAAgB,SAAC4B,EAAI/B,EAAY+D,GAAjB,OAA6BsB,EAASG,IAAsBrF,eAAe4B,EAAI/B,EAAY+D,QAIpGgB,CAA6CnF,I,2cCzNtD6F,G,iCACF,WAAY5F,GAAO,+BACTA,G,2CAcN,MAR8B,SAA1B0B,KAAK1B,MAAM6F,KAAK9E,MACJ,kBAAC,KAAD,CAAiB+E,MAAM,UAAUC,OAAO,OAAO/C,MAAM,SAChC,cAA1BtB,KAAK1B,MAAM6F,KAAK9E,MACX,kBAAC,IAAD,CAAuB+E,MAAM,UAAUC,OAAO,OAAO/C,MAAM,SAE3D,kBAAC,KAAD,CAAoB8C,MAAM,UAAUC,OAAO,OAAO/C,MAAM,W,+BAMnE,MACuBtB,KAAK1B,MAAzB6F,EADH,EACGA,KAAMG,EADT,EACSA,UAEd,OACI,kBAACC,GAAA,EAAD,CACI3J,IAAMuJ,EAAKK,KAAO,IAAMF,EACxBG,SAAS,MACTC,QACI,6BAAOP,EAAKQ,UAGd3E,KAAK4E,Y,GA9BC/B,aAoCxBqB,GAAUpB,UAAY,CAClBqB,KAAMnB,IAAUI,OAChBkB,UAAWtB,IAAUO,QAGVW,U,ujBCzCTW,G,iCACF,WAAYvG,GAAO,0BACf,cAAMA,IAEDe,MAAQ,CACTyF,YAAa,EAAKxG,MAAMwG,aAJb,E,iDAQN,MAC2B9E,KAAK1B,MAAjCyG,EADC,EACDA,kBAAmBlG,EADlB,EACkBA,KAG3B,OAFwBmB,KAAKX,MAArByF,YAIE,kBAAC,KAAD,CACEE,UAAU,6BACVpD,QAAU,kBAAMmD,OAElB,kBAAC,KAAD,CACEC,UAAU,6BACVpD,QAAU,kBAAMmD,EAAkBlG,EAAK2B,S,sCAKvC,IACJsE,EAAgB9E,KAAKX,MAArByF,YACAjG,EAASmB,KAAK1B,MAAdO,KACJoG,EAAOpG,EAAKoG,KAMhB,MAJkB,8BAAdpG,EAAKoG,OACLA,EAAO,qBAGPH,EACO,kGAEA,yCAAgBG,EAAhB,iC,+BAKX,OACI,kBAACV,GAAA,EAAD,CACIE,SAAS,MACTC,QAAU1E,KAAKkF,iBAEblF,KAAKmF,kB,GAhDStC,aAsDhCgC,GAAkB/B,UAAY,CAC1BgC,YAAa9B,IAAUC,KACvB8B,kBAAmB/B,IAAUG,KAC7BtE,KAAMmE,IAAUI,QAGLyB,U,6aCrDTO,G,iCACF,WAAY9G,GAAO,0BACf,cAAMA,IAGV+G,WAAa,SAACC,GACV,OAAOC,KAAOC,IAAIF,GAAYG,OAAO,2BALtB,E,qDAQFzJ,GAab,OAVIA,IAAS0J,KACE,kBAAC,KAAD,CAAoBV,UAAU,gBAEpChJ,IAAS2J,KACH,kBAAC,KAAD,CAAsBX,UAAU,gBAGhC,kBAAC,KAAD,CAAgBA,UAAU,iB,iCAMlCY,EAAU5J,GAAM,MACqBgE,KAAK1B,MAAzCuH,EADe,EACfA,eAAgBC,EADD,EACCA,gBAEP,SAAbF,EACAC,EAAe7J,GAEf8J,EAAgB9J,K,4CAIF,aAC4EgE,KAAK1B,MAA3FyH,EADU,EACVA,aAAcC,EADJ,EACIA,WAAYlI,EADhB,EACgBA,YAAamI,EAD7B,EAC6BA,aAActI,EAD3C,EAC2CA,UAAWoH,EADtD,EACsDA,kBAEpEmB,EAAM,GACNC,EAAW,GAmFf,OAjFAH,EAAWzK,SAAQ,SAAAsD,GACG,WAAdA,EAAKoG,KACLkB,EAAW,kBAAC5B,GAAA,EAAD,CACPE,SAAS,MACTC,QAAU,wCAEV,kBAAC,KAAD,OAEiB,aAAd7F,EAAKoG,KACZkB,EAAW,kBAAC5B,GAAA,EAAD,CACPE,SAAS,MACTC,QAAU,0CAEV,kBAAC,KAAD,OAEiB,8BAAd7F,EAAKoG,OACZkB,EAAW,kBAAC5B,GAAA,EAAD,CACPE,SAAS,MACTC,QAAU,mDAEV,kBAAC,KAAD,QAIRwB,EAAIjJ,KACA,wBACImJ,YAAYvH,EAAK2B,GACjB5F,IAAMiE,EAAK2B,GACXwE,UACInG,EAAK2B,KAAO1C,EACN,gCADN,uBAEsBe,EAAKoG,KAF3B,YAKJ,6BACI,uBAAGrD,QAAU,kBAAMqE,EAAapH,IAAQmG,UAAU,sBAC9C,kBAAC,KAAD,QAGR,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,qBACTmB,GAEN,yBAAKnB,UAAU,eAAgBnG,EAAKwH,cACpC,yBAAKrB,UAAU,gCACX,kBAAC,GAAD,CACID,kBAAoBA,EACpBlG,KAAOA,EACPiG,YAAejG,EAAK2B,KAAO1C,KAEE,IAA/Be,EAAKyH,sBACH,kBAAC/B,GAAA,EAAD,CACIE,SAAS,MACTC,QACI,wHAGJ,kBAAC,KAAD,CAAyBN,MAAM,aACtB,GAEfvF,EAAK0H,aACD,EAAKlB,WAAWxG,EAAK0H,cACrB,EAAKlB,WAAWxG,EAAK2H,SAEX,WAAd3H,EAAKoG,MAAmC,8BAAdpG,EAAKoG,KAC3B,kBAACwB,GAAA,EAAD,CACElG,OAAS1B,EACTlB,UAAYA,EACZG,YAAcA,EACdiI,aAAeA,EACfW,kBAAmB,EACnBrE,gBAAiB,IAEnB,YAQnB6D,I,wCAGO,aACkBlG,KAAK1B,MAA7BqI,EADM,EACNA,SAAUrC,EADJ,EACIA,UAElB,OACI,wBAAIU,UAAU,wBACV,wBACIA,UAAU,mDACVpK,IAAI,cACJ4F,GAAKmG,EACL/E,QAAU,kBAAM,EAAKgF,WAAW,OAAQD,KAExC,yBAAK3B,UAAU,eAAf,QAAoChF,KAAK6G,iBAAiBF,KAE9D,wBACI3B,UAAU,oDACVpK,IAAI,eACJ4F,GAAK8D,GAAa,WAClB1C,QAAU,kBAAM,EAAKgF,WAAW,QAAStC,KAEzB,KAAdA,EACI,yBAAKU,UAAU,eAAf,SAAqChF,KAAK6G,iBAAiBvC,IAC3D,sCAAatE,KAAK6G,iBAAiBvC,KAG3CtE,KAAK8G,yB,+BAMf,OACI,kBAAC,IAAM1F,SAAP,KACMpB,KAAK+G,uB,GA7JQlE,aAmK/BuC,GAAiBtC,UAAY,CACzB6D,SAAU3D,IAAUO,OACpBwC,aAAc/C,IAAUG,KACxB6C,WAAYhD,IAAUK,MACtBvF,YAAakF,IAAUO,OACvB0C,aAAcjD,IAAUG,KACxBmB,UAAWtB,IAAUO,OACrB5F,UAAWqF,IAAUK,MACrBwC,eAAgB7C,IAAUG,KAC1B2C,gBAAiB9C,IAAUG,KAC3B4B,kBAAmB/B,IAAUG,MAGlBiC,U,yaC3KR,IAAM4B,GAAb,qCACI,WAAY1I,GAAO,0BACf,cAAMA,IA2BV2I,sBAAwB,SAACjB,GACrB,IAAInJ,EACAqK,EASJ,OAPArK,EAAQmJ,EAAWmB,WAAU,SAACtI,GAC1B,OAAOA,EAAK2B,KAAO,EAAKlC,MAAMR,eAGlCoJ,EAAelB,EAAWoB,OAAOvK,EAAO,GACxCmJ,EAAWqB,QAAQH,EAAa,IAEzBlB,GAvCQ,EAgInBjB,kBAAoB,SAACvE,GACjB,EAAKuF,aAAa,EAAKpI,UAAW,EAAKC,YAAa,EAAK0J,OAAQ9G,IAjIlD,EAoInB+G,iBAAmB,WAAM,IACbzJ,EAAgB,EAAKQ,MAArBR,YACJ0J,EAAiB1J,EAQrB,OANA,EAAKwJ,OAAO/L,SAAQ,SAACiF,GACbA,IAAO1C,IACP0J,OAAiBxM,MAIlBwM,GA3IP,EAAKnI,MAAQ,CACToI,kBAAmB,CACf,wEACA,iDAIR,EAAKzB,WAAa,GAElB,EAAK0B,eACL,EAAKC,iBACL,EAAKC,YACL,EAAKC,iBACL,EAAK9B,aAAe,EAAKA,aAAa7G,KAAlB,QACpB,EAAK+G,aAAe,EAAKA,aAAa/G,KAAlB,QAjBL,EADvB,4JAsBcS,OAAOC,SAASC,OAAOC,KAAKC,UAtB1C,QAwBYC,KAAKrC,UAAU/B,OAAS,GAAKoE,KAAKpC,YAAYhC,OAAS,GAAKoE,KAAKsH,OAAO1L,OAAS,IACjFoE,KAAK+F,aAAa/F,KAAKrC,UAAWqC,KAAKpC,YAAaoC,KAAKsH,OAAQtH,KAAK1B,MAAMR,aAzBxF,kIA2CmBwC,EAASgD,EAAWrC,GAE/B,IAEI+E,EAFA8B,EAA2B,GAC3BC,EAAmB,GAGvB,GAAuB,IAAnBzH,EAAQ1E,QAAqC,IAArB0H,EAAU1H,QAA8C,IAA9BqF,EAAmBrF,OACrE,MAAO,GAGX0E,EAAUA,EAAQ5D,KAAI,SAAS6D,GAE3B,OADAA,EAAO0E,KAAO,SACP1E,KAEX+C,EAAYA,EAAU5G,KAAI,SAASsC,GAE/B,OADAA,EAASiG,KAAO,WACTjG,MAEXiC,EAAqBA,EAAmBvE,KAAI,SAASsL,GAEjD,OADAA,EAAI/C,KAAO,4BACJ+C,MAGQzM,SAAQ,SAASyM,GAC5BD,EAAiBE,eAAeD,EAAIE,WACpCH,EAAiBC,EAAIE,WAAWjL,KAAK+K,GAErCD,EAAiBC,EAAIE,WAAa,CAAEF,MAI5CF,EAA2BxH,EAE3B,IAjCmD,mCAiCtC4H,EAjCsC,KAiC3BC,EAjC2B,KAkC3C5H,EAASD,EAAQ8H,MAAK,SAAAvJ,GAAI,OAAIqJ,IAAcrJ,EAAK2B,MACjD3D,OAAK,OAEM7B,IAAXuF,GACA1D,EAAQiL,EAAyBO,QAAQ9H,GACzCuH,EAA2B,GAAH,WACjBA,EAAyB/K,MAAM,EAAGF,EAAQ,IADzB,IAEjBsL,GAFiB,IAGjBL,EAAyB/K,MAAMF,EAAQ,EAAGiL,EAAyBlM,WAG1EkM,EAA2BA,EAAyB7M,OAAOkN,IAZnE,MAAkC/M,OAAOkN,QAAQP,GAAjD,eAAoE,IAuBpE,OANA/B,EAAa1C,EAAUrI,OAAO6M,GAE1B9H,KAAK1B,MAAMR,cACXkI,EAAahG,KAAKiH,sBAAsBjB,IAGrCA,IAnGf,qCAuGQhG,KAAKrC,UAAYK,IAAYxD,MAAMwF,KAAK1B,MAAMiK,SAASxK,QAAQE,WAC/D+B,KAAKrC,UAAYxB,MAAMC,QAAQ4D,KAAKrC,WAAaqC,KAAKrC,UAAY,CAAEqC,KAAKrC,WACzEqC,KAAKrC,UAAYqC,KAAKrC,UAAUT,QAAO,SAAA2B,GAAI,YAAa7D,IAAT6D,OAzGvD,uCA6GQmB,KAAKpC,YAAcI,IAAYxD,MAAMwF,KAAK1B,MAAMiK,SAASxK,QAAQG,aACjE8B,KAAKpC,YAAczB,MAAMC,QAAQ4D,KAAKpC,aAAeoC,KAAKpC,YAAc,CAAEoC,KAAKpC,aAC/EoC,KAAKpC,YAAcoC,KAAKpC,YAAYV,QAAO,SAAA2B,GAAI,YAAa7D,IAAT6D,KACnDmB,KAAK1B,MAAMkK,qBAAqBxI,KAAKpC,YAAa,cAhH1D,kCAmHgB,IACA6K,EAA2BzI,KAAK1B,MAAhCmK,uBAERzI,KAAKsH,OAAStJ,IAAYxD,MAAMwF,KAAK1B,MAAMiK,SAASxK,QAAQI,QAC5D6B,KAAKsH,OAASnL,MAAMC,QAAQ4D,KAAKsH,QAAUtH,KAAKsH,OAAS,CAAEtH,KAAKsH,QAChEtH,KAAKsH,OAAStH,KAAKsH,OAAOpK,QAAO,SAAA2B,GAAI,YAAa7D,IAAT6D,KACzC4J,EAAuBzI,KAAKsH,UAzHpC,uCA4HqB,MAC2BtH,KAAK1B,MAArCiK,EADK,EACLA,UACRxD,EAFa,EACKA,mBACA/G,IAAYxD,MAAM+N,EAASxK,QAAQK,gBA9H7D,sDAkJuBS,GAlJvB,wFAmJmHmB,KAAK1B,MAAxG2C,EAnJhB,EAmJgBA,mBAAoByH,EAnJpC,EAmJoCA,iBAAkB5K,EAnJtD,EAmJsDA,YAAa2K,EAnJnE,EAmJmEA,uBAAwBE,EAnJ3F,EAmJ2FA,oBAGjE,WAAd9J,EAAKoG,KAtJjB,wBAuJYjF,KAAKrC,UAAYqC,KAAKrC,UAAUT,QAAO,SAAAsD,GAAE,OAAIA,IAAO3B,EAAK2B,MAvJrE,SAwJmCR,KAAKuH,mBAxJxC,cAwJYC,EAxJZ,gBA0JgCvG,EAAmB/D,QAAO,SAAC0L,GAC3C,OAAOA,EAAQV,YAAcrJ,EAAK2B,MACnC9D,KAAI,SAAAkM,GAAO,OAAIA,EAAQpI,MA5JtC,OA0JYR,KAAKsH,OA1JjB,+BA8JiC,aAAdzI,EAAKoG,KACZjF,KAAKpC,YAAcoC,KAAKpC,YAAYV,QAAO,SAAAsD,GAAE,OAAIA,IAAO3B,EAAK2B,MACxC,8BAAd3B,EAAKoG,OACZjF,KAAKsH,OAAStH,KAAKsH,OAAOpK,QAAO,SAAAsD,GAAE,OAAIA,IAAO3B,EAAK2B,OAjK/D,QAoKY3B,EAAK2B,KAAOgH,IACZA,OAAiBxM,GAGrByN,EAAuBzI,KAAKsH,QACvBtH,KAAKrC,UAAU/B,QAAWoE,KAAKpC,YAAYhC,QACxCoE,KAAKsH,OAAO1L,QAAWkC,GAAgB4K,GAC3CC,GAAoB,GAGxB3I,KAAK+F,aAAa/F,KAAKrC,UAAWqC,KAAKpC,YAAaoC,KAAKsH,OAAQE,GA9KzE,kIAiLiB7J,EAAWC,EAAa0J,EAAQxJ,GAAa,IAElD+K,EAFkD,EACoE7I,KAAK1B,MAAvHwK,EAD8C,EAC9CA,gBAAiB/C,EAD6B,EAC7BA,aAAc2C,EADe,EACfA,iBAAkBC,EADH,EACGA,oBAAqBH,EADxB,EACwBA,qBAAsBzD,EAD9C,EAC8CA,kBAGpG/E,KAAKrC,UAAYA,EACjBqC,KAAKpC,YAAcA,EACnBoC,KAAKsH,OAASA,EAEVoB,GACK5K,GAAekC,KAAKpC,YAAYhC,OACjCiN,EAAYjL,EAAY,GACjBE,IACP+K,EAAY/K,GAGhB+K,EAAY/K,EAGhBL,EAAWuC,KAAK1B,MAAMZ,QAASC,EAAWC,EAAa0J,EAAQuB,GAC/DL,EAAqBxI,KAAKpC,YAAa,YACvCmH,EAAkB8D,GAEdlL,EAAU/B,QAAUgC,EAAYhC,QAAU0L,EAAO1L,QAAUiN,GAC3D9C,EAAapI,EAAWC,EAAa0J,EAAQuB,GAC7CF,GAAoB,IAEpBG,MA3MZ,iCA+MeC,GAAO,WACVC,EAAO,GAQX,YANchO,IAAV+N,GACAA,EAAMxN,SAAQ,SAAA4I,GACV6E,EAAK/L,KAAK,EAAKgM,UAAU9E,OAI1B6E,IAxNf,0CA+NQ,IAHA,IAAIA,EAAO,GACPE,EAAU,GAELC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxBD,EAAQjM,KAAK,4BAAI,kBAAC,WAAD,CAAUmM,KAAOC,eAAaC,OAGnD,IAAK,IAAIH,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBH,EAAK/L,KAAK,4BAAMiM,IAGpB,OAAOF,IAvOf,iCA0Oe7E,GAAM,IAGTa,EAHS,OACTkB,EAAM,GACN3F,OAASvF,EAuBb,OApBAgF,KAAKgG,WAAWzK,SAAQ,SAAAsD,GACpBmG,EAAY,CAAE,mBACdzE,EAAS4D,EAAK7D,QAAQ8H,MAAK,SAASmB,GAChC,OAAOA,EAAI/I,KAAO3B,EAAK2B,MAGvB,EAAKlC,MAAMR,YACU,cAAjByC,EAAOlB,QACP2F,EAAU/H,KAAK,aACf+H,EAAU/H,KAAK,wBAGA,cAAfkH,EAAK9E,OACL2F,EAAU/H,KAAK,aAIvBiJ,EAAIjJ,KAAK,wBAAI+H,UAAYA,EAAUnJ,KAAK,MAA0B,OAAjB0E,EAAOvG,MAAiB,UAAYuG,EAAOvG,WAGzFkM,IAnQf,gCAsQc/B,GAAM,aACwBnE,KAAK1B,MAAjCkL,EADI,EACJA,aAAclF,EADV,EACUA,UAClB4B,EAAM,GACN8C,EAAO,GA0CX,OAxCI7E,EAAKsF,aACLvD,EAAIjJ,KACA,wBAAI+H,UACAwE,EAAaE,SAASvF,EAAKK,MACvB,2CACA,gCACFxE,KAAK2J,0BAA0BH,EAAcrF,EAAKK,MAJxD,IAIkEL,EAAKK,OAG3E0B,EAAIjJ,KACA,wBAAI+H,UAAU,2CACV,kBAAC,GAAD,CAAWb,KAAOA,EAAOG,UAAYA,MAI7CtE,KAAKgG,WAAWzK,SAAQ,WACpB2K,EAAIjJ,KAAK,wBAAI+H,UAAU,wBAG3BgE,EAAK/L,KAAK,4BAAMiJ,IAEZsD,EAAaE,SAASvF,EAAKK,OAC3BL,EAAKsF,YAAYlO,SAAQ,SAAAqO,GACrB1D,EAAM,EAAK2D,eAAeD,GAC1BZ,EAAK/L,KAAK,wBAAI+H,UAAiC,cAArB4E,EAAWvK,MAAwB,iBAAmB,IAAO6G,SAI/FA,EAAIjJ,KAAK,wBAAI+H,UAAU,gCAAiCb,EAAKK,OAC7D0B,EAAIjJ,KACA,wBAAI+H,UAAU,2CACV,kBAAC,GAAD,CAAWb,KAAOA,EAAOG,UAAYA,MAI7C4B,EAAMA,EAAIjL,OAAO+E,KAAK8J,WAAW3F,IAEjC6E,EAAK/L,KAAK,wBAAI+H,UAA2B,cAAfb,EAAK9E,MAAwB,iBAAmB,IAAO6G,KAG9E8C,IAnTf,qCAsTmB7E,GACX,IAAI+B,EAAM,GASV,OAPAA,EAAIjJ,KAAK,wBAAI+H,UAAU,4CACnB,uBAAGA,UAAU,aAAcb,EAAKK,QAEpC0B,EAAIjJ,KAAK,wBAAI+H,UAAU,2CAA0C,kBAAC,GAAD,CAAWb,KAAOA,MAEnF+B,EAAMA,EAAIjL,OAAO+E,KAAK8J,WAAW3F,MA9TzC,gDAmU8BqF,EAAcO,GAAU,WAS9C,OANIP,EAAaE,SAASK,GACT,kBAAC,IAAD,CAAe/E,UAAU,mCAAmCpD,QAAU,kBAAM,EAAKtD,MAAM0L,UAAUD,MAEjG,kBAAC,IAAD,CAAgB/E,UAAU,uBAAuBpD,QAAU,kBAAM,EAAKtD,MAAM0L,UAAUD,QAzU/G,kCA+UgBE,EAAa/I,GAAS,MACgDlB,KAAK1B,MAA3EqI,EADsB,EACtBA,SAAU7I,EADY,EACZA,YAAawG,EADD,EACCA,UAAWuB,EADZ,EACYA,eAAgBC,EAD5B,EAC4BA,gBAE1D,OACI,kBAAC,IAAM1E,SAAP,KACI,yBAAK4D,UAAU,uBACX,2BAAOA,UAAU,uCACb,+BACI,kBAAC,GAAD,CACI2B,SAAWA,EACXZ,aAAe/F,KAAK+F,aACpBC,WAAahG,KAAKgG,WAClBlI,YAAcA,EACdmI,aAAejG,KAAKiG,aACpB3B,UAAYA,EACZ3G,UAAYqC,KAAKrC,UACjBkI,eAAiBA,EACjBC,gBAAkBA,EAClBf,kBAAoB/E,KAAK+E,qBAGjC,+BACM7D,EAAUlB,KAAKkK,oBAAsBlK,KAAKmK,WAAWF,SArWnF,+BA6Wa,MAE4DjK,KAAK1B,MAD9D8L,EADH,EACGA,WAAYC,EADf,EACeA,oBAAqB/J,EADpC,EACoCA,QAASgD,EAD7C,EAC6CA,UAAWxC,EADxD,EACwDA,4BAA6BC,EADrF,EACqFA,6BACtFC,EAFC,EAEDA,4BAA6BC,EAF5B,EAE4BA,mBAAoBC,EAFhD,EAEgDA,QAIrD,OAFAlB,KAAKgG,WAAahG,KAAKsK,eAAehK,EAASgD,EAAWrC,GAGtD,kBAAC,IAAMG,SAAP,KACI,kBAAC,GAAD,CACIf,kBAAoBC,EAAQ5D,KAAI,SAAA6D,GAAM,OAAIA,EAAOC,MACjDvB,aAAee,KAAK+F,aACpBjI,YAAckC,KAAK1B,MAAMR,YACzBkD,4BAA8BA,EAC9BF,4BAA8BA,EAC9BC,6BAA+BA,IAEhCqJ,EAEG,KADApK,KAAKuK,YAAYF,EAAqBnJ,QA9X5D,GAAgC2B,aAsahCmE,GAAWlE,UAAY,CACnBlC,qBAAsBoC,IAAUC,KAChCsF,SAAUvF,IAAUI,OACpB1F,QAASsF,IAAUI,OACnB2C,aAAc/C,IAAUG,KACxBqH,gBAAiBxH,IAAUK,MAC3BgH,oBAAqBrH,IAAUK,MAC/B/C,QAAS0C,IAAUK,MACnBC,UAAWN,IAAUK,MACrBpC,mBAAoB+B,IAAUK,MAC9BsD,SAAU3D,IAAUO,OACpBe,UAAWtB,IAAUO,OACrBrC,QAAS8B,IAAUC,KACnB4C,eAAgB7C,IAAUG,KAC1B2C,gBAAiB9C,IAAUG,KAC3B6G,UAAWhH,IAAUG,KACrBqG,aAAcxG,IAAUK,MACxBmF,qBAAsBxF,IAAUG,KAChCsF,uBAAwBzF,IAAUG,KAClCiH,WAAYpH,IAAUC,KACtB8B,kBAAmB/B,IAAUG,KAC7BrF,YAAakF,IAAUO,OACvBkH,MAAOzH,IAAUI,OACjBsF,iBAAkB1F,IAAUC,KAC5B0F,oBAAqB3F,IAAUG,KAC/B2F,gBAAiB9F,IAAUG,KAC3BnC,4BAA6BgC,IAAUC,KACvCnC,4BAA6BkC,IAAUC,KACvClC,6BAA8BiC,IAAUC,MAG7ByH,mBAAWlH,mBA/D1B,SAAyBnE,GACrB,MAAO,CACHuB,qBAAsBvB,EAAMoE,oBAAoB7C,qBAChD4J,gBAAiBnL,EAAMqE,aAAa8G,gBACpCH,oBAAqBhL,EAAMqE,aAAa2G,oBACxCnJ,QAAS7B,EAAMqE,aAAaxC,QAC5BZ,QAASjB,EAAMqE,aAAapD,QAC5BgD,UAAWjE,EAAMqE,aAAaJ,UAC9BrC,mBAAoB5B,EAAMqE,aAAazC,mBACvC0F,SAAUtH,EAAMqE,aAAaiD,SAC7BrC,UAAWjF,EAAMqE,aAAaY,UAC9BkF,aAAcnK,EAAMqE,aAAa8F,aACjCY,WAAY/K,EAAMqE,aAAa0G,WAC/BtM,YAAauB,EAAMqE,aAAa5F,gBAIxC,SAA4BgG,GACxB,MAAO,CACHiC,aAAe,SAACpI,EAAWC,EAAaqD,EAAoBnD,GAA7C,OACXgG,EAAS6G,IAAe5E,aAAapI,EAAWC,EAAaqD,EAAoBnD,KAErF+H,eAAgB,SAACD,GAAD,OAAc9B,EAAS6G,IAAe9E,eAAeD,KACrEE,gBAAiB,SAACF,GAAD,OAAc9B,EAAS6G,IAAe7E,gBAAgBF,KACvEoE,UAAW,SAACD,GAAD,OAAcjG,EAAS6G,IAAeX,UAAUD,KAC3DvB,qBAAuB,SAACtI,EAAqBsC,GAAtB,OACnBsB,EAASG,IAAsBuE,qBAAqBtI,EAAqBsC,KAE7EiG,uBAAwB,SAACmC,GAAD,OAAwB9G,EAAS+G,IAAwBpC,uBAAuBmC,QAmCtFpH,CAA6CwD,K,+bC/chE,IAAM8D,GAAb,iCACI,WAAYxM,GAAO,+BACTA,GAFd,6CAKa,MAC8C0B,KAAK1B,MAAhD4C,EADH,EACGA,QAASf,EADZ,EACYA,qBAAsB4K,EADlC,EACkCA,QAEvC,OACI,kBAACrJ,EAAA,EAAD,CACIC,QAAQ,UACRC,QAAUzB,EACV0B,aAAaX,GAEX6J,EAAU,MAAQ,yBAdpC,GAAqClI,aAoBrCiI,GAAgBhI,UAAY,CACxB3C,qBAAsB6C,IAAUG,KAChC4H,QAAS/H,IAAUC,KACnB/B,QAAS8B,IAAUC,MASRO,yBAAQ,MANvB,SAA4BM,GACxB,MAAO,CACH3D,qBAAuB,kBAAM2D,EAASC,KAAsB5D,4BAIrDqD,CAAkCsH,I,sEC/BlC,QACXE,qBAPJ,WACI,MAAO,CACH/F,KAAMgG,KAAMC,wB,6aCIdC,G,iCACF,WAAY7M,GAAO,0BACf,cAAMA,IACD8M,SAAW,EAAKA,SAASlM,KAAd,QAChB,EAAKmM,mBAAqB,EAAKA,mBAAmBnM,KAAxB,QAHX,E,+CAOfc,KAAK1B,MAAMgN,mB,yCAGIC,GAAa,WAY5B,OAVI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIjL,GAAK+K,EAAYG,QACjBC,MAAQJ,EAAYG,QACpBE,UAAYL,EAAYM,SACxBC,SAAW,kBACP,EAAKxN,MAAMyN,eAAeR,S,0CAO1BS,GAChB,IAAIC,EAAgB,GAOpB,OALAD,EAAazQ,QAAQ,SAASgQ,GAC1B,IAAIW,EAAelM,KAAKqL,mBAAmBE,GAC3CU,EAAchP,KAAKiP,IACrBhN,KAAKc,OAEAiM,I,gDAGeD,GAItB,IAHA,IAAIG,EAAqB,GACrBC,EAAgB,GAEXjD,EAAI,EAAGA,EAAI6C,EAAapQ,OAAQuN,IACjC6C,EAAa7C,GAAG0C,UAChBM,EAAmBlP,KAAK+O,EAAa7C,GAAGuC,SAIhD,IAAK,IAAIvC,EAAI,EAAGA,EAAIgD,EAAmBvQ,OAAQuN,IAC3CiD,GAAiBD,EAAmBhD,GAE/BA,EAAI,EAAKgD,EAAmBvQ,SAC7BwQ,GAAiB,MAIzB,OAAOA,I,+BAGF,IAEDH,EACAG,EAFIJ,EAAiBhM,KAAK1B,MAAtB0N,aAOR,OAHAC,EAAgBjM,KAAKqM,oBAAoBL,GACzCI,EAAgBpM,KAAKsM,0BAA0BN,GAG3C,kBAAC,IAAM5K,SAAP,KACI,kBAACmL,GAAA,EAAD,CACIC,OAAS,kBAACC,GAAA,EAAD,CAAgBrB,SAAWpL,KAAKoL,UAAhC,SACGgB,GAEZ7K,OAASvB,KAAK1B,MAAMoO,qBACpBT,cAAgBA,S,GAzEPpJ,aAgF7BsI,GAAerI,UAAY,CACvBwI,eAAgBtI,IAAUG,KAC1BuJ,qBAAsB1J,IAAUC,KAChC+I,aAAchJ,IAAUK,MACxB0I,eAAgB/I,IAAUG,MAiBdK,0BAdhB,SAAyBnE,GACrB,MAAO,CACHqN,qBAAsBrN,EAAMqN,qBAC5BV,aAAc3M,EAAMqE,aAAasI,iBAIzC,SAA4BlI,GACxB,MAAO,CACHwH,eAAgB,kBAAMxH,EAAS6I,GAAsB3B,yBACrDe,eAAgB,SAAC7O,GAAD,OAAY4G,EAAS6G,IAAeoB,eAAe7O,QAI3DsG,CAA6C2H,I,ycCrGtD,IAAMyB,GAAb,iCACI,WAAYtO,GAAO,0BACf,cAAMA,IAeVuO,iBAAmB,SAAC3P,GAChB,EAAK4P,SAAS,CAAE5P,WAChB,EAAK6P,cAAc7P,IAlBJ,EAqBnB6P,cAAgB,MAAW,SAAS7P,GAChC8C,KAAK1B,MAAM0O,iBAAiB9P,KAC7B,KApBC,EAAKmC,MAAQ,CACTnC,OAAQ,EAAKoB,MAAM2O,YAGvB,EAAKF,cAAgB,EAAKA,cAAc7N,KAAnB,QAPN,EADvB,uDAWuBgO,GACc,KAAzBA,EAAUD,YAA+C,KAA1BjN,KAAK1B,MAAM2O,YAC1CjN,KAAK8M,SAAS,CAAE5P,OAAQ8C,KAAK1B,MAAM2O,eAb/C,+BA2BQ,OACI,kBAAC,IAAM7L,SAAP,KACI,kBAAC+L,GAAA,EAAD,CACInT,MAAQgG,KAAKX,MAAMnC,OACnBsD,GAAG,eACH4M,YAAY,iBACZtB,SAAW9L,KAAK6M,iBAChBQ,aAAW,wBAlC/B,GAA+BxK,aAyC/B+J,GAAU9J,UAAY,CAClBkK,iBAAkBhK,IAAUG,KAC5B8J,WAAYjK,IAAUO,QAeVC,0BAZhB,SAAyBnE,GACrB,MAAO,CACH4N,WAAY5N,EAAMqE,aAAauJ,eAIvC,SAA4BnJ,GACxB,MAAO,CACHkJ,iBAAkB,SAACC,GAAD,OAAgBnJ,EAAS6G,IAAe2C,aAAaL,QAI/DzJ,CAA6CoJ,I,+bCpDtD,IAAMW,GAAb,iCACI,WAAYjP,GAAO,0BACf,cAAMA,IAoBVkP,cAAgB,SAACxB,GACb,IAAIyB,EAAa,GAQjB,OANAzB,EAAazQ,SAAQ,SAAS2B,GACtBA,EAAO2O,UACP4B,EAAWxQ,KAAKC,EAAOwO,YAIxB+B,GA9BQ,EAiCnBC,mBAAqB,WAAM,MACkB,EAAKpP,MAAtCyN,EADe,EACfA,eADe,EACCC,aAEXzQ,SAAQ,SAASgQ,GAC1BA,EAAYM,UAAW,EACvBE,EAAeR,OAtCJ,EA0CnBoC,WAAa,WAAwB,IAAvB1I,EAAuB,uDAAhB,GAAIzE,EAAY,uDAAP,GAAO,EACsB,EAAKlC,MAApDyN,EADyB,EACzBA,eAAgBuB,EADS,EACTA,aAActB,EADL,EACKA,aAElC/G,EACa,UAATA,EACW,KAAPzE,EACA,EAAKkN,qBAEL1B,EAAazQ,SAAQ,SAASgQ,GACtBA,EAAYG,UAAYlL,GACxBuL,EAAeR,MAK3B+B,EAAa,KAGjB,EAAKI,qBACLJ,EAAa,MA7DF,EAiEnBM,WAAa,SAACC,GACV,EAAKf,SAAS,CAAEe,aAlED,EAqEnBzC,SAAW,WAAM,IACL0C,EAAiB,EAAKzO,MAAtByO,aAER,EAAKhB,SAAS,CACVgB,cAAeA,KAzEJ,EA6EnBC,aAAe,YAGXC,EAFmC,EAAK1P,MAAhC0P,2BA9EO,EAmFnBlF,gBAAkB,WAAM,MACiF,EAAKxK,MAAlGZ,EADY,EACZA,QAASoL,EADG,EACHA,gBAAiBmF,EADd,EACcA,uBAAwBtF,EADtC,EACsCA,oBAAqB5D,EAD3D,EAC2DA,kBAE/E+D,IACAmF,EAAuB,YACvBtF,GAAoB,GACpB5D,IACAtH,EAAWC,EAAS,KAvFpB,EAAK2B,MAAQ,CACT6O,iBAAkB,CACd,kBAAC1C,GAAA,EAAD,CAAc5Q,IAAI,iBAAiBuT,UAAU,SAASvM,QAAU,EAAKkH,iBAArE,0BAEJmD,cAAe,CACX,kBAACT,GAAA,EAAD,CACI5Q,IAAI,gBACJuT,UAAU,SACVvM,QAAU,kBAAM,EAAKtD,MAAM8P,gBAH/B,kBAQJP,SAAS,EACTC,cAAc,GAjBH,EADvB,6CA8Fa,aACsF9N,KAAK1B,MAAxF2O,EADH,EACGA,WAAY/L,EADf,EACeA,QAASmN,EADxB,EACwBA,KAAMC,EAD9B,EAC8BA,QAAStC,EADvC,EACuCA,aAAcuC,EADrD,EACqDA,WAAYC,EADjE,EACiEA,iBADjE,EAE8DxO,KAAKX,MAAhE6O,EAFH,EAEGA,iBAAkBjC,EAFrB,EAEqBA,cAAe6B,EAFpC,EAEoCA,aAAcD,EAFlD,EAEkDA,QAEvD,OACI,kBAAC,IAAMzM,SAAP,KACI,kBAACqN,EAAA,EAAD,CAASzJ,UAAU,gBAAgB0J,gBAAkB1O,KAAK2N,YACtD,kBAACgB,GAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAcjN,QAAQ,gBAClB,kBAACkN,GAAA,EAAD,CACIC,MAAuB,KAAf7B,EAAoB,CAAEA,GAAe,GAC7C8B,WAAa/O,KAAK2N,WAClBqB,aAAa,aAEb,kBAAC,GAAD,OAEJ,kBAACH,GAAA,EAAD,CACIC,MAAQ9O,KAAKwN,cAAcxB,GAC3B+C,WAAa/O,KAAK2N,WAClBsB,gBAAkBjP,KAAK2N,WACvBqB,aAAa,SAEb,kBAAC,GAAD,QAGR,kBAACJ,EAAA,EAAD,CAAcjN,QAAQ,gBAClB,kBAACuN,EAAA,EAAD,KACI,kBAAC,GAAD,CAAiBhO,QAAUA,MAGnC,kBAAC0N,EAAA,EAAD,CAAcjN,QAAQ,qBAClB,kBAACuN,EAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIlD,cAAgBA,EAChB1K,OAASuM,EACT1C,SAAWpL,KAAKoL,YAGxB,kBAAC8D,EAAA,EAAD,KACI,kBAACE,GAAA,EAAD,CAAanD,cAAgBiC,MAGrC,kBAACgB,EAAA,EAAD,CAAavN,QAAQ,aAAa0N,MAAQ,CAAEC,QAAS,eACjD,kBAAC,KAAD,CACIjB,KAAOA,EACPC,QAAUA,EACViB,MAAQhB,EACRiB,WAAY,EACZhB,iBAAmBA,EACnBiB,SAAS,uBACT9N,QAAU+N,IAAkBC,OAGpC,kBAACf,EAAA,EAAD,CAAcjN,QAAQ,gBACfkM,EAMG,KALA,kBAACqB,EAAA,EAAD,KACE,uBAAGtN,QAAU,kBAAM,EAAKmM,iBAAxB,0BAtJpC,GAAkClL,aAoKlC0K,GAAazK,UAAY,CACrB5B,QAAS8B,IAAUC,KACnBvF,QAASsF,IAAUI,OACnBiL,KAAMrL,IAAUE,OAChBoL,QAAStL,IAAUE,OACnBqL,WAAYvL,IAAUE,OACtBsL,iBAAkBxL,IAAUG,KAC5B6K,uBAAwBhL,IAAUG,KAClC2F,gBAAiB9F,IAAUG,KAC3BiL,YAAapL,IAAUG,KACvB8K,uBAAwBjL,IAAUG,KAClCwF,oBAAqB3F,IAAUG,KAC/B4B,kBAAmB/B,IAAUG,KAC7B8J,WAAYjK,IAAUO,OACtB+J,aAActK,IAAUG,KACxB6I,aAAchJ,IAAUK,MACxB0I,eAAgB/I,IAAUG,MAGfoK,U,6bChLR,IAAMqC,GAAb,mCACI,WAAYtR,GAAO,0BACf,cAAMA,IAgBVqK,oBAAsB,SAAC3O,GACnB,EAAK8S,SAAS,CACVpE,iBAAkB1O,KAnBP,EAuBnBwH,QAAU,WAAM,MACiD,EAAKlD,MAA1DuR,EADI,EACJA,kBAAmBnS,EADf,EACeA,QAASoS,EADxB,EACwBA,qBAEpCD,IACApS,EAAWC,EAASoS,EAAqBpT,KAAI,SAAA6D,GAAM,OAAIA,EAAOC,QA3B/C,EA8BnBuP,iBAAmB,WAAM,IACbtI,EAAsB,EAAKpI,MAA3BoI,kBACAgD,EAAU,EAAKnM,MAAfmM,MAER,OAAIA,EAAMuF,OACC,kBAACC,GAAA,EAAD,CACHrL,KAAOsL,IACP9L,MAAM,UACN7E,MAAQ,iCACR4Q,KAAO1I,EACPgD,MACI,SAAWA,EAAMuF,OAAS,KAAOvF,EAAM2F,OAE3CC,OAAS,kBAAC,GAAD,CAAiBtF,SAAU,MAGjC,kBAACkF,GAAA,EAAD,CACHrL,KAAO0L,IACPlM,MAAM,UACN7E,MAAQ,sCACR4Q,KAAO1I,EACP4I,OAAS,kBAAC,GAAD,CAAiBtF,SAAU,OAjD5C,EAAK1L,MAAQ,CACToI,kBAAmB,CACf,wEACA,gDAEJiB,kBAAkB,GAGtB,EAAKpK,MAAM2P,uBAAuB,YAVnB,EADvB,4JAectO,OAAOC,SAASC,OAAOC,KAAKC,UAf1C,uHAyDa,aAEgHC,KAAK1B,MADlHyN,EADH,EACGA,eAAgBjD,EADnB,EACmBA,gBAAiBkF,EADpC,EACoCA,uBAAwBC,EAD5D,EAC4DA,uBAAwB7D,EADpF,EACoFA,WAAYK,EADhG,EACgGA,MAAO2D,EADvG,EACuGA,YAAanB,EADpH,EACoHA,WACrHK,EAFC,EAEDA,aAAc5P,EAFb,EAEaA,QAASwD,EAFtB,EAEsBA,QAASmN,EAF/B,EAE+BA,KAAMC,EAFrC,EAEqCA,QAAStC,EAF9C,EAE8CA,aAAcuC,EAF5D,EAE4DA,WAAYC,EAFxE,EAEwEA,iBAAkBzJ,EAF1F,EAE0FA,kBACvF2D,EAAqB1I,KAAKX,MAA1BqJ,iBAER,OACI,kBAAC,IAAMtH,SAAP,KACI,kBAAC,aAAD,KACI,kBAAC,kBAAD,CAAiB7B,MAAM,gBAE3B,kBAAC,OAAD,KACI,kBAAC,KAAkBgR,SAAnB,MACM,SAAAvW,GAAK,OAC+B,IAAlCA,EAAMwW,YAAYC,YACZ,kBAACR,GAAA,EAAD,CACErL,KAAO8L,IACPtM,MAAM,UACN7E,MAAQ,6CACR4Q,KAAO,CAAE,sEAEX,kBAAC,IAAM/O,SAAP,KACE,kBAACuP,GAAA,EAAD,CACIlG,MAAQA,EACRjJ,QAAU,EAAKA,UAEjB4I,IAAelJ,EACX,EAAK6O,mBACL,8BAEN,kBAACa,EAAA,EAAD,CAAM5L,UAAU,8BACZ,kBAAC6L,EAAA,EAAD,KACI,6BACOzG,EAmBG,KAlBA,kBAAC,GAAD,CACElJ,QAAUA,EACVxD,QAAUA,EACV2Q,KAAOA,EACPC,QAAUA,EACVC,WAAaA,EACbC,iBAAmBA,EACnB1F,gBAAkBA,EAClBkF,uBAAyBA,EACzBI,YAAcA,EACdrJ,kBAAoBA,EACpB4D,oBAAsB,EAAKA,oBAC3BsF,uBAAyBA,EACzBhB,WAAaA,EACbK,aAAeA,EACftB,aAAeA,EACfD,eAAiBA,IAIzB,kBAAC,GAAD,CACIhH,kBAAoBA,EACpB0F,MAAQA,EACR/B,iBAAmBA,EACnBC,oBAAsB,EAAKA,oBAC3BG,gBAAmBA,EACnBhI,4BAA8B9G,EAAMwW,YAAYM,cAChD/P,6BAA+B/G,EAAMwW,YAAYO,eACjD/P,4BAA8BhH,EAAMwW,YAAYQ,gBAEjD5G,GAAelJ,EAgBZ,KAfF,kBAACuN,EAAA,EAAD,CAASzJ,UAAU,iBACf,kBAAC4J,EAAA,EAAD,CAAc5J,UAAU,mBACpB,kBAACkK,EAAA,EAAD,KACI,kBAAC,KAAD,CACIb,KAAOA,EACPC,QAAUA,EACViB,MAAQhB,EACRiB,WAAY,EACZhB,iBAAmBA,EACnBiB,SAAS,0BACT9N,QAAU+N,IAAkBuB,yBAnIhG,GAA+BpO,aAsJ/B+M,GAAU9M,UAAY,CAClBwL,QAAStL,IAAUE,OACnBmL,KAAMrL,IAAUE,OAChBqL,WAAYvL,IAAUE,OACtBuH,MAAOzH,IAAUI,OACjBlC,QAAS8B,IAAUC,KACnBgL,uBAAwBjL,IAAUG,KAClCiH,WAAYpH,IAAUC,KACtBuL,iBAAkBxL,IAAUG,KAC5B4B,kBAAmB/B,IAAUG,KAC7B2F,gBAAiB9F,IAAUG,KAC3B6K,uBAAwBhL,IAAUG,KAClCzF,QAASsF,IAAUI,OACnBqF,uBAAwBzF,IAAUG,KAClC/C,eAAgB4C,IAAUK,MAC1BwM,kBAAmB7M,IAAUG,KAC7B2M,qBAAsB9M,IAAUK,MAChC+K,YAAapL,IAAUG,KACvB8J,WAAYjK,IAAUO,OACtB+J,aAActK,IAAUG,KACxB6I,aAAchJ,IAAUK,MACxB0I,eAAgB/I,IAAUG,MAiCfuH,sBAAWlH,mBAf1B,SAAyBnE,GACrB,MAAO,CACHgP,KAAMhP,EAAMqE,aAAa2K,KACzBC,QAASjP,EAAMqE,aAAa4K,QAC5BC,WAAYlP,EAAMqE,aAAa6K,WAC/B9D,MAAOpL,EAAMqE,aAAa+G,MAC1BvJ,QAAS7B,EAAMqE,aAAaxC,QAC5BkJ,WAAY/K,EAAMqE,aAAa0G,WAC/BhK,eAAgBf,EAAMwE,sBAAsBzD,eAC5C0P,qBAAsBzQ,EAAMqE,aAAaoM,qBACzC7C,WAAY5N,EAAMqE,aAAauJ,WAC/BjB,aAAc3M,EAAMqE,aAAasI,iBA1BzC,SAA4BlI,GACxB,MAAO,CACHmK,uBAAwB,SAACzL,GAAD,OAAasB,EAASG,IAAsBgK,uBAAuBzL,KAC3FgM,iBAAkB,SAAC0C,GAAD,OAAgBpN,EAAS6G,IAAe6D,iBAAiB0C,KAC3EnM,kBAAmB,SAACvE,GAAD,OAAQsD,EAAS6G,IAAe5F,kBAAkBvE,KACrEsI,gBAAiB,kBAAMhF,EAAS6G,IAAe7B,oBAC/CkF,uBAAwB,kBAAMlK,EAAS6G,IAAeqD,2BACtDvF,uBAAwB,SAACmC,GAAD,OAAwB9G,EAAS+G,IAAwBpC,uBAAuBmC,KACxGiF,kBAAmB,kBAAM/L,EAAS6G,IAAekF,sBACjDzB,YAAa,kBAAMtK,EAAS6G,IAAeyD,gBAC3Cd,aAAc,SAACpQ,GAAD,OAAY4G,EAAS6G,IAAe2C,aAAapQ,KAC/D6O,eAAgB,SAAC7O,GAAD,OAAY4G,EAAS6G,IAAeoB,eAAe7O,QAmBjDsG,CAA6CoM","file":"js/4-c380f786e3e9ed43b46d.js","sourcesContent":["'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\treturn str.split('?')[1] || '';\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\tformatter(decodeURIComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, hasBaselinesReadPermissions,\n            hasBaselinesWritePermissions, hasInventoryReadPermissions, historicalProfiles, loading, entities, selectedBaselineIds,\n            selectedHSPIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={\n                                ((entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) || !entities) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0\n                            }\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                hasReadPermissions={ hasBaselinesReadPermissions }\n                                hasWritePermissions={ hasBaselinesWritePermissions }\n                                kebab={ false }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={\n                    <div>{ fact.tooltip }</div>\n                }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        const { toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            toggleFactSort(sort);\n        } else {\n            toggleStateSort(sort);\n        }\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, referenceId, removeSystem, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={\n                        item.id === referenceId\n                            ? 'drift-header reference-header'\n                            : `drift-header ${item.type}-header`\n                    }\n                >\n                    <div>\n                        <a onClick={ () => removeSystem(item) } className=\"remove-system-icon\">\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={\n                                        <div>System profile does not exist. Please run insights-client on system to upload archive.</div>\n                                    }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\">\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport queryString from 'query-string';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (historicalGroups.hasOwnProperty(hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        updateReferenceId(queryString.parse(location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { historicalProfiles, isFirstReference, referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, reference);\n        setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            setIsFirstReference(false);\n        } else {\n            clearComparison();\n        }\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system.state === 'DIFFERENT') {\n                    className.push('highlight');\n                    className.push('different-fact-cell');\n                }\n            } else {\n                if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>{ system.value === null ? 'No Data' : system.value }</td>);\n        });\n\n        return row;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                <td className={\n                    expandedRows.includes(fact.name) ?\n                        'nested-fact sticky-column fixed-column-1' :\n                        'sticky-column fixed-column-1' }>\n                    { this.renderExpandableRowButton(expandedRows, fact.name) } { fact.name }\n                </td>\n            );\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr>{ row }</tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        let row = [];\n\n        row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n            <p className=\"child-row\">{ fact.name }</p>\n        </td>);\n        row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n        row = row.concat(this.findSystem(fact));\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"carat-margin pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"carat-margin pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, referenceId, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table className=\"pf-c-table pf-m-compact drift-table\">\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, hasBaselinesReadPermissions, hasBaselinesWritePermissions,\n            hasInventoryReadPermissions, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    hasBaselinesReadPermissions={ hasBaselinesReadPermissions }\n                    hasBaselinesWritePermissions={ hasBaselinesWritePermissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem>\n                <Checkbox\n                    id={ stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () =>\n                        this.props.addStateFilter(stateFilter)\n                    }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    toggle={ <DropdownToggle onToggle={ this.onToggle }>\n                        View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { compareActions } from '../../modules';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.changeFactFilter(filter);\n    }, 250);\n\n    render() {\n        return (\n            <React.Fragment>\n                <TextInput\n                    value={ this.state.filter }\n                    id=\"filterByFact\"\n                    placeholder=\"Filter by fact\"\n                    onChange={ this.updateFactFilter }\n                    aria-label=\"filter by fact\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    changeFactFilter: PropTypes.func,\n    factFilter: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        changeFactFilter: (factFilter) => dispatch(compareActions.filterByFact(factFilter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(SearchBar));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { setHistory } from '../../../Utilities/SetHistory';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem key=\"remove-systems\" component=\"button\" onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = (type = '', id = '') => {\n        const { addStateFilter, filterByFact, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                filterByFact('');\n            }\n        } else {\n            this.clearAllStateChips();\n            filterByFact('');\n        }\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, setIsFirstReference, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        setIsFirstReference(true);\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    render() {\n        const { factFilter, loading, page, perPage, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen, isEmpty } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ factFilter !== '' ? [ factFilter ] : [] }\n                                deleteChip={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={ { default: 'alignRight' } }>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                        <ToolbarGroup variant=\"filter-group\">\n                            { !isEmpty\n                                ? <ToolbarItem>\n                                    <a onClick={ () => this.clearFilters() } >\n                                        Clear filters\n                                    </a>\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={\n                    'Error ' + error.status + ': ' + error.detail\n                }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { addStateFilter, clearComparison, clearComparisonFilters, clearSelectedBaselines, emptyState, error, exportToCSV, factFilter,\n            filterByFact, history, loading, page, perPage, stateFilters, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    hasBaselinesReadPermissions={ value.permissions.baselinesRead }\n                                                    hasBaselinesWritePermissions={ value.permissions.baselinesWrite }\n                                                    hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}