{"version":3,"sources":["webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./src/SmartComponents/ErrorAlert/redux/actions.js","webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js","webpack:///./src/SmartComponents/DriftPage/ExportCSVButton/ExportCSVButton.js","webpack:///./src/SmartComponents/DriftPage/DriftFilterChips/DriftFilterChips.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["strictUriEncode","objectAssign","encode","value","opts","strict","encodeURIComponent","exports","extract","str","split","parse","formatter","result","arrayFormat","key","accumulator","exec","replace","undefined","concat","parserForArrayFormat","ret","Object","create","trim","forEach","param","parts","shift","val","length","join","decodeURIComponent","keys","sort","reduce","Boolean","Array","isArray","keysSorter","input","a","b","Number","map","stringify","obj","index","encoderForArrayFormat","slice","val2","push","filter","x","module","c","charCodeAt","toString","toUpperCase","arrayWithHoles","iterableToArrayLimit","nonIterableRest","arr","i","Symbol","iterator","prototype","call","_arr","_n","_d","_e","_s","_i","next","done","err","TypeError","toggleErrorAlert","type","types","OPEN_ERROR_ALERT","setHistory","history","systemIds","baselineIds","hspIds","referenceId","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","item","onBulkSelect","ids","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","historicalProfiles","loading","Fragment","Modal","className","isOpen","onClose","isFooterLeftAligned","actions","Button","variant","onClick","isDisabled","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","BaselinesTable","tableId","hasMultiSelect","tableData","Component","propTypes","showModal","PropTypes","bool","number","func","object","array","baselines","string","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","toggleAddSystemModal","newActiveTab","baselinesTableActions","AddSystemButton","isTable","StateIcon","factState","color","height","width","icon","ReferenceSelector","isReference","updateReferenceId","DriftTable","shiftReferenceToFront","masterList","systemToMove","findIndex","splice","unshift","fetchCompare","HSPIds","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","removeSystem","formatDate","fullHistoricalSystemList","historicalGroups","hsp","hasOwnProperty","system_id","hsps","find","indexOf","entries","location","setSelectedBaselines","selectHistoricProfiles","dateString","moment","utc","format","profile","setSelectedHistoricProfiles","facts","rows","fact","renderRow","rowData","size","SkeletonSize","md","row","sys","comparisons","expandedRows","includes","name","renderExpandableRowButton","comparison","renderRowChild","findSystem","typeIcon","header-id","display_name","system_profile_exists","Tooltip","position","content","last_updated","updated","HistoricalProfilesDropdown","dropdownDirection","DropdownDirection","down","hasCompareButton","ASC","DESC","sortType","toggleFactSort","toggleStateSort","stateSort","toggleSort","factSort","renderSortButton","renderSystemHeaders","factName","expandRow","compareData","renderHeaderRow","renderLoadingRows","renderRows","emptyState","filteredCompareData","formatEntities","EmptyStateDisplay","PlusCircleIcon","text","button","renderTable","fullCompareData","withRouter","compareActions","historicProfileIds","historicProfilesActions","HPIds","toggleFilterDropDown","OPEN_FILTER_DROPDOWN","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","Checkbox","display","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","changeFactFilter","factFilter","prevProps","TextInput","placeholder","aria-label","filterByFact","ErrorAlert","confirmDriftModal","revertCompareData","previousStateSystems","confirmBaselineModal","revertBaselineFetch","errorAlertOpened","error","baselineError","Alert","action","AlertActionCloseButton","status","detail","errorAlertActions","ExportCSVButton","exportToCSV","DriftFilterChips","setStateChips","stateChips","removeChip","chip","checkChips","chipGroup","setIsEmpty","isEmpty","group","chips","category","newChipGroup","newStateChips","newFactChips","filteredChips","chipKeyCount","ChipGroup","withToolbar","currentGroup","ChipGroupToolbarItem","categoryName","Chip","DriftPage","clearFilters","clearComparisonFilters","clearComparison","clearSelectedBaselines","actionKebabItems","DropdownItem","component","updatePagination","page","perPage","totalFacts","Card","CardBody","Toolbar","ToolbarGroup","ToolbarItem","ActionKebab","total","isCompact","pagination"],"mappings":"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","file":"js/4-de1f97e78337e06a2b3d.js","sourcesContent":["'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\treturn str.split('?')[1] || '';\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\tformatter(decodeURIComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","import types from './types';\n\nfunction toggleErrorAlert() {\n    return {\n        type: types.OPEN_ERROR_ALERT\n    };\n}\n\nexport default {\n    toggleErrorAlert\n};\n","import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleModal();\n    }\n\n    cancelSelection() {\n        this.props.toggleModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, historicalProfiles, loading,\n            entities, selectedBaselineIds, selectedHSPIds } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"add-system-modal\"\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    isFooterLeftAligned\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={\n                                (entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0\n                            }\n                        >\n                            Submit\n                        </Button>\n                    ] }\n                >\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                className=\"add-system-button\"\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.factState === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='20px' width='20px'/>;\n        } else if (this.props.factState === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='20px' width='20px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='20px' width='20px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        return (\n            this.icon()\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    factState: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    render() {\n        const { updateReferenceId, id } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId(id) }\n                />\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DropdownDirection, Tooltip } from '@patternfly/react-core';\nimport queryString from 'query-string';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, PlusCircleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { AngleDownIcon, AngleRightIcon, LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport { ASC, DESC } from '../../../constants';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport HistoricalProfilesDropdown from '../../HistoricalProfilesDropdown/HistoricalProfilesDropdown';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesDropdown/redux';\nimport ReferenceSelector from './ReferenceSelector/ReferenceSelector';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        const { fetchCompare } = this.props;\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (historicalGroups.hasOwnProperty(hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        this.props.updateReferenceId(queryString.parse(this.props.location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    formatDate(dateString) {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    async removeSystem(item) {\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n\n            this.HSPIds = this.props.historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === this.props.referenceId) {\n            await this.props.updateReferenceId();\n        }\n\n        this.props.setSelectedHistoricProfiles(this.HSPIds);\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, referenceId);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        this.props.updateReferenceId(referenceId);\n        this.props.fetchCompare(systemIds, baselineIds, HSPIds, referenceId);\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system.state === 'DIFFERENT') {\n                    className.push('highlight');\n                    className.push('different-fact-cell');\n                }\n            } else {\n                if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>{ system.value === null ? 'No Data' : system.value }</td>);\n        });\n\n        return row;\n    }\n\n    renderRow(fact) {\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                <td className={\n                    this.props.expandedRows.includes(fact.name) ?\n                        'nested-fact sticky-column fixed-column-1' :\n                        'sticky-column fixed-column-1' }>\n                    { this.renderExpandableRowButton(this.props.expandedRows, fact.name) } { fact.name }\n                </td>\n            );\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr>{ row }</tr>);\n\n            if (this.props.expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        let row = [];\n\n        row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n            <p className=\"child-row\">{ fact.name }</p>\n        </td>);\n        row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon factState={ fact.state }/></td>);\n\n        row = row.concat(this.findSystem(fact));\n\n        return row;\n    }\n\n    renderSystemHeaders() {\n        let row = [];\n        let typeIcon = '';\n        let referenceId = this.props.referenceId;\n        let updateReferenceId = this.updateReferenceId;\n\n        this.masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <ServerIcon/>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <BlueprintIcon/>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <ClockIcon />;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={\n                        item.id === referenceId\n                            ? 'drift-header reference-header'\n                            : `drift-header ${item.type}-header`\n                    }\n                >\n                    <div>\n                        <a onClick={ () => this.removeSystem(item) } className=\"remove-system-icon\">\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                id={ item.id }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={\n                                        <div>System profile does not exist. Please run insights-client on system to upload archive.</div>\n                                    }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesDropdown\n                                    system={ item }\n                                    systemIds={ this.systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ this.fetchCompare }\n                                    dropdownDirection={ DropdownDirection.down }\n                                    hasCompareButton={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        if (sortType === 'fact') {\n            this.props.toggleFactSort(sort);\n        } else {\n            this.props.toggleStateSort(sort);\n        }\n    }\n\n    renderHeaderRow() {\n        const { stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\">\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    onClick={ () => this.toggleSort('fact', this.props.factSort) }\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(this.props.factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    onClick={ () => this.toggleSort('state', this.props.stateSort) }\n                >\n                    { stateSort !== '' ?\n                        <div className=\"active-blue\">State { this.renderSortButton(this.props.stateSort) }</div> :\n                        <div>State { this.renderSortButton(this.props.stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    renderExpandableRowButton(expandedRows, factName) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"carat-margin pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"carat-margin pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table className=\"pf-c-table pf-m-compact drift-table\">\n                        <thead>\n                            { this.renderHeaderRow() }\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading } = this.props;\n        const { emptyStateMessage } = this.state;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                />\n                { emptyState && !loading\n                    ? <EmptyStateDisplay\n                        icon={ PlusCircleIcon }\n                        title={ 'Add systems or baselines to compare' }\n                        text={ emptyStateMessage }\n                        button={ <AddSystemButton isTable={ false }/> }\n                    />\n                    : this.renderTable(filteredCompareData, loading)\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedHistoricProfiles: (HPIds) => dispatch(historicProfilesActions.setSelectedHistoricProfiles(HPIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    setSelectedHistoricProfiles: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem = <Checkbox\n            className=\"state-filter-checkbox\"\n            id={ stateFilter.display }\n            label={ stateFilter.display }\n            isChecked={ stateFilter.selected }\n            onChange={ () =>\n                this.props.addStateFilter(stateFilter)\n            } />;\n\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    className=\"state-filter-dropdown\"\n                    onSelect={ this.onToggle }\n                    toggle={ <DropdownToggle onToggle={ this.onToggle }>\n                        View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { compareActions } from '../../modules';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.changeFactFilter(filter);\n    }, 250);\n\n    render() {\n        return (\n            <React.Fragment>\n                <TextInput\n                    value={ this.state.filter }\n                    id=\"filterByFact\"\n                    placeholder=\"Filter by fact\"\n                    onChange={ this.updateFactFilter }\n                    aria-label=\"filter by fact\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    changeFactFilter: PropTypes.func,\n    factFilter: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        changeFactFilter: (factFilter) => dispatch(compareActions.filterByFact(factFilter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(SearchBar));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { compareActions } from '../modules';\nimport { errorAlertActions } from './redux';\nimport { setHistory } from '../../Utilities/SetHistory';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nclass ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    confirmDriftModal = () => {\n        const { toggleModal, revertCompareData, history, previousStateSystems } = this.props;\n\n        toggleModal();\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    confirmBaselineModal = () => {\n        const { toggleModal, revertBaselineFetch, tableId } = this.props;\n\n        toggleModal();\n        revertBaselineFetch(tableId);\n    }\n\n    render() {\n        const { errorAlertOpened, error, baselineError } = this.props;\n\n        return (\n            <React.Fragment>\n                { errorAlertOpened && (\n                    <Alert\n                        variant=\"danger\"\n                        title=\"Error\"\n                        action={\n                            <AlertActionCloseButton\n                                onClose={ () =>\n                                    error.status ? this.confirmDriftModal() : this.confirmBaselineModal()\n                                }\n                            />\n                        }\n                    >\n                        Status Code: { error.status ? error.status : baselineError.status }<br></br>\n                        { error.detail ? error.detail : baselineError.detail }\n                    </Alert>\n                ) }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    confirmModal: PropTypes.func,\n    errorAlertOpened: PropTypes.bool,\n    error: PropTypes.object,\n    baselineError: PropTypes.object,\n    toggleModal: PropTypes.func,\n    history: PropTypes.object,\n    fullCompareData: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    revertBaselineFetch: PropTypes.func,\n    tableId: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        fullCompareData: state.compareState.fullCompareData,\n        previousStateSystems: state.compareState.previousStateSystems,\n        errorAlertOpened: state.errorAlertOpened,\n        error: state.compareState.error,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleModal: () => dispatch(errorAlertActions.toggleErrorAlert()),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId))\n    };\n}\n\nexport default withRouter (connect(mapStateToProps, mapDispatchToProps)(ErrorAlert));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { ExportIcon } from '@patternfly/react-icons';\nimport { compareActions } from '../../modules';\n\nclass ExportCSVButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { exportToCSV } = this.props;\n\n        return (\n            <ExportIcon className='pointer not-active export-button-margin' onClick={ exportToCSV } />\n        );\n    }\n}\n\nExportCSVButton.propTypes = {\n    exportToCSV: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: () => dispatch(compareActions.exportToCSV())\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ExportCSVButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\n\nimport { compareActions } from '../../modules';\n\nexport class DriftFilterChips extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chipGroup: [\n                { category: 'State', chips: this.setStateChips(this.props.stateFilters) },\n                { category: 'Fact name', chips:\n                    this.props.factFilter !== ''\n                        ? [ this.props.factFilter ]\n                        : []\n                }\n            ]\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { stateFilters, factFilter } = this.props;\n        const { chipGroup } = this.state;\n        let newStateChips = chipGroup[0];\n        let newFactChips = chipGroup[1];\n        let newChipGroup;\n\n        if (prevProps !== this.props) {\n            if (stateFilters !== prevProps.stateFilters) {\n                let filteredChips = [];\n\n                stateFilters.forEach(function(filter) {\n                    if (filter.selected) {\n                        filteredChips.push(filter.display);\n                    }\n                });\n\n                newStateChips = { category: 'State', chips: filteredChips };\n            }\n\n            if (factFilter !== prevProps.factFilter) {\n                newFactChips = { category: 'Fact name', chips:\n                    factFilter !== ''\n                        ? [ factFilter ]\n                        : []\n                };\n            }\n\n            newChipGroup = [ newStateChips, newFactChips ];\n            this.setState({ chipGroup: newChipGroup });\n        }\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    removeChip = (chip) => {\n        const { stateFilters, addStateFilter, filterByFact } = this.props;\n\n        if (chip === 'Same' || chip === 'Different' || chip === 'Incomplete data') {\n            stateFilters.forEach(function(stateFilter) {\n                if (stateFilter.display === chip) {\n                    addStateFilter(stateFilter);\n                }\n            });\n        } else {\n            filterByFact('');\n        }\n    }\n\n    checkChips = () => {\n        const { chipGroup } = this.state;\n        const { setIsEmpty } = this.props;\n        let isEmpty = true;\n\n        chipGroup.forEach(function(group) {\n            if (group.chips.length > 0) {\n                isEmpty = false;\n            }\n        });\n\n        setIsEmpty(isEmpty);\n    }\n\n    render() {\n        const { chipGroup } = this.state;\n        let chipKeyCount = 0;\n\n        this.checkChips();\n\n        return (\n            <ChipGroup withToolbar>\n                { chipGroup.map(currentGroup => (\n                    <ChipGroupToolbarItem key={ currentGroup.category } categoryName={ currentGroup.category }>\n                        { currentGroup.chips.map(chip => (\n                            <Chip key={ currentGroup.category + chipKeyCount++ } onClick={ () => this.removeChip(chip) }>\n                                { chip }\n                            </Chip>\n                        )) }\n                    </ChipGroupToolbarItem>\n                )) }\n            </ChipGroup>\n        );\n    }\n}\n\nDriftFilterChips.propTypes = {\n    factFilter: PropTypes.string,\n    stateFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    addStateFilter: PropTypes.func,\n    setIsEmpty: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftFilterChips);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, DropdownItem, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { errorAlertActions } from '../ErrorAlert/redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesDropdown/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport FilterDropDown from './FilterDropDown/FilterDropDown';\nimport SearchBar from './SearchBar/SearchBar';\nimport ActionKebab from './ActionKebab/ActionKebab';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport ExportCSVButton from './ExportCSVButton/ExportCSVButton';\nimport DriftFilterChips from './DriftFilterChips/DriftFilterChips';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem key=\"remove-systems\" component=\"button\" onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            isEmpty: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, selectHistoricProfiles, selectedHSPIds, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        selectHistoricProfiles(selectedHSPIds);\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    render() {\n        const { loading, emptyState, updatePagination, updateReferenceId, page, perPage, totalFacts } = this.props;\n        const { actionKebabItems, isEmpty } = this.state;\n\n        if (this.props.error.detail) {\n            this.props.toggleErrorAlert();\n        }\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <ErrorAlert />\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            <div>\n                                { !emptyState ?\n                                    <React.Fragment>\n                                        <Toolbar className=\"drift-toolbar\">\n                                            <ToolbarGroup>\n                                                <ToolbarItem>\n                                                    <SearchBar />\n                                                </ToolbarItem>\n                                                <ToolbarItem>\n                                                    <FilterDropDown />\n                                                </ToolbarItem>\n                                                <ToolbarItem>\n                                                    <AddSystemButton loading={ loading } />\n                                                </ToolbarItem>\n                                                <ToolbarItem>\n                                                    <ExportCSVButton />\n                                                </ToolbarItem>\n                                                <ToolbarItem>\n                                                    <ActionKebab dropdownItems={ actionKebabItems } />\n                                                </ToolbarItem>\n                                            </ToolbarGroup>\n                                            <ToolbarGroup className=\"pf-c-pagination\">\n                                                <ToolbarItem>\n                                                    <TablePagination\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        total={ totalFacts }\n                                                        isCompact={ true }\n                                                        updatePagination={ updatePagination }\n                                                    />\n                                                </ToolbarItem>\n                                            </ToolbarGroup>\n                                        </Toolbar>\n                                        <Toolbar className=\"drift-toolbar\">\n                                            <ToolbarGroup>\n                                                <ToolbarItem>\n                                                    <DriftFilterChips setIsEmpty={ this.setIsEmpty } />\n                                                </ToolbarItem>\n                                                { !isEmpty\n                                                    ? <ToolbarItem>\n                                                        <a onClick={ () => this.clearFilters() } >\n                                                            Clear filters\n                                                        </a>\n                                                    </ToolbarItem>\n                                                    : null\n                                                }\n                                            </ToolbarGroup>\n                                        </Toolbar>\n                                    </React.Fragment>\n                                    : null\n                                }\n                                <DriftTable\n                                    updateReferenceId={ updateReferenceId }\n                                />\n                                { !emptyState && !loading ?\n                                    <Toolbar className=\"drift-toolbar\">\n                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                            <ToolbarItem>\n                                                <TablePagination\n                                                    page={ page }\n                                                    perPage={ perPage }\n                                                    total={ totalFacts }\n                                                    isCompact={ false }\n                                                    updatePagination={ updatePagination }\n                                                />\n                                            </ToolbarItem>\n                                        </ToolbarGroup>\n                                    </Toolbar>\n                                    : null\n                                }\n                            </div>\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    toggleErrorAlert: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleErrorAlert: () => dispatch(errorAlertActions.toggleErrorAlert()),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}