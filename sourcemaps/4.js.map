{"version":3,"sources":["webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./src/SmartComponents/ErrorAlert/redux/actions.js","webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js","webpack:///./src/SmartComponents/DriftPage/ExportCSVButton/ExportCSVButton.js","webpack:///./src/SmartComponents/DriftPage/DriftFilterChips/DriftFilterChips.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["strictUriEncode","objectAssign","encode","value","opts","strict","encodeURIComponent","exports","extract","str","split","parse","formatter","result","arrayFormat","key","accumulator","exec","replace","undefined","concat","parserForArrayFormat","ret","Object","create","trim","forEach","param","parts","shift","val","length","join","decodeURIComponent","keys","sort","reduce","Boolean","Array","isArray","keysSorter","input","a","b","Number","map","stringify","obj","index","encoderForArrayFormat","slice","val2","push","filter","x","module","c","charCodeAt","toString","toUpperCase","toggleErrorAlert","type","types","OPEN_ERROR_ALERT","setHistory","history","systemIds","baselineIds","hspIds","referenceId","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","item","onBulkSelect","ids","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","historicalProfiles","loading","page","perPage","totalBaselines","updatePagination","Fragment","Modal","width","isOpen","onClose","actions","Button","variant","onClick","isDisabled","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","BaselinesTable","tableId","hasMultiSelect","tableData","Component","propTypes","showModal","PropTypes","bool","number","func","object","array","baselines","string","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","toggleAddSystemModal","newActiveTab","baselinesTableActions","pagination","AddSystemButton","isTable","className","StateIcon","factState","color","height","icon","ReferenceSelector","isReference","updateReferenceId","DriftTable","shiftReferenceToFront","masterList","systemToMove","findIndex","splice","unshift","fetchCompare","HSPIds","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","removeSystem","formatDate","fullHistoricalSystemList","historicalGroups","hsp","hasOwnProperty","system_id","hsps","find","indexOf","entries","location","setSelectedBaselines","selectHistoricProfiles","dateString","moment","utc","format","profile","setSelectedHistoricProfiles","facts","rows","fact","renderRow","rowData","i","size","SkeletonSize","md","row","sys","comparisons","expandedRows","includes","name","renderExpandableRowButton","comparison","renderRowChild","findSystem","typeIcon","header-id","display_name","system_profile_exists","Tooltip","position","content","last_updated","updated","HistoricalProfilesDropdown","dropdownDirection","DropdownDirection","down","hasCompareButton","ASC","DESC","sortType","toggleFactSort","toggleStateSort","stateSort","toggleSort","factSort","renderSortButton","renderSystemHeaders","factName","expandRow","compareData","renderHeaderRow","renderLoadingRows","renderRows","emptyState","filteredCompareData","formatEntities","EmptyStateDisplay","PlusCircleIcon","text","button","renderTable","fullCompareData","withRouter","compareActions","historicProfileIds","historicProfilesActions","HPIds","toggleFilterDropDown","OPEN_FILTER_DROPDOWN","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","Checkbox","display","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","changeFactFilter","factFilter","prevProps","TextInput","placeholder","aria-label","filterByFact","ErrorAlert","confirmDriftModal","revertCompareData","previousStateSystems","confirmBaselineModal","revertBaselineFetch","errorAlertOpened","error","baselineError","Alert","action","AlertActionCloseButton","status","detail","errorAlertActions","ExportCSVButton","exportToCSV","DriftFilterChips","setStateChips","stateChips","removeChip","chip","checkChips","chipGroup","setIsEmpty","isEmpty","group","chips","category","newChipGroup","newStateChips","newFactChips","filteredChips","chipKeyCount","ChipGroup","categoryName","Chip","DriftPage","clearFilters","clearComparisonFilters","clearComparison","clearSelectedBaselines","actionKebabItems","DropdownItem","component","totalFacts","Card","CardBody","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","top","bottom"],"mappings":"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","file":"js/4-c3d09ac26c6d4ce52bad.js","sourcesContent":["'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\treturn str.split('?')[1] || '';\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\tformatter(decodeURIComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","import types from './types';\n\nfunction toggleErrorAlert() {\n    return {\n        type: types.OPEN_ERROR_ALERT\n    };\n}\n\nexport default {\n    toggleErrorAlert\n};\n","import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleModal();\n    }\n\n    cancelSelection() {\n        this.props.toggleModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, historicalProfiles, loading,\n            entities, selectedBaselineIds, selectedHSPIds, page, perPage, totalBaselines, updatePagination } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={\n                                (entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0\n                            }\n                        >\n                            Submit\n                        </Button>\n                    ] }\n                >\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                page={ page }\n                                perPage={ perPage }\n                                totalBaselines={ totalBaselines }\n                                updatePagination={ updatePagination }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        page: state.baselinesTableState.checkboxTable.page,\n        perPage: state.baselinesTableState.checkboxTable.perPage,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        updatePagination: (pagination, tableId) => dispatch(baselinesTableActions.updatePagination(pagination, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                className=\"add-system-button\"\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.factState === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='20px' width='20px'/>;\n        } else if (this.props.factState === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='20px' width='20px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='20px' width='20px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        return (\n            this.icon()\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    factState: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    render() {\n        const { updateReferenceId, id } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId(id) }\n                />\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DropdownDirection, Tooltip } from '@patternfly/react-core';\nimport queryString from 'query-string';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, PlusCircleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { AngleDownIcon, AngleRightIcon, LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport { ASC, DESC } from '../../../constants';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport HistoricalProfilesDropdown from '../../HistoricalProfilesDropdown/HistoricalProfilesDropdown';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesDropdown/redux';\nimport ReferenceSelector from './ReferenceSelector/ReferenceSelector';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        const { fetchCompare } = this.props;\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (historicalGroups.hasOwnProperty(hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        this.props.updateReferenceId(queryString.parse(this.props.location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    formatDate(dateString) {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    async removeSystem(item) {\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n\n            this.HSPIds = this.props.historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === this.props.referenceId) {\n            await this.props.updateReferenceId();\n        }\n\n        this.props.setSelectedHistoricProfiles(this.HSPIds);\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, referenceId);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        this.props.updateReferenceId(referenceId);\n        this.props.fetchCompare(systemIds, baselineIds, HSPIds, referenceId);\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system.state === 'DIFFERENT') {\n                    className.push('highlight');\n                    className.push('different-fact-cell');\n                }\n            } else {\n                if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>{ system.value === null ? 'No Data' : system.value }</td>);\n        });\n\n        return row;\n    }\n\n    renderRow(fact) {\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                <td className={\n                    this.props.expandedRows.includes(fact.name) ?\n                        'nested-fact sticky-column fixed-column-1' :\n                        'sticky-column fixed-column-1' }>\n                    { this.renderExpandableRowButton(this.props.expandedRows, fact.name) } { fact.name }\n                </td>\n            );\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr>{ row }</tr>);\n\n            if (this.props.expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        let row = [];\n\n        row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n            <p className=\"child-row\">{ fact.name }</p>\n        </td>);\n        row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon factState={ fact.state }/></td>);\n\n        row = row.concat(this.findSystem(fact));\n\n        return row;\n    }\n\n    renderSystemHeaders() {\n        let row = [];\n        let typeIcon = '';\n        let referenceId = this.props.referenceId;\n        let updateReferenceId = this.updateReferenceId;\n\n        this.masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <ServerIcon/>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <BlueprintIcon/>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <ClockIcon />;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={\n                        item.id === referenceId\n                            ? 'drift-header reference-header'\n                            : `drift-header ${item.type}-header`\n                    }\n                >\n                    <div>\n                        <a onClick={ () => this.removeSystem(item) } className=\"remove-system-icon\">\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                id={ item.id }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={\n                                        <div>System profile does not exist. Please run insights-client on system to upload archive.</div>\n                                    }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesDropdown\n                                    system={ item }\n                                    systemIds={ this.systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ this.fetchCompare }\n                                    dropdownDirection={ DropdownDirection.down }\n                                    hasCompareButton={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        if (sortType === 'fact') {\n            this.props.toggleFactSort(sort);\n        } else {\n            this.props.toggleStateSort(sort);\n        }\n    }\n\n    renderHeaderRow() {\n        const { stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\">\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    onClick={ () => this.toggleSort('fact', this.props.factSort) }\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(this.props.factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    onClick={ () => this.toggleSort('state', this.props.stateSort) }\n                >\n                    { stateSort !== '' ?\n                        <div className=\"active-blue\">State { this.renderSortButton(this.props.stateSort) }</div> :\n                        <div>State { this.renderSortButton(this.props.stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    renderExpandableRowButton(expandedRows, factName) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"carat-margin pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"carat-margin pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table className=\"pf-c-table pf-m-compact drift-table\">\n                        <thead>\n                            { this.renderHeaderRow() }\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading } = this.props;\n        const { emptyStateMessage } = this.state;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                />\n                { emptyState && !loading\n                    ? <EmptyStateDisplay\n                        icon={ PlusCircleIcon }\n                        title={ 'Add systems or baselines to compare' }\n                        text={ emptyStateMessage }\n                        button={ <AddSystemButton isTable={ false }/> }\n                    />\n                    : this.renderTable(filteredCompareData, loading)\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedHistoricProfiles: (HPIds) => dispatch(historicProfilesActions.setSelectedHistoricProfiles(HPIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    setSelectedHistoricProfiles: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem = <Checkbox\n            className=\"state-filter-checkbox\"\n            id={ stateFilter.display }\n            label={ stateFilter.display }\n            isChecked={ stateFilter.selected }\n            onChange={ () =>\n                this.props.addStateFilter(stateFilter)\n            } />;\n\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    className=\"state-filter-dropdown\"\n                    onSelect={ this.onToggle }\n                    toggle={ <DropdownToggle onToggle={ this.onToggle }>\n                        View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { compareActions } from '../../modules';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.changeFactFilter(filter);\n    }, 250);\n\n    render() {\n        return (\n            <React.Fragment>\n                <TextInput\n                    value={ this.state.filter }\n                    id=\"filterByFact\"\n                    placeholder=\"Filter by fact\"\n                    onChange={ this.updateFactFilter }\n                    aria-label=\"filter by fact\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    changeFactFilter: PropTypes.func,\n    factFilter: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        changeFactFilter: (factFilter) => dispatch(compareActions.filterByFact(factFilter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(SearchBar));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { compareActions } from '../modules';\nimport { errorAlertActions } from './redux';\nimport { setHistory } from '../../Utilities/SetHistory';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nclass ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    confirmDriftModal = () => {\n        const { toggleModal, revertCompareData, history, previousStateSystems } = this.props;\n\n        toggleModal();\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    confirmBaselineModal = () => {\n        const { toggleModal, revertBaselineFetch, tableId } = this.props;\n\n        toggleModal();\n        revertBaselineFetch(tableId);\n    }\n\n    render() {\n        const { errorAlertOpened, error, baselineError } = this.props;\n\n        return (\n            <React.Fragment>\n                { errorAlertOpened && (\n                    <Alert\n                        variant=\"danger\"\n                        title=\"Error\"\n                        action={\n                            <AlertActionCloseButton\n                                onClose={ () =>\n                                    error.status ? this.confirmDriftModal() : this.confirmBaselineModal()\n                                }\n                            />\n                        }\n                    >\n                        Status Code: { error.status ? error.status : baselineError.status }<br></br>\n                        { error.detail ? error.detail : baselineError.detail }\n                    </Alert>\n                ) }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    confirmModal: PropTypes.func,\n    errorAlertOpened: PropTypes.bool,\n    error: PropTypes.object,\n    baselineError: PropTypes.object,\n    toggleModal: PropTypes.func,\n    history: PropTypes.object,\n    fullCompareData: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    revertBaselineFetch: PropTypes.func,\n    tableId: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        fullCompareData: state.compareState.fullCompareData,\n        previousStateSystems: state.compareState.previousStateSystems,\n        errorAlertOpened: state.errorAlertOpened,\n        error: state.compareState.error,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleModal: () => dispatch(errorAlertActions.toggleErrorAlert()),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId))\n    };\n}\n\nexport default withRouter (connect(mapStateToProps, mapDispatchToProps)(ErrorAlert));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { ExportIcon } from '@patternfly/react-icons';\nimport { compareActions } from '../../modules';\n\nclass ExportCSVButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { exportToCSV } = this.props;\n\n        return (\n            <ExportIcon className='pointer not-active export-button-margin' onClick={ exportToCSV } />\n        );\n    }\n}\n\nExportCSVButton.propTypes = {\n    exportToCSV: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: () => dispatch(compareActions.exportToCSV())\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ExportCSVButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Chip, ChipGroup } from '@patternfly/react-core';\n\nimport { compareActions } from '../../modules';\n\nexport class DriftFilterChips extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chipGroup: [\n                { category: 'State', chips: this.setStateChips(this.props.stateFilters) },\n                { category: 'Fact name', chips:\n                    this.props.factFilter !== ''\n                        ? [ this.props.factFilter ]\n                        : []\n                }\n            ]\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { stateFilters, factFilter } = this.props;\n        const { chipGroup } = this.state;\n        let newStateChips = chipGroup[0];\n        let newFactChips = chipGroup[1];\n        let newChipGroup;\n\n        if (prevProps !== this.props) {\n            if (stateFilters !== prevProps.stateFilters) {\n                let filteredChips = [];\n\n                stateFilters.forEach(function(filter) {\n                    if (filter.selected) {\n                        filteredChips.push(filter.display);\n                    }\n                });\n\n                newStateChips = { category: 'State', chips: filteredChips };\n            }\n\n            if (factFilter !== prevProps.factFilter) {\n                newFactChips = { category: 'Fact name', chips:\n                    factFilter !== ''\n                        ? [ factFilter ]\n                        : []\n                };\n            }\n\n            newChipGroup = [ newStateChips, newFactChips ];\n            this.setState({ chipGroup: newChipGroup });\n        }\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    removeChip = (chip) => {\n        const { stateFilters, addStateFilter, filterByFact } = this.props;\n\n        if (chip === 'Same' || chip === 'Different' || chip === 'Incomplete data') {\n            stateFilters.forEach(function(stateFilter) {\n                if (stateFilter.display === chip) {\n                    addStateFilter(stateFilter);\n                }\n            });\n        } else {\n            filterByFact('');\n        }\n    }\n\n    checkChips = () => {\n        const { chipGroup } = this.state;\n        const { setIsEmpty } = this.props;\n        let isEmpty = true;\n\n        chipGroup.forEach(function(group) {\n            if (group.chips.length > 0) {\n                isEmpty = false;\n            }\n        });\n\n        setIsEmpty(isEmpty);\n    }\n\n    render() {\n        const { chipGroup } = this.state;\n        let chipKeyCount = 0;\n\n        this.checkChips();\n\n        return (\n            chipGroup.map(group => (\n                <ChipGroup categoryName={ group.category } key={ group.category }>\n                    { group.chips.map(chip => (\n                        <Chip key={ group.category + chipKeyCount++ } onClick={ () => this.removeChip(chip) }>\n                            { chip }\n                        </Chip>\n                    )) }\n                </ChipGroup>\n            ))\n        );\n    }\n}\n\nDriftFilterChips.propTypes = {\n    factFilter: PropTypes.string,\n    stateFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    addStateFilter: PropTypes.func,\n    setIsEmpty: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftFilterChips);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent, PaginationVariant } from '@patternfly/react-core';\nimport { errorAlertActions } from '../ErrorAlert/redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesDropdown/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport FilterDropDown from './FilterDropDown/FilterDropDown';\nimport SearchBar from './SearchBar/SearchBar';\nimport ActionKebab from './ActionKebab/ActionKebab';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport ExportCSVButton from './ExportCSVButton/ExportCSVButton';\nimport DriftFilterChips from './DriftFilterChips/DriftFilterChips';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem key=\"remove-systems\" component=\"button\" onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            isEmpty: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, selectHistoricProfiles, selectedHSPIds, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        selectHistoricProfiles(selectedHSPIds);\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    render() {\n        const { loading, emptyState, updatePagination, updateReferenceId, page, perPage, totalFacts } = this.props;\n        const { actionKebabItems, isEmpty } = this.state;\n\n        if (this.props.error.detail) {\n            this.props.toggleErrorAlert();\n        }\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <ErrorAlert />\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            <div>\n                                { !emptyState ?\n                                    <React.Fragment>\n                                        <Toolbar className=\"drift-toolbar\">\n                                            <ToolbarContent>\n                                                <ToolbarGroup variant='filter-group'>\n                                                    <ToolbarItem>\n                                                        <SearchBar />\n                                                    </ToolbarItem>\n                                                    <ToolbarItem>\n                                                        <FilterDropDown />\n                                                    </ToolbarItem>\n                                                </ToolbarGroup>\n                                                <ToolbarGroup variant='button-group'>\n                                                    <ToolbarItem>\n                                                        <AddSystemButton loading={ loading } />\n                                                    </ToolbarItem>\n                                                </ToolbarGroup>\n                                                <ToolbarGroup variant='icon-button-group'>\n                                                    <ToolbarItem>\n                                                        <ExportCSVButton />\n                                                    </ToolbarItem>\n                                                    <ToolbarItem>\n                                                        <ActionKebab dropdownItems={ actionKebabItems } />\n                                                    </ToolbarItem>\n                                                </ToolbarGroup>\n                                                <ToolbarItem variant='pagination' align={ { default: 'alignRight' } }>\n                                                    <TablePagination\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        total={ totalFacts }\n                                                        isCompact={ true }\n                                                        updatePagination={ updatePagination }\n                                                        widgetId='drift-pagination-top'\n                                                        variant={ PaginationVariant.top }\n                                                    />\n                                                </ToolbarItem>\n                                            </ToolbarContent>\n                                        </Toolbar>\n                                        <Toolbar className=\"drift-toolbar\">\n                                            <ToolbarContent>\n                                                <ToolbarGroup>\n                                                    <ToolbarItem>\n                                                        <DriftFilterChips setIsEmpty={ this.setIsEmpty } />\n                                                    </ToolbarItem>\n                                                    { !isEmpty\n                                                        ? <ToolbarItem>\n                                                            <a onClick={ () => this.clearFilters() } >\n                                                                Clear filters\n                                                            </a>\n                                                        </ToolbarItem>\n                                                        : null\n                                                    }\n                                                </ToolbarGroup>\n                                            </ToolbarContent>\n                                        </Toolbar>\n                                    </React.Fragment>\n                                    : null\n                                }\n                                <DriftTable\n                                    updateReferenceId={ updateReferenceId }\n                                />\n                                { !emptyState && !loading ?\n                                    <Toolbar className=\"drift-toolbar\">\n                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                            <ToolbarItem>\n                                                <TablePagination\n                                                    page={ page }\n                                                    perPage={ perPage }\n                                                    total={ totalFacts }\n                                                    isCompact={ false }\n                                                    updatePagination={ updatePagination }\n                                                    widgetId='drift-pagination-bottom'\n                                                    variant={ PaginationVariant.bottom }\n                                                />\n                                            </ToolbarItem>\n                                        </ToolbarGroup>\n                                    </Toolbar>\n                                    : null\n                                }\n                            </div>\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    toggleErrorAlert: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleErrorAlert: () => dispatch(errorAlertActions.toggleErrorAlert()),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}