{"version":3,"sources":["webpack:///./node_modules/lodash/isEmpty.js","webpack:///./node_modules/lodash/_baseKeys.js","webpack:///./node_modules/lodash/_overArg.js","webpack:///./node_modules/lodash/_getTag.js","webpack:///./node_modules/lodash/isBuffer.js","webpack:///./node_modules/lodash/_isPrototype.js","webpack:///./node_modules/lodash/isTypedArray.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["baseKeys","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","Object","prototype","module","exports","value","splice","length","tag","size","key","call","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","CreateBaselineModal","props","onSelect","_","event","selectBaseline","currentTarget","id","checked","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","error","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","type","helperTextInvalid","detail","fieldId","isValid","onKeyPress","TextInput","className","placeholder","onChange","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","setState","handleChecked","this","createBaseline","selectedBaselineIds","history","entities","selectedHSPIds","newBaselineObject","display_name","baseline_facts","selectedSystemIds","inventory_uuid","hsp_uuid","push","baselineData","Radio","isChecked","name","label","baselineTableData","loading","createBaselineModalOpened","totalBaselines","BaselinesTable","tableId","tableData","SystemsTable","createBaselineModal","hasHistoricalDropdown","hasMultiSelect","historicalProfiles","Button","variant","isDisabled","onClick","Modal","width","isOpen","onClose","actions","renderActions","Component","propTypes","PropTypes","bool","object","array","number","updatePagination","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","historicProfilesState","dispatch","createBaselineModalActions","uuid","isSelected","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","rowId","map","item","onBulkSelect","ids","forEach","baseline","renderCardBody","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","EmptyStateDisplay","icon","AddCircleOIcon","text","button","CreateBaselineButton","status","undefined","ExclamationCircleIcon","color","renderTable","window","insights","chrome","auth","getUser","clearEditBaselineData","CardBody","kebab","createButton","exportButton","Card","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/4-cc88f88ee783f8a8fa65.js","sourcesContent":["var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, Radio, TextInput, Form, FormGroup } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nimport _ from 'lodash';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: '' },\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectedHSPIds } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedHSPIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = selectedHSPIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (_, event) => {\n        const { selectBaseline } = this.props;\n\n        let id = [ event.currentTarget.id ];\n        let isSelected = event.currentTarget.checked;\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, loading, createBaselineModalOpened, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable\n                selectedSystemIds={ [] }\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ this.props.historicalProfiles }\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { error } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <b>Baseline name</b>\n            <br></br>\n            <Form>\n                <FormGroup\n                    type=\"text\"\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    fieldId=\"name\"\n                    isValid={ !error.hasOwnProperty('status') }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeholder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, selectedHSPIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                ((_.isEmpty(entities.selectedSystemIds)) && (selectedHSPIds.length === 0))\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                width={ '1200px' }\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    error: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    selectedHSPIds: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        error: state.createBaselineModalState.error,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]},\n                { title: '' }\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable() {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderCardBody = () => {\n        const { emptyState, loading, baselineError, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (emptyState && !loading) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton /> }\n            />;\n        } else if (loading && baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + this.props.baselineError.status + ': ' + this.props.baselineError.detail\n                }\n                button={\n                    <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        } else {\n            return this.renderTable();\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        {\n                            this.renderCardBody()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}