{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal.js","webpack:///./src/SmartComponents/BaselinesTable/BaselineTableKebab/BaselineTableKebab.js","webpack:///./src/SmartComponents/BaselinesTable/BaselinesToolbar/BaselinesToolbar.js","webpack:///./src/SmartComponents/BaselinesTable/BaselinesTable.js","webpack:///./src/SmartComponents/DriftPage/ActionKebab/ActionKebab.js","webpack:///./src/SmartComponents/GlobalFilterAlert/GlobalFilterAlert.js","webpack:///./src/SmartComponents/Pagination/Pagination.js"],"names":["CreateBaselineButton","props","createBaseline","history","toggleCreateBaselineModal","addSystemModalOpened","toggleAddSystemModal","location","pathname","push","this","emptyState","loading","permissions","baselinesWrite","undefined","Button","id","variant","onClick","ouiaId","isDisabled","Tooltip","content","className","Component","propTypes","PropTypes","withRouter","connect","state","addSystemModalState","dispatch","createBaselineModalActions","addSystemModalActions","type","types","newBaseline","uuid","payload","api","DeleteBaselinesModal","deleteBaselines","bind","clearSelectedBaselines","deleteSelectedBaselines","selectedBaselineIds","fetchWithParams","baselineId","tableId","toggleModal","apiBody","baseline_ids","modalOpened","deleteMessage","length","Modal","ModalVariant","title","isOpen","onClose","actions","key","revertBaselineFetch","baselinesTableActions","BaselineTableKebab","fetchBaseline","baselineRowData","onKebabToggle","setState","baselineName","dropdownItems","DropdownItem","data-ouia-component-id","component","Dropdown","style","float","toggle","KebabToggle","data-ouia-component-type","onToggle","isPlain","BaselinesToolbar","dropdownOpen","buildDropdownList","isDeleteDisabled","actionKebabItems","setTextFilter","value","nameSearch","handleSearch","clearTextFilter","debounce","search","onSearch","bulkSelectItems","onBulkSelect","exportToCSV","tableData","clearFilters","createButton","exportButton","hasMultiSelect","kebab","page","perPage","totalBaselines","updatePagination","selected","filter","baseline","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","BulkSelect","count","items","checked","helpers","onSelect","baselinesRead","ToolbarFilter","chips","deleteChip","categoryName","ConditionalFilter","placeholder","onChange","event","ExportCSVButton","ActionKebab","total","isCompact","clearSort","BaselinesTable","fetchParams","fetchBaselines","baselinesReducerHelpers","orderBy","orderHow","newSearch","onSort","_event","index","direction","sortBy","toUpperCase","pagination","emptyStateMessage","window","insights","chrome","auth","getUser","basketIsVisible","table","forEach","row","link","disableSelection","columns","tableRows","SkeletonTable","rowSize","hasRadio","canSelectAll","isSelectable","emptyRow","EmptyTable","EmptyStateDisplay","text","cells","colSpan","Table","aria-label","rows","TableHeader","TableBody","icon","LockIcon","color","renderRows","selectVariant","RowSelectVariant","renderTable","params","exportData","kebabOpened","toggleKebab","GlobalFilterAlert","buildBody","globalFilterState","sidsFilter","tagsFilter","workloadsFilter","filters","Object","keys","i","tags","tagsList","tag","split","entries","toggleIsOpen","SAP","isSelected","Alert","isInline","actionClose","AlertActionCloseButton","TablePagination","onSetPage","onPerPageSelect","widgetId","Pagination","itemCount"],"mappings":"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","file":"js/852.663ad3978e52a7c332ba.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from '../CreateBaselineModal/redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    createBaseline = () => {\n        const { history, toggleCreateBaselineModal, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaselineModal();\n    }\n\n    render() {\n        const { emptyState, loading, permissions } = this.props;\n\n        return (\n            <React.Fragment>\n                { !permissions.baselinesWrite && permissions.baselinesWrite !== undefined\n                    ? <Tooltip\n                        content={ <div>You do not have permissions to perform this action</div> }\n                    >\n                        <div className={ emptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                id='create-baseline-button'\n                                variant='primary'\n                                onClick={ this.createBaseline }\n                                isDisabled\n                                ouiaId='create-baseline-button'\n                            >\n                                Create baseline\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        id='create-baseline-button'\n                        variant='primary'\n                        onClick={ this.createBaseline }\n                        ouiaId='create-baseline-button'\n                        isDisabled={ loading }>\n                        Create baseline\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaselineModal: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool,\n    loading: PropTypes.bool,\n    emptyState: PropTypes.bool,\n    permissions: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import types from './types';\nimport api from '../../../../api';\n\nfunction toggleCreateBaselineModal() {\n    return {\n        type: types.TOGGLE_CREATE_BASELINE_MODAL\n    };\n}\n\nfunction createBaseline(newBaseline, uuid = undefined) {\n    return {\n        type: types.CREATE_BASELINE,\n        payload: api.postNewBaseline(newBaseline, uuid)\n    };\n}\n\nexport default {\n    toggleCreateBaselineModal,\n    createBaseline\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nimport { baselinesTableActions } from '../../BaselinesTable/redux/index';\n\nexport class DeleteBaselinesModal extends Component {\n    constructor(props) {\n        super(props);\n        this.deleteBaselines = this.deleteBaselines.bind(this);\n    }\n\n    async deleteBaselines() {\n        const {\n            clearSelectedBaselines,\n            deleteSelectedBaselines,\n            selectedBaselineIds,\n            fetchWithParams,\n            baselineId,\n            tableId,\n            toggleModal\n        } = this.props;\n        let apiBody;\n\n        /*eslint-disable camelcase*/\n        if (baselineId) {\n            apiBody = { baseline_ids: [ baselineId ]};\n        } else {\n            apiBody = { baseline_ids: selectedBaselineIds };\n        }\n        /*eslint-enable camelcase*/\n\n        toggleModal();\n\n        try {\n            await deleteSelectedBaselines(apiBody, tableId);\n            clearSelectedBaselines(tableId);\n            fetchWithParams();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    render() {\n        const { baselineId, modalOpened, selectedBaselineIds, toggleModal } = this.props;\n        const deleteMessage = baselineId || selectedBaselineIds.length === 1 ? 'Delete baseline' : 'Delete baselines';\n\n        return (\n            <Modal\n                className=\"drift\"\n                variant={ ModalVariant.small }\n                title={ deleteMessage }\n                isOpen={ modalOpened }\n                onClose={ toggleModal }\n                actions = { [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"danger\"\n                        onClick={ this.deleteBaselines }\n                        ouiaId=\"delete\"\n                    >\n                        { deleteMessage }\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ toggleModal }\n                        ouiaId=\"cancel\"\n                    >\n                    Cancel\n                    </Button>\n                ] }\n            >\n                Deleting a baseline is permanent and cannot be undone.\n            </Modal>\n        );\n    }\n}\n\nDeleteBaselinesModal.propTypes = {\n    modalOpened: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    deleteSelectedBaselines: PropTypes.func,\n    fetchWithParams: PropTypes.func,\n    baselineId: PropTypes.string,\n    tableId: PropTypes.string,\n    toggleModal: PropTypes.func,\n    revertBaselineFetch: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        deleteSelectedBaselines: (apiBody, tableId) => dispatch(baselinesTableActions.deleteSelectedBaselines(apiBody, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(DeleteBaselinesModal);\n","\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteBaselinesModal from '../../BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal';\n\nexport class BaselineTableKebab extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            modalOpened: false\n        };\n\n        this.onKebabToggle = this.onKebabToggle.bind(this);\n\n        this.toggleModal = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened\n            });\n        };\n    }\n\n    onKebabToggle(isOpen) {\n        this.setState({\n            isOpen\n        });\n    }\n\n    fetchBaseline = () => {\n        const { baselineRowData, history } = this.props;\n\n        history.push('baselines/' + baselineRowData[0]);\n    }\n\n    render() {\n        const { isOpen, modalOpened } = this.state;\n        const { baselineRowData, fetchWithParams, tableId, baselineName } = this.props;\n        const dropdownItems = [\n            <DropdownItem\n                key=\"edit\"\n                data-ouia-component-id={ 'edit-baseline-dropdown-item-' + baselineName }\n                component=\"button\"\n                onClick={ this.fetchBaseline }>\n                Edit\n            </DropdownItem>,\n            <DropdownItem\n                key=\"delete\"\n                data-ouia-component-id={ 'delete-baseline-dropdown-item-' + baselineName }\n                component=\"button\"\n                onClick={ this.toggleModal }>\n                Delete\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened\n                    ? <DeleteBaselinesModal\n                        modalOpened={ modalOpened }\n                        baselineId={ baselineRowData[0] }\n                        tableId={ tableId }\n                        fetchWithParams={ fetchWithParams }\n                        toggleModal={ this.toggleModal }\n                    />\n                    : null\n                }\n                <Dropdown\n                    style={{ float: 'right' }}\n                    className={ 'baseline-table-kebab' }\n                    ouiaId={ 'baseline-kebab-dropdown-' + baselineName }\n                    toggle={ <KebabToggle\n                        data-ouia-component-id={ 'baseline-kebab-dropdown-toggle-' + baselineName }\n                        data-ouia-component-type='PF4/DropdownToggle'\n                        onToggle={ (isOpen) => this.onKebabToggle(isOpen) } /> }\n                    isOpen={ isOpen }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nBaselineTableKebab.propTypes = {\n    baselineRowData: PropTypes.array,\n    history: PropTypes.object,\n    tableId: PropTypes.string,\n    fetchWithParams: PropTypes.func,\n    baselineName: PropTypes.string\n};\n\nexport default withRouter(BaselineTableKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nimport { DropdownItem, Toolbar, ToolbarFilter, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect, ConditionalFilter } from '@redhat-cloud-services/frontend-components';\n\nimport CreateBaselineButton from '../../BaselinesPage/CreateBaselineButton/CreateBaselineButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport ActionKebab from '../../DriftPage/ActionKebab/ActionKebab';\nimport DeleteBaselinesModal from '../../BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal';\nimport helpers from '../../helpers';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class BaselinesToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameSearch: '',\n            modalOpened: false,\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    ouiaId: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    ouiaId: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-baselines'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n\n        this.handleSearch = this.handleSearch.bind(this);\n        this.clearFilters = this.clearFilters.bind(this);\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    async clearFilters() {\n        const { onSearch } = this.props;\n\n        this.setState({\n            nameSearch: ''\n        });\n\n        onSearch('');\n    }\n\n    buildDropdownList = () => {\n        const { isDeleteDisabled } = this.props;\n        let actionKebabItems = [];\n\n        actionKebabItems.push(<DropdownItem\n            key=\"multi-delete\"\n            data-ouia-component-id='delete-baselines-dropdown-item'\n            component=\"button\"\n            onClick={ this.toggleModal }\n            isDisabled={ isDeleteDisabled }\n        >\n            Delete baselines\n        </DropdownItem>);\n\n        return actionKebabItems;\n    }\n\n    toggleModal = () => {\n        const { modalOpened } = this.state;\n\n        this.setState({\n            modalOpened: !modalOpened\n        });\n    }\n\n    setTextFilter = (value) => {\n        this.setState({ nameSearch: value });\n        this.handleSearch(value);\n    }\n\n    clearTextFilter = () => {\n        this.setState({ nameSearch: '' });\n        this.handleSearch('');\n    }\n\n    handleSearch = debounce(function(search) {\n        this.props.onSearch(search);\n    }, 250)\n\n    render() {\n        const { createButton, exportButton, fetchWithParams, hasMultiSelect, kebab, loading, onBulkSelect,\n            tableData, tableId, page, permissions, perPage, selectedBaselineIds, totalBaselines, updatePagination } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen, modalOpened, nameSearch } = this.state;\n        let selected = tableData.filter(baseline => baseline.selected === true).length;\n\n        return (\n            <React.Fragment>\n                <DeleteBaselinesModal\n                    modalOpened={ modalOpened }\n                    tableId={ tableId }\n                    fetchWithParams={ fetchWithParams }\n                    toggleModal={ this.toggleModal }\n                    selectedBaselineIds={ selectedBaselineIds }\n                />\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.clearFilters }>\n                    <ToolbarContent>\n                        { hasMultiSelect\n                            ? <ToolbarGroup variant='filter-group'>\n                                <ToolbarItem>\n                                    <BulkSelect\n                                        count={ selected > 0 ? selected : null }\n                                        items={ bulkSelectItems }\n                                        checked={ helpers.findCheckedValue(tableData.length, selected) }\n                                        onSelect={ () => onBulkSelect(!selected > 0) }\n                                        isDisabled={ tableData.length === 0\n                                            || (!permissions.baselinesWrite && kebab)\n                                            || (!permissions.baselinesRead && !createButton) }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarGroup>\n                            : null\n                        }\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ nameSearch !== '' ? [ nameSearch ] : [] }\n                                deleteChip={ this.clearFilters }\n                                categoryName=\"Baseline name\"\n                            >\n                                <ConditionalFilter\n                                    placeholder=\"Filter by name\"\n                                    value={ nameSearch }\n                                    data-ouia-component-type='PF4/TextInput'\n                                    data-ouia-component-id='filter-by-name-baselines-table'\n                                    onChange={ (event, value) => this.setTextFilter(value) }\n                                    isDisabled={ !permissions.baselinesRead || !permissions.baselinesWrite }\n                                />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            { createButton ?\n                                <ToolbarItem>\n                                    <CreateBaselineButton\n                                        loading={ loading }\n                                        permissions={ permissions }\n                                    />\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            { exportButton ?\n                                <ToolbarItem>\n                                    <ExportCSVButton\n                                        dropdownItems={ dropdownItems }\n                                        ouiaId='export-dropdown-baselines'\n                                        isOpen={ dropdownOpen }\n                                        onToggle={ this.onToggle }\n                                    />\n                                </ToolbarItem>\n                                : null\n                            }\n                            { kebab ?\n                                <ToolbarItem>\n                                    <ActionKebab\n                                        ouiaId='delete-baselines-dropdown'\n                                        dropdownItems={ this.buildDropdownList() } />\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                        <ToolbarItem variant=\"pagination\">\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ !permissions.baselinesRead ? 0 : totalBaselines }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                tableId={ tableId }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesToolbar.propTypes = {\n    createButton: PropTypes.bool,\n    exportButton: PropTypes.bool,\n    kebab: PropTypes.bool,\n    fetchWithParams: PropTypes.func,\n    onSearch: PropTypes.func,\n    tableId: PropTypes.string,\n    tableData: PropTypes.array,\n    onBulkSelect: PropTypes.func,\n    hasMultiSelect: PropTypes.bool,\n    clearSort: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    isDeleteDisabled: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    loading: PropTypes.bool,\n    permissions: PropTypes.object\n};\n\nexport default BaselinesToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { RowSelectVariant, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { EmptyTable, SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport BaselineTableKebab from './BaselineTableKebab/BaselineTableKebab';\nimport { baselinesTableActions } from './redux';\nimport baselinesReducerHelpers from './redux/helpers';\nimport BaselinesToolbar from './BaselinesToolbar/BaselinesToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport TablePagination from '../Pagination/Pagination';\n\nexport class BaselinesTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sortBy: {\n                index: 1,\n                direction: 'asc'\n            },\n            search: undefined,\n            orderBy: 'display_name',\n            orderHow: 'ASC',\n            page: 1,\n            perPage: 20,\n            emptyStateMessage: [\n                'This filter criteria matches no baselines.',\n                'Try changing your filter settings.'\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.fetchWithParams();\n    }\n\n    fetchWithParams = (fetchParams) => {\n        const { tableId, fetchBaselines } = this.props;\n\n        fetchParams = {\n            ...this.state,\n            ...fetchParams\n        };\n\n        baselinesReducerHelpers.fetchBaselines(tableId, fetchBaselines, fetchParams);\n    }\n\n    onSearch = (search) => {\n        const { orderBy, orderHow } = this.state;\n\n        let newSearch = search;\n        this.setState({ search });\n        this.fetchWithParams({ orderBy, orderHow, search: newSearch });\n    }\n\n    onSort = (_event, index, direction) => {\n        const { search } = this.state;\n        const { permissions } = this.props;\n        let orderBy = '';\n\n        if (index === 0) {\n            orderBy = 'display_name';\n        } else if (index === 1) {\n            orderBy = !permissions.baselinesWrite ? 'updated' : 'display_name';\n        } else if (index === 2) {\n            orderBy = 'updated';\n        }\n\n        this.setState({\n            sortBy: {\n                index,\n                direction\n            },\n            orderHow: direction.toUpperCase(),\n            orderBy\n        });\n\n        this.fetchWithParams({ orderBy, orderHow: direction.toUpperCase(), search });\n    }\n\n    updatePagination = (pagination) => {\n        this.setState({ page: pagination.page, perPage: pagination.perPage });\n        this.fetchWithParams({ page: pagination.page, perPage: pagination.perPage });\n    }\n\n    renderRows(baselinesWrite) {\n        const { basketIsVisible, hasMultiSelect, tableData, kebab, onClick, selectedBaselineIds, tableId } = this.props;\n        let table = [];\n\n        tableData.forEach((baseline) => {\n            let row = [];\n\n            if (onClick) {\n                let link = <div>\n                    <a\n                        className=\"pointer active-blue\"\n                        data-ouia-component-type='PF4/Button'\n                        data-ouia-component-id={ 'baseline-details-' + baseline[1] }\n                        onClick={ () => onClick(baseline[0]) }\n                    >\n                        { baseline[1] }\n                    </a>\n                </div>;\n                row.push(link);\n            } else {\n                row.push(baseline[1]);\n            }\n\n            row.push(baseline[2]);\n\n            if (kebab && baselinesWrite) {\n                let kebab = <BaselineTableKebab\n                    tableId={ tableId }\n                    baselineRowData={ baseline }\n                    fetchWithParams={ this.fetchWithParams }\n                    baselineName={ baseline[1] }\n                    selectedBaselineIds={ selectedBaselineIds }\n                />;\n                row.push(<div>{ kebab }</div>);\n            }\n\n            if (baseline.selected) {\n                row.selected = true;\n            }\n\n            if (hasMultiSelect) {\n                row.disableSelection = basketIsVisible;\n            }\n\n            table.push(row);\n        });\n\n        return table;\n    }\n\n    renderTable({ baselinesWrite, baselinesRead }) {\n        const { columns, createButton, hasMultiSelect, kebab, loading, onSelect, tableData, tableId } = this.props;\n        const { emptyStateMessage } = this.state;\n        let tableRows = [];\n        let table;\n\n        if (!loading) {\n            if (tableData.length === 0) {\n                let emptyRow = <EmptyTable>\n                    <EmptyStateDisplay\n                        title={ 'No matching baselines found' }\n                        text={ emptyStateMessage }\n                    />\n                </EmptyTable>;\n\n                tableRows.push({\n                    cells: [{\n                        title: emptyRow,\n                        props: { colSpan: columns.length }\n                    }]\n                });\n\n                table = <Table\n                    aria-label=\"Baselines Table\"\n                    data-ouia-component-id='baselines-table'\n                    cells={ columns }\n                    rows={ tableRows }\n                    canSelectAll={ false }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>;\n            } else {\n                if (!baselinesRead && !createButton) {\n                    return <EmptyStateDisplay\n                        icon={ LockIcon }\n                        color='#6a6e73'\n                        title={ 'You do not have access to Baselines' }\n                        text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                    />;\n                } else {\n                    tableRows = this.renderRows(baselinesWrite);\n\n                    table = <Table\n                        aria-label=\"Baselines Table\"\n                        data-ouia-component-id='baselines-table'\n                        onSort={ this.onSort }\n                        onSelect={ baselinesWrite || ((tableId === 'CHECKBOX' || tableId === 'COMPARISON') && !kebab)\n                            ? onSelect\n                            : false }\n                        sortBy={ this.state.sortBy }\n                        cells={ columns }\n                        rows={ tableRows }\n                        canSelectAll={ false }\n                        selectVariant={ !hasMultiSelect ? RowSelectVariant.radio : RowSelectVariant.checkbox }\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>;\n                }\n            }\n        } else if (loading) {\n            table = <SkeletonTable\n                columns={ columns }\n                rowSize={ 8 }\n                onSelect={ true }\n                hasRadio={ !hasMultiSelect }\n                canSelectAll={ false }\n                isSelectable={ true }\n            />;\n        }\n\n        return table;\n    }\n\n    render() {\n        const { kebab, createButton, exportToCSV, exportButton, hasMultiSelect, loading, onBulkSelect, permissions,\n            selectedBaselineIds, tableData, tableId, totalBaselines } = this.props;\n        const { page, perPage } = this.state;\n\n        return (\n            <React.Fragment>\n                <BaselinesToolbar\n                    createButton={ createButton }\n                    exportButton={ exportButton }\n                    kebab={ kebab }\n                    onSearch={ this.onSearch }\n                    tableId={ tableId }\n                    fetchWithParams={ this.fetchWithParams }\n                    tableData={ tableData }\n                    onBulkSelect={ onBulkSelect }\n                    hasMultiSelect={ hasMultiSelect }\n                    selectedBaselineIds={ selectedBaselineIds }\n                    isDeleteDisabled={ selectedBaselineIds?.length < 1 }\n                    page={ page }\n                    perPage={ perPage }\n                    totalBaselines={ totalBaselines }\n                    updatePagination={ this.updatePagination }\n                    exportToCSV={ exportToCSV }\n                    loading={ loading }\n                    permissions={ permissions }\n                />\n                { this.renderTable(permissions) }\n                <Toolbar>\n                    <ToolbarGroup className='pf-c-pagination'>\n                        <ToolbarItem>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ !permissions.baselinesRead ? 0 : totalBaselines }\n                                isCompact={ false }\n                                updatePagination={ this.updatePagination }\n                                tableId={ tableId }\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesTable.propTypes = {\n    loading: PropTypes.bool,\n    tableData: PropTypes.array,\n    fetchBaselines: PropTypes.func,\n    tableId: PropTypes.string,\n    hasMultiSelect: PropTypes.bool,\n    onClick: PropTypes.func,\n    kebab: PropTypes.bool,\n    createButton: PropTypes.bool,\n    exportButton: PropTypes.bool,\n    onSelect: PropTypes.func,\n    columns: PropTypes.array,\n    onBulkSelect: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    permissions: PropTypes.object,\n    basketIsVisible: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params)),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(baselinesTableActions.exportToCSV(exportData, baselineRowData));\n        }\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(BaselinesTable);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Dropdown, KebabToggle } from '@patternfly/react-core';\n\nclass ActionKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    render() {\n        const { dropdownItems, ouiaId } = this.props;\n        const { kebabOpened } = this.state;\n\n        return (\n            <Dropdown\n                id='action-kebab'\n                aria-label='action-kebab'\n                style={{ float: 'left' }}\n                ouiaId = { ouiaId || 'action-kebab' }\n                toggle={ <KebabToggle\n                    data-ouia-component-type='PF4/DropdownToggle'\n                    data-ouia-component-id={ ouiaId ? ouiaId + '-toggle' : 'action-kebab-toggle' }\n                    onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nActionKebab.propTypes = {\n    dropdownItems: PropTypes.array,\n    ouiaId: PropTypes.string\n};\n\nexport default ActionKebab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\n\nexport class GlobalFilterAlert extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: true\n        };\n\n        this.toggleIsOpen = () => {\n            const { isOpen } = this.state;\n\n            this.setState({\n                isOpen: !isOpen\n            });\n        };\n    }\n\n    buildBody = () => {\n        const { sidsFilter, tagsFilter, workloadsFilter } = this.props.globalFilterState;\n\n        let filters = Object.keys(workloadsFilter).length\n            ? 'Workloads: ' + Object.keys(workloadsFilter)[0] + '. '\n            : '';\n\n        if (sidsFilter.length) {\n            filters += 'SAP ID (SID): ';\n            for (let i = 0; i < sidsFilter.length; i++) {\n                filters += sidsFilter[i];\n                if (i + 1 === sidsFilter.length) {\n                    filters += '. ';\n                } else {\n                    filters += ', ';\n                }\n            }\n        }\n\n        if (tagsFilter.length) {\n            let tags = [];\n            let tagsList = {};\n            filters += 'Tags: ';\n\n            tagsFilter.forEach(function(tag) {\n                tags.push(tag.split('/'));\n            });\n\n            tags.forEach(function(tag) {\n                if (!(tag[0] in tagsList)) {\n                    tagsList[tag[0]] = [ tag[1] ];\n                } else {\n                    tagsList[tag[0]].push(tag[1]);\n                }\n            });\n\n            for (const [ key, value ] of Object.entries(tagsList)) {\n                filters += key + ': ';\n                for (let i = 0; i < value.length; i++) {\n                    filters += value[i];\n                    if (i + 1 === value.length) {\n                        filters += '. ';\n                    } else {\n                        filters += ', ';\n                    }\n                }\n            }\n        }\n\n        return filters;\n    }\n\n    render() {\n        const { sidsFilter, tagsFilter, workloadsFilter } = this.props.globalFilterState;\n        const { isOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                { isOpen && (workloadsFilter.SAP?.isSelected || sidsFilter.length > 0 || tagsFilter.length > 0)\n                    ? <Alert\n                        variant='info'\n                        title='Your systems are pre-filtered by the global context selector.'\n                        isInline\n                        actionClose={ <AlertActionCloseButton onClose={ () => this.toggleIsOpen() } /> }\n                    >\n                        <p>\n                            { this.buildBody() }\n                        </p>\n                    </Alert>\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nGlobalFilterAlert.propTypes = {\n    globalFilterState: PropTypes.object\n};\n\nexport default GlobalFilterAlert;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Pagination } from '@patternfly/react-core';\n\nexport class TablePagination extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onSetPage = this.onSetPage.bind(this);\n        this.onPerPageSelect = this.onPerPageSelect.bind(this);\n    }\n\n    onSetPage(event, page) {\n        const { tableId, updatePagination } = this.props;\n\n        const { perPage } = this.props;\n        const pagination = { page, perPage };\n        tableId\n            ? updatePagination(pagination, tableId)\n            : updatePagination(pagination);\n    }\n\n    onPerPageSelect(event, perPage) {\n        const { tableId, updatePagination } = this.props;\n\n        const page = 1;\n        const pagination = { page, perPage };\n        tableId\n            ? updatePagination(pagination, tableId)\n            : updatePagination(pagination);\n    }\n\n    render() {\n        const { total, page, perPage, isCompact, widgetId, variant, ouiaId } = this.props;\n\n        return (\n            <Pagination\n                itemCount={ total ? total : 0 }\n                widgetId={ widgetId }\n                page={ total === 0 ? 0 : page }\n                perPage={ perPage }\n                variant={ variant }\n                onSetPage={ this.onSetPage }\n                onPerPageSelect={ this.onPerPageSelect }\n                isCompact={ isCompact }\n                ouiaId={ ouiaId }\n            />\n        );\n    }\n}\n\nTablePagination.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    updatePagination: PropTypes.func,\n    total: PropTypes.number,\n    isCompact: PropTypes.bool,\n    tableId: PropTypes.string,\n    widgetId: PropTypes.string,\n    variant: PropTypes.any,\n    ouiaId: PropTypes.string\n};\n\nexport default TablePagination;\n"],"sourceRoot":""}