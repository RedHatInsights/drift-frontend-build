{"version":3,"file":"js/870.4c340127623f5bc69b51.js","mappings":"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","sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/RowFact.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTableRow/DriftTableRow.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\nimport addSystemModalHelpers from '../redux/helpers';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    async componentDidMount() {\n        addSystemModalHelpers.setContent({\n            systems: this.props.systems,\n            baselines: this.props.baselines,\n            historicalProfiles: this.props.historicalProfiles\n        }, this.props.handleSystemSelection, this.props.handleBaselineSelection, this.props.handleHSPSelection, this.props.selectedHSPContent);\n    }\n\n    toggleBasket = () => {\n        const { toggleBasketVisible } = this.props;\n\n        this.clearDeselected();\n        toggleBasketVisible();\n    }\n\n    applyChanges = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    displayBodyContent = (isEmpty) => {\n        const { entities, selectedSystemContent, selectedBaselineContent, selectedHSPContent } = this.props;\n        let bodyContent;\n\n        if (isEmpty) {\n            bodyContent = <EmptyStateDisplay\n                title='Nothing selected'\n                text={ [ 'Select systems and baselines to compare.' ] }\n            />;\n        } else {\n            bodyContent = <SelectedTable\n                selectedBaselineContent={ selectedBaselineContent }\n                entities={ entities }\n                selectedHSPContent={ selectedHSPContent }\n                findType={ this.findType }\n                handleDeselect={ this.handleDeselect }\n                selectedSystemContent={ selectedSystemContent }\n            />;\n        }\n\n        return bodyContent;\n    }\n\n    render() {\n        const { isVisible } = this.props;\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.toggleBasket() }\n                        headerContent={ <div>Selected items ({ this.findSelected() })</div> }\n                        footerContent={ <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ () => this.applyChanges() }\n                            ouiaId=\"confirm-selected-basket-button\"\n                            isDisabled={ !systemsToDeselect.length && !baselinesToDeselect.length && !hspsToDeselect.length }\n                        >\n                            Apply changes\n                        </Button> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            { this.displayBodyContent(this.findSelected() === 0) }\n                        </div> }\n                    >\n                        <a onClick={ () => this.toggleBasket() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    baselines: PropTypes.array,\n    entities: PropTypes.object,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    systems: PropTypes.array,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]},\n                { title: 'Associated systems', transforms: [ cellWidth(20) ]}\n            ],\n            basketIsVisible: false,\n            previousSelectedBaselineIds: []\n        };\n\n        this.addSystemModal = React.createRef();\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    closePopover = () => {\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(false);\n        this.setState({ basketIsVisible: false });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setState({ previousSelectedBaselineIds: this.props.selectedBaselineIds });\n        }\n    }\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal, setSelectedBaselines } = this.props;\n        const { previousSelectedBaselineIds } = this.state;\n\n        setSelectedBaselines(previousSelectedBaselineIds, 'COMPARISON');\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselines, baselineTableData, globalFilterState, handleBaselineSelection, handleHSPSelection,\n            handleSystemSelection, historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles, selectedBaselineIds,\n            selectedBaselineContent, selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent, selectedSystemIds,\n            setSelectedSystemIds, systems, totalBaselines } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className='drift'\n                    ref={ this.addSystemModal }\n                    onScroll={ basketIsVisible ? this.closePopover : null }\n                    style={{ maxHeight: '600px' }}\n                    width={ '1200px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleSystemSelection={ handleSystemSelection }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                    systems={ systems }\n                                    baselines={ baselines }\n                                    historicalProfiles={ historicalProfiles }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                                leftAlignToolbar={ true }\n                                hasSwitch={ false }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func,\n    setSelectedBaselines: PropTypes.func,\n    updateReferenceId: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled)),\n        setSelectedBaselines: (ids, tableId) => dispatch(baselinesTableActions.setSelectedBaselines(ids, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div>\n                            <span className=\"drift-header-icon\">\n                                { typeIcon }\n                            </span>\n                            <span className=\"system-name\">{ item.display_name }</span>\n                        </div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#6A6E73' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AngleDownIcon, AngleRightIcon } from '@patternfly/react-icons';\n\nfunction RowFact(props) {\n    const { expandedRows, expandRow, factName, type } = props;\n\n    const buildClassName = () => {\n        if (type === 'fact' || (type === 'category' && !expandedRows.includes(factName))) {\n            return 'sticky-column fixed-column-1';\n        } else {\n            return 'nested-fact sticky-column fixed-column';\n        }\n    };\n\n    const renderExpandableRowButton = () => {\n        if (expandedRows.includes(factName)) {\n            return <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        } else {\n            return <AngleRightIcon\n                className={ 'carat-margin pointer' + (type === 'multi fact' ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => expandRow(factName) }\n            />;\n        }\n    };\n\n    const renderFact = () => {\n        let fact;\n\n        if (type === 'category' || type === 'multi fact') {\n            let button = renderExpandableRowButton();\n            fact = <span>{ button } { factName }</span>;\n        } else if (type === 'sub fact') {\n            fact = <p className='child-row'>{ factName }</p>;\n        } else {\n            fact = factName;\n        }\n\n        return fact;\n    };\n\n    return (\n        <td className={ buildClassName() }>\n            { renderFact() }\n        </td>\n    );\n}\n\nRowFact.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    factName: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default RowFact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport StateIcon from '../../../StateIcon/StateIcon';\nimport RowFact from './RowFact';\n\nfunction DriftTableRow(props) {\n    const { expandedRows, expandRow, fact, masterList, referenceId, stateSort, type } = props;\n\n    const findSystem = (systems, id) => {\n        return systems.find(system => system.id === id);\n    };\n\n    const renderState = () => {\n        return <td className='fact-state sticky-column fixed-column-2'>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    };\n\n    const createClassname = (system) => {\n        let className = [ 'comparison-cell' ];\n\n        if (system?.is_obfuscated) {\n            className.push('obfuscated');\n        }\n\n        if (referenceId && system?.state === 'DIFFERENT') {\n            className.push('highlight');\n            className.push('different-fact-cell');\n        } else if (!referenceId && fact.state === 'DIFFERENT') {\n            className.push('highlight');\n        }\n\n        return className;\n    };\n\n    const createCells = () => {\n        let cell = [];\n        let system;\n\n        for (let i = 0; i < masterList.length; i++) {\n            if (fact.systems) {\n                system = findSystem(fact.systems, masterList[i].id);\n            }\n\n            let className = createClassname(system);\n\n            cell.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        }\n\n        return cell;\n    };\n\n    const createRow = () => {\n        let row = [];\n\n        row.push(<RowFact expandedRows={ expandedRows } expandRow={ expandRow } factName={ fact.name } type={ type } />);\n        row.push(renderState());\n\n        row = row.concat(createCells());\n        return row;\n    };\n\n    return (\n        <tr\n            data-ouia-component-type='PF4/TableRow'\n            data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n            className={ fact.state === 'DIFFERENT' || fact.state === 'INCOMPLETE_DATA_OBFUSCATED' ? 'unexpected-row' : '' }>\n            { createRow() }\n        </tr>\n    );\n}\n\nDriftTableRow.propTypes = {\n    expandedRows: PropTypes.array,\n    expandRow: PropTypes.func,\n    fact: PropTypes.object,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    stateSort: PropTypes.string,\n    type: PropTypes.string\n};\n\nexport default DriftTableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\nimport DriftTableRow from './DriftTableRow/DriftTableRow';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.topScroller = React.createRef();\n        this.bottomScroller = React.createRef();\n        this.doubleScroll = this.doubleScroll.bind(this);\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    doubleScroll() {\n        let wrapper1 = this.topScroller.current;\n        let wrapper2 = this.bottomScroller.current;\n\n        wrapper1.onscroll = function() {\n            wrapper2.scrollLeft = wrapper1.scrollLeft;\n        };\n\n        wrapper2.onscroll = function() {\n            wrapper1.scrollLeft = wrapper2.scrollLeft;\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            await this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        if (!systemIds.includes(reference) && !baselineIds.includes(reference) && !HSPIds.includes(reference)) {\n            reference = undefined;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, expandRow, referenceId, stateSort } = this.props;\n        let rows = [];\n\n        if (fact.comparisons) {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                expandRow={ expandRow }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'category' }\n            />);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    if (comparison.multivalues) {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            expandRow={ expandRow }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'multi fact' }\n                        />);\n\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                rows.push(<DriftTableRow\n                                    expandedRows={ expandedRows }\n                                    fact={ subFactItem }\n                                    masterList={ this.masterList }\n                                    referenceId={ referenceId }\n                                    stateSort={ stateSort }\n                                    type={ 'multi value' }\n                                />);\n                            });\n                        }\n                    } else {\n                        rows.push(<DriftTableRow\n                            expandedRows={ expandedRows }\n                            fact={ comparison }\n                            masterList={ this.masterList }\n                            referenceId={ referenceId }\n                            stateSort={ stateSort }\n                            type={ 'sub fact' }\n                        />);\n                    }\n                });\n            }\n        } else {\n            rows.push(<DriftTableRow\n                expandedRows={ expandedRows }\n                fact={ fact }\n                masterList={ this.masterList }\n                referenceId={ referenceId }\n                stateSort={ stateSort }\n                type={ 'fact' }\n            />);\n        }\n\n        return rows;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n        let scrollWidth = '';\n\n        if (this.bottomScroller.current) {\n            scrollWidth = this.bottomScroller.current.scrollWidth;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='second-scroll-wrapper' onScroll={ this.doubleScroll } ref={ this.topScroller }>\n                    <div\n                        className='second-scroll'\n                        style={{ width: scrollWidth }}\n                    ></div>\n                </div>\n                <div className=\"drift-table-wrapper\" onScroll={ this.doubleScroll } ref={ this.bottomScroller }>\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                permissions={ permissions }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                                selectedHSPIds={ selectedHSPIds }\n                                selectHistoricProfiles={ selectHistoricProfiles }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions,\n            updateReferenceId } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                    updateReferenceId={ updateReferenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>,\n                <DropdownItem\n                    key='export-to-JSON'\n                    component='button'\n                    data-ouia-component-id='export-to-json-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToJSON() }\n                >\n                    Export to JSON\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearAllSelections, clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        await clearAllSelections();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading, page, perPage,\n            setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        //this.props.loadEntities();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location.search !== '' && this.props.location.search === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearAllSelections, clearComparison, clearComparisonFilters,\n            clearSelectedBaselines, emptyState, error, exportToCSV, exportToJSON, factFilter, factSort, filterByFact, handleFactFilter,\n            historicalProfiles, handleBaselineSelection, handleHSPSelection, handleSystemSelection, history, loading, page, perPage, referenceId,\n            resetComparisonFilters, selectedBaselineIds, selectedHSPIds, stateFilters, stateSort, systems, totalFacts, updatePagination,\n            updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            { !emptyState\n                                                ? <DriftToolbar\n                                                    loading={ loading }\n                                                    history={ history }\n                                                    page={ page }\n                                                    perPage={ perPage }\n                                                    totalFacts={ totalFacts }\n                                                    updatePagination={ updatePagination }\n                                                    clearComparison={ clearComparison }\n                                                    clearComparisonFilters={ clearComparisonFilters }\n                                                    exportToCSV={ exportToCSV }\n                                                    exportToJSON={ exportToJSON }\n                                                    updateReferenceId={ updateReferenceId }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearSelectedBaselines={ clearSelectedBaselines }\n                                                    factFilter={ factFilter }\n                                                    filterByFact={ filterByFact }\n                                                    stateFilters={ stateFilters }\n                                                    addStateFilter={ addStateFilter }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    clearAllFactFilters={ clearAllFactFilters }\n                                                    setHistory={ this.setHistory }\n                                                    resetComparisonFilters={ resetComparisonFilters }\n                                                    clearAllSelections={ clearAllSelections }\n                                                />\n                                                : null\n                                            }\n                                            <DriftTable\n                                                updateReferenceId={ updateReferenceId }\n                                                error={ error }\n                                                isFirstReference={ isFirstReference }\n                                                setIsFirstReference={ this.setIsFirstReference }\n                                                clearComparison= { clearComparison }\n                                                handleBaselineSelection={ handleBaselineSelection }\n                                                handleHSPSelection={ handleHSPSelection }\n                                                handleSystemSelection={ handleSystemSelection }\n                                                permissions={ value.permissions }\n                                                handleFactFilter={ handleFactFilter }\n                                                addStateFilter={ addStateFilter }\n                                                stateFilters={ stateFilters }\n                                                activeFactFilters={ activeFactFilters }\n                                                factFilter={ factFilter }\n                                                setHistory={ this.setHistory }\n                                                factSort={ factSort }\n                                                stateSort={ stateSort }\n                                                referenceId={ referenceId }\n                                                systems={ systems }\n                                                baselines={ baselines }\n                                                historicalProfiles={ historicalProfiles }\n                                                selectedHSPIds={ selectedHSPIds }\n                                                selectedBaselineIds={ selectedBaselineIds }\n                                            />\n                                            { !emptyState && !loading ?\n                                                <Toolbar className=\"drift-toolbar\">\n                                                    <ToolbarGroup className=\"pf-c-pagination\">\n                                                        <ToolbarItem>\n                                                            <TablePagination\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                total={ totalFacts }\n                                                                isCompact={ false }\n                                                                updatePagination={ updatePagination }\n                                                                widgetId='drift-pagination-bottom'\n                                                                ouiaId='drift-pagination-bottom'\n                                                                variant={ PaginationVariant.bottom }\n                                                            />\n                                                        </ToolbarItem>\n                                                    </ToolbarGroup>\n                                                </Toolbar>\n                                                : null\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    exportToJSON: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func,\n    clearAllSelections: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        exportToJSON: () => dispatch(compareActions.exportToJSON()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters()),\n        clearAllSelections: () => dispatch(addSystemModalActions.clearAllSelections())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","toggleBasket","toggleBasketVisible","clearDeselected","applyChanges","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","find","hspContent","item","newArray","toggleSelected","array","removeId","displayBodyContent","isEmpty","EmptyStateDisplay","title","text","addSystemModalHelpers","systems","baselines","historicalProfiles","handleSystemSelection","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","findSelected","footerContent","Button","key","variant","onClick","ouiaId","isDisabled","position","PopoverPosition","bodyContent","maxHeight","overflowY","AddSystemModal","closePopover","disableSystemTable","basketIsVisible","createContent","content","body","DriftTooltip","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","onBulkSelect","systemContentSelect","data","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","transforms","sortable","cellWidth","previousSelectedBaselineIds","addSystemModal","React","window","insights","chrome","auth","getUser","entityListener","addNewListener","actionType","callback","addSystemModalOpened","width","isStatic","hspRead","prevProps","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","findNotInComparison","baselinesToRemove","setSelectedBaselines","setSelectedContent","tabIndex","selectActiveTab","activeTab","globalFilterState","loading","setSelectedSystemIds","totalBaselines","Modal","ref","onScroll","isOpen","onClose","actions","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","leftAlignToolbar","hasSwitch","showModal","updateReferenceId","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","ReferenceSelector","isReference","StarIcon","OutlinedStarIcon","Tooltip","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","color","last_updated","updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","hasHSPReadPermissions","StateIcon","fact","CheckCircleIcon","height","ExclamationCircleIcon","QuestionCircleIcon","tooltip","RowFact","expandedRows","expandRow","factName","button","AngleDownIcon","AngleRightIcon","renderFact","DriftTableRow","findSystem","createClassname","is_obfuscated","concat","cell","i","join","value","float","LockIcon","createCells","DriftTable","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","topScroller","bottomScroller","doubleScroll","wrapper1","current","wrapper2","onscroll","scrollLeft","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","entries","searchParams","URLSearchParams","getAll","Array","isArray","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","Skeleton","size","SkeletonSize","comparisons","comparison","multivalues","subFactItem","compareData","scrollWidth","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","AddSystemButton","isTable","types","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","DropdownItem","display","label","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","resetFilters","resetComparisonFilters","setIsEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearAllSelections","clearSelectedBaselines","actionKebabItems","component","exportToCSV","exportToJSON","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","detail","PlusCircleIcon","PageHeader","PageHeaderTitle","Main","compareRead","ErrorAlert","Card","CardBody","loadEntities","pagination"],"sourceRoot":""}