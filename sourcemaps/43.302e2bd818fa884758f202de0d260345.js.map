{"version":3,"file":"js/43.1649876539828.c4287ec272cb54328a24.js","mappings":"kMAIA,SAASA,EAAoBC,GACzB,IAAQC,EAA2ED,EAA3EC,aAAcC,EAA6DF,EAA7DE,UAAWC,EAAkDH,EAAlDG,UAAWC,EAAuCJ,EAAvCI,yBAA0BC,EAAaL,EAAbK,SAEtE,OACI,kBAAC,EAAAC,OAAD,CACIC,UAAYL,EACZ,aAAW,uBACXC,UAAYA,EACZK,SAAW,kBAAMJ,EAAyBH,IAC1CQ,SAAWJ,EAAW,6BAA+B,KACrDK,MAAQL,EAAW,4BAA8B,KACjDM,YAAU,IAKtBZ,EAAoBa,UAAY,CAC5BX,aAAcY,IAAAA,OACdX,UAAWW,IAAAA,OACXT,yBAA0BS,IAAAA,KAC1BR,SAAUQ,IAAAA,KACVV,UAAWU,IAAAA,MAGf,U,sFCzBA,WACIC,EAAYC,EAAMC,EAA2BC,EAA6BC,GAD9E,8EAGIF,IAHJ,kBAM2BG,EAAAA,EAAAA,kBAAsBL,EAAYC,GAN7D,OAMcK,EANd,OAOQH,EAA4BG,GAPpC,gDASQF,EAA2B,EAAD,GAAQJ,EAAYC,EAAKM,cAT3D,0D,sBAeA,SACIC,yB,SAhBoC,EAAzBA,EAAAA,EAAAA,EAAAA,G,iCCGf,SAASC,EAAoBvB,GACzB,IAAQwB,EACmFxB,EADnFwB,WAAYvB,EACuED,EADvEC,aAAcC,EACyDF,EADzDE,UAAWuB,EAC8CzB,EAD9CyB,SAAUpB,EACoCL,EADpCK,SAAUqB,EAC0B1B,EAD1B0B,UAAWC,EACe3B,EADf2B,MAAOC,EACQ5B,EADR4B,yBAC/EZ,EAAuFhB,EAAvFgB,0BAA2BC,EAA4DjB,EAA5DiB,4BAA6BC,EAA+BlB,EAA/BkB,2BAC5D,GAAqCW,EAAAA,EAAAA,UAAS5B,EAAa6B,uBAA3D,eAAQ3B,EAAR,KAAmB4B,EAAnB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,YACFJ,MAAAA,OAAA,EAAAA,EAA0BK,MAAOhC,EAAagC,IAC9CF,GAAe5B,KAEpB,CAAEyB,IAkBD,kBAAC,aAAD,KACMF,EACI,kBAAC,EAAD,CACExB,UAAYA,EACZC,UAAYA,EACZE,SAAWA,EACXD,yBArBiB,SAACH,GAC9B,IAAIiC,EAAU,CACVb,aAAcpB,EAAaoB,aAC3Bc,YAAa,GACbL,uBAAwB3B,GAG5BiC,EAAQd,yBACJrB,EAAagC,GAAIC,EAASlB,EAA2BC,EAA6BC,GAEtFa,GAAe5B,IAYHF,aAAeA,IAEjB,KAGFwB,EACM,kBAAC,EAAAY,MAAD,CACEC,IAAMX,EACNY,SAASf,EAAa,IAAI,MAExBA,GAEJ,MAMtBD,EAAoBX,UAAY,CAC5BY,WAAYX,IAAAA,OACZZ,aAAcY,IAAAA,OACdX,UAAWW,IAAAA,OACXY,SAAUZ,IAAAA,KACVR,SAAUQ,IAAAA,KACVa,UAAWb,IAAAA,KACXc,MAAOd,IAAAA,OACPe,yBAA0Bf,IAAAA,OAC1BG,0BAA2BH,IAAAA,KAC3BI,4BAA6BJ,IAAAA,KAC7BK,2BAA4BL,IAAAA,MAGhC,W,6JClEM2B,EAAAA,SAAAA,I,2bACF,WAAYxC,GAAO,kCACTA,G,qCAGV,WACI,MAAoDyC,KAAKzC,MAAjD0C,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,SAAUC,EAAzC,EAAyCA,OAEzC,OACI,kBAAC,EAAAC,SAAD,CACIC,OAAS,kBAAC,EAAAC,eAAD,CACLH,OAASA,EAASA,EAAS,UAAY,sBACvCI,gBAAkB,KAClBL,SAAWA,GACX,kBAAC,EAAAM,WAAD,CAAY3C,UAAU,wBAE1BoC,OAASA,EACTE,OAAWA,GAAU,kBACrBM,SAAO,EACPC,SAAWC,EAAAA,iBAAAA,KACXX,cAAgBA,Q,EApB1BF,CAAwBc,EAAAA,WA0B9Bd,EAAgB5B,UAAY,CACxB8B,cAAe7B,IAAAA,MACf8B,OAAQ9B,IAAAA,KACR+B,SAAU/B,IAAAA,KACVgC,OAAQhC,IAAAA,QAGZ,W,gDC9BA,SACI0C,uBARJ,SAAgCC,GAC5B,MAAO,CACHC,KAAMC,EAAAA,EAAAA,yBACNC,QAASH,M,yyBCUV,IAAMI,EAAe,SAAC,GAkBvB,YAjBF9C,EAiBE,EAjBFA,WACA+C,EAgBE,EAhBFA,oBACAC,EAeE,EAfFA,2BACAC,EAcE,EAdFA,kBACAC,EAaE,EAbFA,SACAC,EAYE,EAZFA,YACAC,EAWE,EAXFA,eACAC,EAUE,EAVFA,mBACAC,EASE,EATFA,yBACAC,EAQE,EARFA,kBACAC,EAOE,EAPFA,eACAf,EAME,EANFA,uBACAgB,EAKE,EALFA,mBACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,qBACAC,EAEE,EAFFA,sBACAC,EACE,EADFA,cAEMC,GAAaC,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBF,cACvEG,GAAkBF,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBC,mBAC5EC,GAAaH,EAAAA,EAAAA,cAAY,gBAAGC,EAAH,EAAGA,kBAAH,OAA2BA,MAAAA,OAA3B,EAA2BA,EAAmBE,cACvEC,GAAcC,EAAAA,EAAAA,SAAO,eAErBC,EAAW,SAACC,GACd,IAAIC,EAAW,GACf,OAAQD,GACJ,IAAK,OACDC,EAAW,CAAEpD,GAAI,EAAGqD,UAAU,EAAOC,MAAM,GAC3C,MAGJ,IAAK,gBACDF,EAAW,CAAEpD,GAAI,EAAGqD,UAAU,GAC9B,MAGJ,IAAK,OACDD,EAAW,CAAEpD,GAAI,EAAGqD,UAAU,GAKtChB,EAAee,IAGnB,OACIpB,EAAYuB,cACR,yBAAKjF,UAAU,gCACX,kBAAC,IAAD,CACIkF,QAAUd,EACVe,OAAS,YAAwD,IAArDC,EAAqD,EAArDA,kBAAmBC,EAAkC,EAAlCA,uBAAwBzE,EAAU,EAAVA,IACnD8D,EAAYY,QAAU1E,MAAAA,OAAtB,EAAsBA,EAAK8D,YAC3BlB,KACA+B,EAAAA,EAAAA,MAAcC,SAASJ,GACnBK,EAAAA,EAAAA,GACIJ,EAAwB9E,EAAY+C,EAAqBM,EACzDD,EAAgBJ,EAA4BM,EAC5Cb,EAAwBmB,EAAuBH,KAGjCE,EAAtBZ,EAA2C,GAA2BQ,IAE1E4B,UAAQ,EACRC,UAAQ,EACRC,cAAe,CACXC,KAAMxB,EACNyB,OAAQ,CACJC,eAAgB,EAAF,UACPvB,MAAAA,GAAA,UAAAA,EAAiBwB,WAAjB,eAAsBC,aAAc,CAAEC,YAAY,KAClD1B,MAAAA,GAAA,UAAAA,EAAkB,sCAAlB,eAAkDyB,aAC9C,CAAEE,QAAS,aACf3B,MAAAA,GAAA,UAAAA,EAAkB,wBAAlB,eAAoCyB,aAChC,CAAEG,MAAO,aACb3B,MAAAA,OAAA,EAAAA,EAAY4B,QAAS,GAAK,CAAEC,SAAU7B,MAIrD8B,WAAY,CACRC,cAAc,EACdvC,cAAAA,EACA3B,OAAQ,gBACRtC,UAAW,kBACXyG,gBAAgB,GAEpB/B,YAAcP,IAA0BN,EAA1B,mCACR,WAAO6C,EAAQC,GAAf,kFACQC,GAAWzC,GAAyB,IACzC0C,OAAOF,EAAOG,KAAO,GAAKH,EAAOI,SAAUJ,EAAOG,KAAOH,EAAOI,UAFnE,mBAGqBrC,EAAYY,eAHjC,aAGqB,OAAAZ,EACfkC,EACA,CACII,UAAU,IAEd,GARN,cAGQnG,EAHR,gCAYSA,GAZT,IAaMoG,QAASpG,EAAKoG,QAAQC,KAAI,SAACC,GAAD,cACnBA,GACAP,EAAQQ,MAAK,qBAAGC,OAAoBF,EAAOzF,OAAO,OAEzD4F,OAAQnD,GAAyB,IAAIkC,OACrCS,KAAMH,EAAOG,KACbC,SAAUJ,EAAOI,YAnBvB,2CADQ,2FAuBR,WAAOL,EAAQC,GAAf,mGACqBjC,EAAYY,eADjC,aACqB,OAAAZ,EAAsB,GAAIiC,GAAQ,GADvD,cACQ9F,EADR,8BAEcA,IAFd,2CAvBQ,wDA2Bd0G,WAAa3C,IAAaf,GAA4B,CAClD2D,YAAa7D,EACb8D,MAAOhE,MAAAA,GAAF,UAAEA,EAAUK,yBAAZ,aAAE,EAA6BuC,OACpCqB,MAAO,CAAC,CACJC,MAAO,kBACPC,QAAS,WACLhD,EAAS,UAEd,CACC+C,MAAO,gBAAF,QAAmBlE,MAAAA,OAAA,EAAAA,EAAUgE,QAAS,EAAtC,KACLG,QAAS,WACLhD,EAAS,UAEd,CACC+C,MAAO,kBAAF,QAAqBlE,MAAAA,OAAA,EAAAA,EAAUgE,QAAS,EAAxC,KACLG,QAAS,WACLhD,EAAS,oBAGjBA,SAAU,WAAM,OACRnB,MAAAA,OAAA,EAAAA,EAAUoE,KAAKxB,WAAW5C,MAAAA,GAA1B,UAA0BA,EAAUqE,uBAApC,aAA0B,EAA2BzB,QACrDzB,EAAS,iBAETA,EAAS,SAGjBmD,QAAStE,GAAYA,EAASK,kBACxBjC,EAAAA,EAAAA,iBAAyB4B,MAAAA,OAAzB,EAAyBA,EAAU6D,MAAO7D,MAAAA,OAA1C,EAA0CA,EAAUK,kBAAkBuC,QACtE,SAKhB,kBAAC,IAAD,CACE2B,KAAOC,EAAAA,SACPC,MAAM,UACNP,MAAQ,0CACRQ,KAAO,CAAE,uEAKzB9E,EAAahD,UAAY,CACrB6D,qBAAsB5D,IAAAA,KACtBwD,kBAAmBxD,IAAAA,MACnBgD,oBAAqBhD,IAAAA,KACrBkD,kBAAmBlD,IAAAA,KACnBsD,mBAAoBtD,IAAAA,MACpBqD,eAAgBrD,IAAAA,KAChBoD,YAAapD,IAAAA,OACbmD,SAAUnD,IAAAA,OACVyD,eAAgBzD,IAAAA,KAChB2D,cAAe3D,IAAAA,OACf6D,sBAAuB7D,IAAAA,MACvBuD,yBAA0BvD,IAAAA,KAC1BC,WAAYD,IAAAA,OACZ0C,uBAAwB1C,IAAAA,KACxB0D,mBAAoB1D,IAAAA,KACpB8H,gBAAiB9H,IAAAA,KACjBiD,2BAA4BjD,IAAAA,KAC5B8D,cAAe9D,IAAAA,OAanB+C,EAAagF,aAAe,CACxBvE,kBAAmB,IAGvB,SAAewE,EAAAA,EAAAA,SAAQ,MAdvB,SAA4BC,GACxB,MAAO,CACHvF,uBAAwB,SAACC,GAAD,OAAwBsF,EAASC,EAAAA,EAAAA,uBAA+CvF,KACxGiB,qBAAsB,SAACuE,GAAD,OAAeF,EAASG,EAAAA,EAAAA,qBAAoCD,KAClFjF,kBAAmB,kBAAM+E,EAASI,EAAAA,EAAAA,oBAClC5E,eAAgB,SAACe,GAAD,OAAcyD,EAAS,CAAErF,KAAM,gBAAiBE,QAAS0B,KACzEsD,gBAAiB,SAACQ,GAAD,OAAaL,EAASI,EAAAA,EAAAA,gBAAoCC,QAQnF,CAAiDvF,I","sources":["webpack:///./src/SmartComponents/NotificationsSwitch/NotificationsSwitch.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaselinePage/redux/helpers.js","webpack:///./src/SmartComponents/BaselinesTable/NotificationDetails/NotificationDetails.js","webpack:///./src/SmartComponents/ExportCSVButton/ExportCSVButton.js","webpack:///./src/SmartComponents/HistoricalProfilesPopover/redux/actions.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch } from '@patternfly/react-core';\n\nfunction NotificationsSwitch(props) {\n    const { baselineData, classname, isChecked, handleNotificationToggle, hasLabel } = props;\n\n    return (\n        <Switch\n            className={ classname }\n            aria-label='notifications-toggle'\n            isChecked={ isChecked }\n            onChange={ () => handleNotificationToggle(baselineData) }\n            labelOff={ hasLabel ? 'Notifications are disabled' : null }\n            label={ hasLabel ? 'Notifications are enabled' : null }\n            isReversed\n        />\n    );\n}\n\nNotificationsSwitch.propTypes = {\n    baselineData: PropTypes.object,\n    classname: PropTypes.string,\n    handleNotificationToggle: PropTypes.func,\n    hasLabel: PropTypes.bool,\n    isChecked: PropTypes.bool\n};\n\nexport default NotificationsSwitch;\n","import api from '../../../../api';\n\n/*eslint-disable camelcase*/\nasync function toggleNotificationSwitch(\n    baselineId, body, toggleNotificationPending, toggleNotificationFulfilled, toggleNotificationRejected\n) {\n    toggleNotificationPending();\n\n    try {\n        const data = await api.patchBaselineData(baselineId, body);\n        toggleNotificationFulfilled(data);\n    } catch (error) {\n        toggleNotificationRejected(error, baselineId, body.display_name);\n    }\n}\n\n/*eslint-enable camelcase*/\n\nexport default {\n    toggleNotificationSwitch\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '@patternfly/react-core';\nimport NotificationsSwitch from '../../NotificationsSwitch/NotificationsSwitch';\nimport helpers from '../../BaselinesPage/EditBaselinePage/redux/helpers';\n\nfunction NotificationDetails(props) {\n    const { badgeCount, baselineData, classname, hasBadge, hasLabel, hasSwitch, index, notificationsSwitchError,\n        toggleNotificationPending, toggleNotificationFulfilled, toggleNotificationRejected } = props;\n    const [ isChecked, toggleChecked ] = useState(baselineData.notifications_enabled);\n\n    useEffect(() => {\n        if (notificationsSwitchError?.id === baselineData.id) {\n            toggleChecked(!isChecked);\n        }\n    }, [ notificationsSwitchError ]);\n\n    /*eslint-disable camelcase*/\n    const handleNotificationToggle = (baselineData) => {\n        let apiBody = {\n            display_name: baselineData.display_name,\n            facts_patch: [],\n            notifications_enabled: !isChecked\n        };\n\n        helpers.toggleNotificationSwitch(\n            baselineData.id, apiBody, toggleNotificationPending, toggleNotificationFulfilled, toggleNotificationRejected\n        );\n        toggleChecked(!isChecked);\n    };\n    /*eslint-enable camelcase*/\n\n    return (\n        <React.Fragment>\n            { hasSwitch\n                ? <NotificationsSwitch\n                    classname={ classname }\n                    isChecked={ isChecked }\n                    hasLabel={ hasLabel }\n                    handleNotificationToggle={ handleNotificationToggle }\n                    baselineData={ baselineData }\n                />\n                : null\n            }\n            {\n                hasBadge\n                    ? <Badge\n                        key={ index }\n                        isRead={ badgeCount > 0 ? null : true }\n                    >\n                        { badgeCount }\n                    </Badge>\n                    : null\n            }\n        </React.Fragment>\n    );\n}\n\nNotificationDetails.propTypes = {\n    badgeCount: PropTypes.number,\n    baselineData: PropTypes.object,\n    classname: PropTypes.string,\n    hasBadge: PropTypes.bool,\n    hasLabel: PropTypes.bool,\n    hasSwitch: PropTypes.bool,\n    index: PropTypes.number,\n    notificationsSwitchError: PropTypes.object,\n    toggleNotificationPending: PropTypes.func,\n    toggleNotificationFulfilled: PropTypes.func,\n    toggleNotificationRejected: PropTypes.func\n};\n\nexport default NotificationDetails;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Dropdown, DropdownToggle, DropdownPosition } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nclass ExportCSVButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { dropdownItems, isOpen, onToggle, ouiaId } = this.props;\n\n        return (\n            <Dropdown\n                toggle={ <DropdownToggle\n                    ouiaId={ ouiaId ? ouiaId + '-toggle' : 'action-kebab-toggle' }\n                    toggleIndicator={ null }\n                    onToggle={ onToggle }>\n                    <ExportIcon className='pointer not-active'/>\n                </DropdownToggle> }\n                isOpen={ isOpen }\n                ouiaId = { ouiaId || 'export-dropdown' }\n                isPlain\n                position={ DropdownPosition.left }\n                dropdownItems={ dropdownItems }\n            />\n        );\n    }\n}\n\nExportCSVButton.propTypes = {\n    dropdownItems: PropTypes.array,\n    isOpen: PropTypes.bool,\n    onToggle: PropTypes.func,\n    ouiaId: PropTypes.string\n};\n\nexport default ExportCSVButton;\n","import types from './types';\n\nfunction selectHistoricProfiles(historicProfileIds) {\n    return {\n        type: types.SELECT_HISTORIC_PROFILES,\n        payload: historicProfileIds\n    };\n}\n\nexport default {\n    selectHistoricProfiles\n};\n","/*eslint-disable camelcase*/\nimport React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\nimport selectedReducer from '../../store/reducers';\nimport { compareActions } from '../modules';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport helpers from '../helpers';\n\nexport const SystemsTable = ({\n    baselineId,\n    createBaselineModal,\n    deselectHistoricalProfiles,\n    driftClearFilters,\n    entities,\n    permissions,\n    hasMultiSelect,\n    historicalProfiles,\n    isAddSystemNotifications,\n    selectedSystemIds,\n    selectEntities,\n    selectHistoricProfiles,\n    selectSystemsToAdd,\n    selectVariant,\n    setSelectedSystemIds,\n    systemNotificationIds,\n    systemColumns\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n    const getEntities = useRef(() => undefined);\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n                break;\n            }\n\n            case 'deselect-page': {\n                toSelect = { id: 0, selected: false };\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    return (\n        permissions.inventoryRead ? (\n            <div className='inventory-toolbar-no-padding'>\n                <InventoryTable\n                    columns={ systemColumns }\n                    onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                        getEntities.current = api?.getEntities;\n                        driftClearFilters();\n                        getRegistry().register(mergeWithEntities(\n                            selectedReducer(\n                                INVENTORY_ACTION_TYPES, baselineId, createBaselineModal, historicalProfiles,\n                                hasMultiSelect, deselectHistoricalProfiles, isAddSystemNotifications,\n                                selectHistoricProfiles, systemNotificationIds, selectSystemsToAdd\n                            )\n                        ));\n                        createBaselineModal ? setSelectedSystemIds([]) : setSelectedSystemIds(selectedSystemIds);\n                    } }\n                    showTags\n                    noDetail\n                    customFilters={{\n                        tags: tagsFilter,\n                        filter: {\n                            system_profile: {\n                                ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                                ...workloadsFilter?.['Ansible Automation Platform']?.isSelected\n                                    && { ansible: 'not_nil' },\n                                ...workloadsFilter?.['Microsoft SQL']?.isSelected\n                                    && { mssql: 'not_nil' },\n                                ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                            }\n                        }\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        selectVariant,\n                        ouiaId: 'systems-table',\n                        className: 'inventory-align',\n                        isStickyHeader: true\n                    }}\n                    getEntities={ systemNotificationIds && !isAddSystemNotifications\n                        ? async (_items, config) => {\n                            const currIds = (systemNotificationIds || [])\n                            .slice((config.page - 1) * config.per_page, config.page * config.per_page);\n                            const data = await getEntities.current?.(\n                                currIds,\n                                {\n                                    hasItems: true\n                                },\n                                true\n                            );\n\n                            return {\n                                ...data,\n                                results: data.results.map((system) => ({\n                                    ...system,\n                                    ...currIds.find(({ uuid }) => uuid === system.id) || {}\n                                })),\n                                total: (systemNotificationIds || []).length,\n                                page: config.page,\n                                per_page: config.per_page\n                            };\n                        }\n                        : async (_items, config) => {\n                            const data = await getEntities.current?.([], config, true);\n                            return { ...data };\n                        } }\n                    bulkSelect={ onSelect && !isAddSystemNotifications && {\n                        isDisabled: !hasMultiSelect,\n                        count: entities?.selectedSystemIds?.length,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${ entities?.count || 0 })`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        }, {\n                            title: `Deselect page (${ entities?.count || 0 })`,\n                            onClick: () => {\n                                onSelect('deselect-page');\n                            }\n                        }],\n                        onSelect: () => {\n                            if (entities?.rows.length === entities?.selectedSystems?.length) {\n                                onSelect('deselect-page');\n                            } else {\n                                onSelect('page');\n                            }\n                        },\n                        checked: entities && entities.selectedSystemIds\n                            ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                            : null\n                    } }\n                />\n            </div>\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n};\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    permissions: PropTypes.object,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string,\n    systemNotificationIds: PropTypes.array,\n    isAddSystemNotifications: PropTypes.bool,\n    baselineId: PropTypes.string,\n    selectHistoricProfiles: PropTypes.func,\n    selectSystemsToAdd: PropTypes.func,\n    selectSingleHSP: PropTypes.func,\n    deselectHistoricalProfiles: PropTypes.func,\n    systemColumns: PropTypes.array\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect }),\n        selectSingleHSP: (profile) => dispatch(systemsTableActions.selectSingleHSP(profile))\n    };\n}\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nexport default connect(null, mapDispatchToProps)(SystemsTable);\n/*eslint-enable camelcase*/\n"],"names":["NotificationsSwitch","props","baselineData","classname","isChecked","handleNotificationToggle","hasLabel","Switch","className","onChange","labelOff","label","isReversed","propTypes","PropTypes","baselineId","body","toggleNotificationPending","toggleNotificationFulfilled","toggleNotificationRejected","api","data","display_name","toggleNotificationSwitch","NotificationDetails","badgeCount","hasBadge","hasSwitch","index","notificationsSwitchError","useState","notifications_enabled","toggleChecked","useEffect","id","apiBody","facts_patch","helpers","Badge","key","isRead","ExportCSVButton","this","dropdownItems","isOpen","onToggle","ouiaId","Dropdown","toggle","DropdownToggle","toggleIndicator","ExportIcon","isPlain","position","DropdownPosition","Component","selectHistoricProfiles","historicProfileIds","type","types","payload","SystemsTable","createBaselineModal","deselectHistoricalProfiles","driftClearFilters","entities","permissions","hasMultiSelect","historicalProfiles","isAddSystemNotifications","selectedSystemIds","selectEntities","selectSystemsToAdd","selectVariant","setSelectedSystemIds","systemNotificationIds","systemColumns","tagsFilter","useSelector","globalFilterState","workloadsFilter","sidsFilter","getEntities","useRef","onSelect","event","toSelect","selected","bulk","inventoryRead","columns","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","current","getRegistry","register","selectedReducer","showTags","noDetail","customFilters","tags","filter","system_profile","SAP","isSelected","sap_system","ansible","mssql","length","sap_sids","tableProps","canSelectAll","isStickyHeader","_items","config","currIds","slice","page","per_page","hasItems","results","map","system","find","uuid","total","bulkSelect","isDisabled","count","items","title","onClick","rows","selectedSystems","checked","icon","LockIcon","color","text","selectSingleHSP","defaultProps","connect","dispatch","historicProfilesActions","systemIds","compareActions","systemsTableActions","profile"],"sourceRoot":""}