{"version":3,"sources":["webpack:///./src/SmartComponents/ErrorAlert/ErrorAlert.js","webpack:///./src/SmartComponents/ExportCSVButton/ExportCSVButton.js","webpack:///./src/SmartComponents/HistoricalProfilesPopover/redux/actions.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js"],"names":["ErrorAlert","props","closeToast","tableId","onClose","this","addNotification","error","status","variant","title","description","detail","dismissable","Component","propTypes","PropTypes","connect","dispatch","payload","ExportCSVButton","dropdownItems","isOpen","onToggle","ouiaId","Dropdown","toggle","DropdownToggle","toggleIndicator","ExportIcon","className","isPlain","position","DropdownPosition","selectHistoricProfiles","historicProfileIds","type","types","SystemsTable","baselineId","createBaselineModal","deselectHistoricalProfiles","driftClearFilters","entities","permissions","hasMultiSelect","historicalProfiles","isAddSystemNotifications","selectedSystemIds","selectEntities","selectSystemsToAdd","selectVariant","setSelectedSystemIds","systemNotificationIds","systemColumns","tagsFilter","useSelector","globalFilterState","workloadsFilter","sidsFilter","getEntities","useRef","onSelect","event","toSelect","id","selected","bulk","inventoryRead","columns","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","current","getRegistry","register","selectedReducer","showTags","noDetail","customFilters","tags","filter","system_profile","SAP","isSelected","sap_system","length","sap_sids","tableProps","canSelectAll","_items","config","currIds","slice","page","per_page","hasItems","data","results","map","system","find","uuid","total","bulkSelect","isDisabled","count","items","onClick","rows","selectedSystems","checked","helpers","icon","LockIcon","color","text","selectSingleHSP","defaultProps","historicProfilesActions","systemIds","compareActions","systemsTableActions","profile"],"mappings":"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","file":"js/520.ede4cee341984209f463.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\n\nexport class ErrorAlert extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    closeToast = (tableId) => {\n        const { onClose } = this.props;\n\n        if (tableId) {\n            onClose(tableId);\n        } else {\n            onClose();\n        }\n    }\n\n    render() {\n        const { addNotification, error, tableId } = this.props;\n\n        return (\n            <React.Fragment>\n                { error.status\n                    ? addNotification({\n                        variant: 'danger',\n                        title: 'Error',\n                        description: error.detail,\n                        dismissable: true\n                    })\n                    : null\n                }\n                { error.status ? this.closeToast(tableId) : null }\n            </React.Fragment>\n        );\n    }\n}\n\nErrorAlert.propTypes = {\n    error: PropTypes.object,\n    tableId: PropTypes.string,\n    onClose: PropTypes.func,\n    addNotification: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNotification: (payload) => dispatch(addNotification(payload))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ErrorAlert);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Dropdown, DropdownToggle, DropdownPosition } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nclass ExportCSVButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { dropdownItems, isOpen, onToggle, ouiaId } = this.props;\n\n        return (\n            <Dropdown\n                toggle={ <DropdownToggle\n                    ouiaId={ ouiaId ? ouiaId + '-toggle' : 'action-kebab-toggle' }\n                    toggleIndicator={ null }\n                    onToggle={ onToggle }>\n                    <ExportIcon className='pointer not-active'/>\n                </DropdownToggle> }\n                isOpen={ isOpen }\n                ouiaId = { ouiaId || 'export-dropdown' }\n                isPlain\n                position={ DropdownPosition.left }\n                dropdownItems={ dropdownItems }\n            />\n        );\n    }\n}\n\nExportCSVButton.propTypes = {\n    dropdownItems: PropTypes.array,\n    isOpen: PropTypes.bool,\n    onToggle: PropTypes.func,\n    ouiaId: PropTypes.string\n};\n\nexport default ExportCSVButton;\n","import types from './types';\n\nfunction selectHistoricProfiles(historicProfileIds) {\n    return {\n        type: types.SELECT_HISTORIC_PROFILES,\n        payload: historicProfileIds\n    };\n}\n\nexport default {\n    selectHistoricProfiles\n};\n","/*eslint-disable camelcase*/\nimport React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\nimport selectedReducer from '../../store/reducers';\nimport { compareActions } from '../modules';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport helpers from '../helpers';\n\nexport const SystemsTable = ({\n    baselineId,\n    createBaselineModal,\n    deselectHistoricalProfiles,\n    driftClearFilters,\n    entities,\n    permissions,\n    hasMultiSelect,\n    historicalProfiles,\n    isAddSystemNotifications,\n    selectedSystemIds,\n    selectEntities,\n    selectHistoricProfiles,\n    selectSystemsToAdd,\n    selectVariant,\n    setSelectedSystemIds,\n    systemNotificationIds,\n    systemColumns\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n    const getEntities = useRef(() => undefined);\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n                break;\n            }\n\n            case 'deselect-page': {\n                toSelect = { id: 0, selected: false };\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    return (\n        permissions.inventoryRead ? (\n            <div className='inventory-toolbar-no-padding'>\n                <InventoryTable\n                    columns={ systemColumns }\n                    onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                        getEntities.current = api?.getEntities;\n                        driftClearFilters();\n                        getRegistry().register(mergeWithEntities(\n                            selectedReducer(\n                                INVENTORY_ACTION_TYPES, baselineId, createBaselineModal, historicalProfiles,\n                                hasMultiSelect, deselectHistoricalProfiles, isAddSystemNotifications,\n                                selectHistoricProfiles, systemNotificationIds, selectSystemsToAdd\n                            )\n                        ));\n                        createBaselineModal ? setSelectedSystemIds([]) : setSelectedSystemIds(selectedSystemIds);\n                    } }\n                    showTags\n                    noDetail\n                    customFilters={{\n                        tags: tagsFilter,\n                        filter: {\n                            system_profile: {\n                                ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                                ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                            }\n                        }\n                    }}\n                    tableProps={{\n                        canSelectAll: false,\n                        selectVariant,\n                        ouiaId: 'systems-table',\n                        className: 'inventory-align'\n                    }}\n                    getEntities={ systemNotificationIds && !isAddSystemNotifications\n                        ? async (_items, config) => {\n                            const currIds = (systemNotificationIds || [])\n                            .slice((config.page - 1) * config.per_page, config.page * config.per_page);\n                            const data = await getEntities.current?.(\n                                currIds,\n                                {\n                                    hasItems: true\n                                },\n                                true\n                            );\n\n                            return {\n                                ...data,\n                                results: data.results.map((system) => ({\n                                    ...system,\n                                    ...currIds.find(({ uuid }) => uuid === system.id) || {}\n                                })),\n                                total: (systemNotificationIds || []).length,\n                                page: config.page,\n                                per_page: config.per_page\n                            };\n                        }\n                        : async (_items, config) => {\n                            const data = await getEntities.current?.([], config, true);\n                            return { ...data };\n                        } }\n                    bulkSelect={ onSelect && !isAddSystemNotifications && {\n                        isDisabled: !hasMultiSelect,\n                        count: entities?.selectedSystemIds?.length,\n                        items: [{\n                            title: `Select none (0)`,\n                            onClick: () => {\n                                onSelect('none');\n                            }\n                        }, {\n                            title: `Select page (${ entities?.count || 0 })`,\n                            onClick: () => {\n                                onSelect('page');\n                            }\n                        }, {\n                            title: `Deselect page (${ entities?.count || 0 })`,\n                            onClick: () => {\n                                onSelect('deselect-page');\n                            }\n                        }],\n                        onSelect: () => {\n                            if (entities?.rows.length === entities?.selectedSystems?.length) {\n                                onSelect('deselect-page');\n                            } else {\n                                onSelect('page');\n                            }\n                        },\n                        checked: entities && entities.selectedSystemIds\n                            ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                            : null\n                    } }\n                />\n            </div>\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n};\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    permissions: PropTypes.object,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string,\n    systemNotificationIds: PropTypes.array,\n    isAddSystemNotifications: PropTypes.bool,\n    baselineId: PropTypes.string,\n    selectHistoricProfiles: PropTypes.func,\n    selectSystemsToAdd: PropTypes.func,\n    selectSingleHSP: PropTypes.func,\n    deselectHistoricalProfiles: PropTypes.func,\n    systemColumns: PropTypes.array\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect }),\n        selectSingleHSP: (profile) => dispatch(systemsTableActions.selectSingleHSP(profile))\n    };\n}\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nexport default connect(null, mapDispatchToProps)(SystemsTable);\n/*eslint-enable camelcase*/\n"],"sourceRoot":""}