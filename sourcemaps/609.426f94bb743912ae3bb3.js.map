{"version":3,"sources":["webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasketCheckbox/SelectedBasketCheckbox.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedTable/SelectedTable.js","webpack:///./src/SmartComponents/AddSystemModal/SelectedBasket/SelectedBasket.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","SelectedBasketCheckbox","props","handleChange","findType","id","type","isChecked","state","setState","this","Checkbox","onChange","name","Component","propTypes","PropTypes","SelectedTable","buildRows","entities","selectedBaselineContent","selectedHSPContent","selectedSystemContent","handleDeselect","rows","forEach","baseline","icon","style","system","hsp","system_id","moment","captured_date","format","selectedSystemIds","system_name","className","SelectedBasket","onToggle","baselinesToDeselect","hspsToDeselect","systemsToDeselect","handleBaselineSelection","handleHSPSelection","selectBaseline","selectEntity","selectHistoricProfiles","toggleBasketVisible","find","hspContent","item","clearDeselected","newArray","toggleSelected","array","removeId","selectedCount","isVisible","Popover","minWidth","shouldClose","headerContent","position","PopoverPosition","bodyContent","maxHeight","overflowY","onClick","findSelected","AddSystemModal","createContent","content","body","DriftTooltip","basketIsVisible","disableSystemTable","onSelect","event","isSelected","rowId","ids","baselineTableData","selectedContent","BlueprintIcon","bind","onBulkSelect","systemContentSelect","data","handleSystemSelection","selectedSystems","bulk","row","ServerIcon","display_name","confirmModal","cancelSelection","changeActiveTab","systemColumns","buildSystemColumns","permissions","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","entityListener","addNewListener","actionType","callback","addSystemModalOpened","key","width","isStatic","hspRead","prevProps","baselines","historicalProfiles","systems","setSelectedContent","updated","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","basketContent","comparedContent","basketItem","findIndex","comparedItem","findNotInComparison","baselinesToRemove","tabIndex","selectActiveTab","activeTab","globalFilterState","loading","setSelectedSystemIds","totalBaselines","Modal","ouiaId","isOpen","onClose","actions","Button","variant","isDisabled","GlobalFilterAlert","Toolbar","padding","ToolbarContent","ToolbarItem","Tabs","activeKey","Tab","eventKey","SystemsTable","hasMultiSelect","selectVariant","onSystemSelect","BaselinesTable","tableId","tableData","kebab","showModal","connect","addSystemModalState","compareState","baselinesTableState","comparisonTable","historicProfilesState","checkboxTable","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","historicProfileIds","historicProfilesActions","payload","systemsTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","Tooltip","tooltip","ReferenceSelector","isReference","updateReferenceId","StarIcon","OutlinedStarIcon","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","typeIcon","ClockIcon","TimesIcon","system_profile_exists","ExclamationTriangleIcon","last_updated","HistoricalProfilesPopover","systemName","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","hasHSPReadPermissions","DriftTable","shiftReferenceToFront","index","systemToMove","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","Object","prototype","hasOwnProperty","call","hsps","indexOf","slice","concat","entries","searchParams","URLSearchParams","getAll","Array","isArray","setSelectedBaselines","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","hspsToRemove","profile","clearComparison","reference","facts","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","renderState","comparison","renderRowChild","category","multivalues","subFactItem","rowValue","cell","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","AddSystemButton","isTable","types","FilterDropDown","createDropdownItem","toggleDropDown","DropdownItem","display","label","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","resetFilters","resetComparisonFilters","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","clearAllFilters","clearFiltersButtonText","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","loadEntities","PageHeader","PageHeaderTitle","Main","compareRead","ErrorAlert","Card","CardBody","pagination"],"mappings":"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","file":"js/609.9d80f82e75bf454f611b.js","sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nexport class SelectedBasketCheckbox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked: true\n        };\n    }\n\n    handleChange = () => {\n        const { findType, id, type } = this.props;\n        const { isChecked } = this.state;\n\n        findType(type, id);\n        this.setState({ isChecked: !isChecked });\n    }\n\n    render() {\n        const { isChecked } = this.state;\n\n        return (\n            <React.Fragment>\n                <Checkbox\n                    isChecked={ isChecked }\n                    onChange={ this.handleChange }\n                    aria-label=\"controlled checkbox example\"\n                    id=\"check-1\"\n                    name=\"check1\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasketCheckbox.propTypes = {\n    type: PropTypes.string,\n    findType: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default SelectedBasketCheckbox;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport SelectedBasketCheckbox from '../SelectedBasketCheckbox/SelectedBasketCheckbox';\n\nexport class SelectedTable extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    buildRows = () => {\n        const { entities, findType, selectedBaselineContent, selectedHSPContent, selectedSystemContent, handleDeselect } = this.props;\n        let rows = [];\n\n        selectedBaselineContent.forEach(function(baseline) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='baseline'\n                            findType={ findType }\n                            id={ baseline.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ baseline.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ baseline.name }</td>\n                </tr>\n            );\n        });\n\n        selectedSystemContent.forEach(function(system) {\n            rows.push(\n                <tr>\n                    <td>\n                        <SelectedBasketCheckbox\n                            type='system'\n                            findType={ findType }\n                            id={ system.id }\n                            handleDeselect={ handleDeselect }\n                        />\n                    </td>\n                    <td>{ system.icon }</td>\n                    <td style={{ 'align-content': 'left' }}>{ system.name }</td>\n                </tr>\n            );\n\n            selectedHSPContent?.forEach(function(hsp) {\n                if (hsp.system_id === system.id) {\n                    rows.push(\n                        <tr>\n                            <td>\n                                <SelectedBasketCheckbox\n                                    type='hsp'\n                                    findType={ findType }\n                                    id={ hsp.id }\n                                    handleDeselect={ handleDeselect }\n                                />\n                            </td>\n                            <td>{ hsp.icon }</td>\n                            <td style={{ 'align-content': 'left' }}>\n                                <div>{ system.name }</div>\n                                <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n        });\n\n        selectedHSPContent?.forEach(function(hsp) {\n            if (!entities?.selectedSystemIds?.includes(hsp.system_id)) {\n\n                rows.push(\n                    <tr>\n                        <td>\n                            <SelectedBasketCheckbox\n                                type='hsp'\n                                findType={ findType }\n                                id={ hsp.id }\n                                handleDeselect={ handleDeselect }\n                            />\n                        </td>\n                        <td>{ hsp.icon }</td>\n                        <td style={{ 'align-content': 'left' }}>\n                            <div>{ hsp.system_name }</div>\n                            <div>{ moment.utc(hsp.captured_date).format('DD MMM YYYY, HH:mm UTC') }</div>\n                        </td>\n                    </tr>\n                );\n            }\n        });\n\n        return rows;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <table className='pf-c-table'>\n                    <tbody>\n                        { this.buildRows() }\n                    </tbody>\n                </table>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedTable.propTypes = {\n    selectedBaselineContent: PropTypes.array,\n    entities: PropTypes.object,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    findType: PropTypes.func,\n    handleDeselect: PropTypes.func\n};\n\nexport default SelectedTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, PopoverPosition } from '@patternfly/react-core';\nimport SelectedTable from './SelectedTable/SelectedTable';\n\nexport class SelectedBasket extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            systemsToDeselect: [],\n            baselinesToDeselect: [],\n            hspsToDeselect: []\n        };\n\n        this.clearDeselected = () => {\n            this.setState({ systemsToDeselect: []});\n            this.setState({ baselinesToDeselect: []});\n            this.setState({ hspsToDeselect: []});\n        };\n    }\n\n    onToggle = async () => {\n        const { baselinesToDeselect, hspsToDeselect, systemsToDeselect } = this.state;\n        const { handleBaselineSelection, handleHSPSelection, selectBaseline, selectEntity, selectHistoricProfiles,\n            selectedBaselineContent, selectedHSPContent, toggleBasketVisible } = this.props;\n\n        toggleBasketVisible();\n\n        if (baselinesToDeselect.length) {\n            await selectBaseline(baselinesToDeselect, false, 'COMPARISON');\n            handleBaselineSelection(selectedBaselineContent.filter(baseline => baselinesToDeselect.includes(baseline.id)), false);\n        }\n\n        if (hspsToDeselect.length) {\n            hspsToDeselect.forEach(async function(hsp) {\n                await handleHSPSelection(selectedHSPContent.find(hspContent => hspContent.id === hsp));\n            });\n\n            await selectHistoricProfiles(selectedHSPContent.filter(item => !hspsToDeselect.includes(item.id))\n            .map(({ id }) => id));\n        }\n\n        systemsToDeselect.forEach(async function(system) {\n            await selectEntity(system, false);\n        });\n\n        this.clearDeselected();\n    };\n\n    findType = (type, id) => {\n        const { systemsToDeselect, baselinesToDeselect, hspsToDeselect } = this.state;\n        let newArray;\n\n        if (type === 'system') {\n            newArray = this.toggleSelected(systemsToDeselect, id);\n            this.setState({ systemsToDeselect: newArray });\n        } else if (type === 'baseline') {\n            newArray = this.toggleSelected(baselinesToDeselect, id);\n            this.setState({ baselinesToDeselect: newArray });\n        } else {\n            newArray = this.toggleSelected(hspsToDeselect, id);\n            this.setState({ hspsToDeselect: newArray });\n        }\n    }\n\n    toggleSelected = (array, id) => {\n        let newArray = [];\n\n        if (array.includes(id)) {\n            newArray = this.removeId(id, array);\n        } else {\n            newArray = [ ...array ];\n            newArray.push(id);\n        }\n\n        return newArray;\n    }\n\n    removeId(id, array) {\n        let newArray = [];\n        array.forEach(function(item) {\n            if (id !== item) {\n                newArray.push(item);\n            }\n        });\n\n        return newArray;\n    }\n\n    findSelected() {\n        const { selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n        let selectedCount = 0;\n\n        if (selectedSystemContent.length) {\n            selectedCount += selectedSystemContent.length + selectedBaselineContent.length + selectedHSPContent.length;\n        } else {\n            selectedCount += selectedBaselineContent.length + selectedHSPContent.length;\n        }\n\n        return selectedCount;\n    }\n\n    render() {\n        const { entities, isVisible, selectedBaselineContent, selectedHSPContent, selectedSystemContent } = this.props;\n\n        return (\n            <React.Fragment>\n                <span>\n                    <Popover\n                        id='selected-basket'\n                        style={{ minWidth: '500px' }}\n                        isVisible={ isVisible }\n                        shouldClose={ () => this.onToggle() }\n                        headerContent={ <div>Selected items</div> }\n                        position={ PopoverPosition.bottom }\n                        bodyContent={ <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                            <SelectedTable\n                                selectedBaselineContent={ selectedBaselineContent }\n                                entities={ entities }\n                                selectedHSPContent={ selectedHSPContent }\n                                findType={ this.findType }\n                                handleDeselect={ this.handleDeselect }\n                                selectedSystemContent={ selectedSystemContent }\n                            />\n                        </div> }\n                    >\n                        <a onClick={ () => this.onToggle() }>\n                            Selected ({ this.findSelected() })\n                        </a>\n                    </Popover>\n                </span>\n            </React.Fragment>\n        );\n    }\n}\n\nSelectedBasket.propTypes = {\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    entities: PropTypes.object,\n    isVisible: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    selectedSystemContent: PropTypes.array,\n    selectEntity: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    toggleBasketVisible: PropTypes.func\n};\n\nexport default SelectedBasket;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { BlueprintIcon, ServerIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\nimport { addNewListener } from '../../store';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport SelectedBasket from './SelectedBasket/SelectedBasket';\nimport DriftTooltip from '../DriftTooltip/DriftTooltip';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from '../SystemsTable/actions';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            systemColumns: this.buildSystemColumns(this.props.permissions),\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ],\n            basketIsVisible: false\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: ({ data }) => {\n                this.props.addSystemModalOpened ? this.systemContentSelect(data) : null;\n            }\n        });\n    }\n\n    buildSystemColumns(permissions) {\n        return [\n            { key: 'display_name', props: { width: 20 }, title: 'Name' },\n            { key: 'tags', props: { width: 10, isStatic: true }, title: 'Tags' },\n            { key: 'updated', props: { width: 10 }, title: 'Last seen' },\n            ...permissions.hspRead ? [{ key: 'historical_profiles', props: { width: 10, isStatic: true }, title: 'Historical profiles' }] : []\n        ];\n    }\n\n    createContent = (id, content, body, name) => {\n        return {\n            id,\n            icon: <DriftTooltip\n                content={ content }\n                body={ body }\n            />,\n            name\n        };\n    }\n\n    /*eslint-disable camelcase*/\n    componentDidUpdate(prevProps) {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectedBaselineContent, selectedHSPContent, selectedSystemContent, systems } = this.props;\n        let newSelectedSystems = [];\n        let newSelectedBaselines = [];\n\n        if (!prevProps.addSystemModalOpened && this.props.addSystemModalOpened) {\n            this.setSelectedContent();\n        }\n\n        if ((baselines.length || historicalProfiles.length || systems.length)\n            && (!selectedBaselineContent.length && !selectedHSPContent.length && !selectedSystemContent.length)) {\n            newSelectedSystems = systems.map(function(system) {\n                return this.createContent(system.id, 'System', <ServerIcon />, system.display_name);\n            }.bind(this));\n\n            handleSystemSelection(newSelectedSystems, true);\n\n            newSelectedBaselines = baselines.map(function(baseline) {\n                return this.createContent(baseline.id, 'Baseline', <BlueprintIcon />, baseline.display_name);\n            }.bind(this));\n\n            handleBaselineSelection(newSelectedBaselines, true);\n\n            historicalProfiles.forEach(function(hsp) {\n                let content = {\n                    system_name: hsp.display_name,\n                    captured_date: hsp.updated,\n                    id: hsp.id,\n                    system_id: hsp.system_id\n                };\n\n                handleHSPSelection(content);\n            });\n        }\n    }\n    /*eslint-enable camelcase*/\n\n    toggleBasketVisible = () => {\n        const { basketIsVisible } = this.state;\n        const { disableSystemTable } = this.props;\n\n        disableSystemTable(!basketIsVisible);\n        this.setState({ basketIsVisible: !basketIsVisible });\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids;\n        let selectedContent = [];\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n\n            selectedContent = baselineTableData.map(function(item) {\n                return this.createContent(item[0], 'Baseline', <BlueprintIcon />, item[1]);\n            }.bind(this));\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n\n            selectedContent.push(\n                this.createContent(baselineTableData[rowId][0], 'Baseline', <BlueprintIcon />, baselineTableData[rowId][1])\n            );\n        }\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    findNotInComparison(basketContent, comparedContent) {\n        if (comparedContent.length === 0) {\n            return basketContent;\n        } else {\n            return basketContent.filter(basketItem => (\n                comparedContent.findIndex(comparedItem => (basketItem.id === comparedItem.id)) === -1\n            ));\n        }\n    }\n\n    setSelectedContent() {\n        const { baselines, handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles,\n            selectBaseline, selectedBaselineContent, selectedHSPContent, selectedSystemContent, selectHistoricProfiles,\n            systems } = this.props;\n\n        handleSystemSelection(this.findNotInComparison(selectedSystemContent, systems), false);\n        let baselinesToRemove = this.findNotInComparison(selectedBaselineContent, baselines);\n        handleBaselineSelection(baselinesToRemove, false);\n        baselinesToRemove.forEach(baseline => selectBaseline(baseline.id, false, 'COMPARISON'));\n        let hspsToRemove = this.findNotInComparison(selectedHSPContent, historicalProfiles);\n        hspsToRemove.forEach(hsp => handleHSPSelection(hsp));\n        selectHistoricProfiles(historicalProfiles.map(hsp => hsp.id));\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        this.setSelectedContent();\n        toggleAddSystemModal();\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, handleBaselineSelection, selectBaseline } = this.props;\n        let ids = [];\n        let selectedContent = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectedContent = baselineTableData.map(function(baseline) {\n            return this.createContent(baseline[0], 'Baseline', <BlueprintIcon />, baseline[1]);\n        }.bind(this));\n\n        selectBaseline(ids, isSelected, 'COMPARISON');\n        handleBaselineSelection(selectedContent, isSelected);\n    }\n\n    systemContentSelect = (data) => {\n        const { entities, handleSystemSelection, selectedSystemContent } = this.props;\n        let selectedSystems = [];\n\n        if (data.id === 0) {\n            if (data.bulk) {\n                selectedSystems = selectedSystemContent;\n            } else {\n                selectedSystems = entities.rows.map(function(row) {\n                    return this.createContent(row.id, 'System', <ServerIcon />, row.display_name);\n                }.bind(this));\n            }\n        } else {\n            if (!data.selected) {\n                selectedSystems = selectedSystemContent.filter(system => system.id === data.id);\n            } else {\n                entities.rows.forEach(function(row) {\n                    if (row.id === data.id) {\n                        selectedSystems.push({\n                            id: row.id,\n                            name: row.display_name,\n                            icon: <DriftTooltip\n                                content='System'\n                                body={ <ServerIcon /> }\n                            />\n                        });\n                    }\n                });\n            }\n        }\n\n        handleSystemSelection(selectedSystems, data.selected);\n    };\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, handleBaselineSelection, handleHSPSelection,\n            historicalProfiles, loading, entities, permissions, selectEntity, selectHistoricProfiles, selectedBaselineIds, selectedBaselineContent,\n            selectedHSPContent, selectedHSPIds, selectBaseline, selectedSystemContent, selectedSystemIds, setSelectedSystemIds,\n            totalBaselines } = this.props;\n        const { columns, basketIsVisible, systemColumns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ (entities?.selectedSystemIds?.length === 0 &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0)\n                                || basketIsVisible }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            isDisabled={ basketIsVisible }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Toolbar style={{ padding: '0px' }}>\n                        <ToolbarContent>\n                            <ToolbarItem variant='pagination'>\n                                <SelectedBasket\n                                    entities={ entities }\n                                    handleBaselineSelection={ handleBaselineSelection }\n                                    handleHSPSelection={ handleHSPSelection }\n                                    isVisible={ basketIsVisible }\n                                    selectBaseline={ selectBaseline }\n                                    selectedBaselineContent={ selectedBaselineContent }\n                                    selectedHSPContent={ selectedHSPContent }\n                                    selectedSystemContent={ selectedSystemContent }\n                                    selectEntity={ selectEntity }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    toggleBasketVisible={ this.toggleBasketVisible }\n                                />\n                            </ToolbarItem>\n                        </ToolbarContent>\n                    </Toolbar>\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ selectedSystemIds }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                permissions={ permissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                                onSystemSelect={ setSelectedSystemIds }\n                                systemColumns={ systemColumns }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='COMPARISON'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                permissions={ permissions }\n                                kebab={ false }\n                                basketIsVisible={ basketIsVisible }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    permissions: PropTypes.object,\n    globalFilterState: PropTypes.object,\n    selectedSystemIds: PropTypes.array,\n    setSelectedSystemIds: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    selectedSystemContent: PropTypes.array,\n    selectedBaselineContent: PropTypes.array,\n    selectedHSPContent: PropTypes.array,\n    handleSystemSelection: PropTypes.func,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    selectEntity: PropTypes.func,\n    disableSystemTable: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.comparisonTable.loading,\n        baselineTableData: state.baselinesTableState.comparisonTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState,\n        selectedHSPContent: state.addSystemModalState.selectedHSPContent,\n        selectedBaselineContent: state.addSystemModalState.selectedBaselineContent,\n        selectedSystemContent: state.addSystemModalState.selectedSystemContent\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        selectEntity: (id, isSelected) => dispatch({ type: 'SELECT_ENTITY', payload: { id, isSelected }}),\n        setSelectedSystemIds: (selectedSystemIds) => dispatch(addSystemModalActions.setSelectedSystemIds(selectedSystemIds)),\n        disableSystemTable: (isDisabled) => dispatch(systemsTableActions.disableSystemTable(isDisabled))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, permissions, referenceId, removeSystem, selectedBaselineIds,\n            selectedHSPIds, selectHistoricProfiles, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { permissions.hspRead &&\n                                (item.type === 'system' || item.type === 'historical-system-profile')\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    systemName={ item.display_name }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                    selectedHSPIds={ selectedHSPIds }\n                                    selectHistoricProfiles={ selectHistoricProfiles }\n                                    selectedBaselineIds={ selectedBaselineIds }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool,\n    masterList: PropTypes.array,\n    permissions: PropTypes.object,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    selectedBaselineIds: PropTypes.array\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        if (!this.systemIds.length) {\n            this.systemIds = this.props.systems.map(system => system.id);\n        } else {\n            this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n            this.systemIds = this.systemIds.filter(item => item !== undefined);\n        }\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        if (!this.baselineIds.length) {\n            this.baselineIds = this.props.baselines.map(baseline => baseline.id);\n        } else {\n            this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n            this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n            this.props.setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        }\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        if (!this.HSPIds.length) {\n            this.HSPIds = this.props.historicalProfiles.map(hsp => hsp.id);\n        } else {\n            this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n            this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n            selectHistoricProfiles(this.HSPIds);\n        }\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        if (referenceId) {\n            updateReferenceId(referenceId === null ? undefined : referenceId);\n        }\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { handleBaselineSelection, handleHSPSelection, handleSystemSelection, historicalProfiles, isFirstReference,\n            referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId = referenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n            handleSystemSelection([ item ], false);\n\n            let hspsToRemove = historicalProfiles.filter(profile => profile.system_id === item.id);\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n            hspsToRemove.forEach(function(hsp) {\n                handleHSPSelection(hsp);\n            });\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n            handleBaselineSelection([ item ], false);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n            handleHSPSelection(item);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n\n    }\n\n    async fetchCompare(systemIds = [], baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'COMPARISON');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                let rowValue = subFactItem.systems.filter(cell => cell.value !== '')[0].value;\n                                rows.push(<tr\n                                    className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }\n                                    data-ouia-component-type='PF4/TableRow'\n                                    data-ouia-component-id={ 'comparison-table-row-multivalue-' + comparison.name + '-' + rowValue }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, permissions, referenceId, selectedBaselineIds, selectedHSPIds,\n            selectHistoricProfiles, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                permissions={ permissions }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                                selectedHSPIds={ selectedHSPIds }\n                                selectHistoricProfiles={ selectHistoricProfiles }\n                                selectedBaselineIds={ selectedBaselineIds }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading, permissions } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    permissions={ permissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    permissions: PropTypes.object,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    hasHSPReadPermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type === 'State') {\n            if (id === '') {\n                this.clearAllStateChips();\n            } else {\n                stateFilters.forEach(async function(stateFilter) {\n                    if (stateFilter.display === id) {\n                        await addStateFilter(stateFilter);\n                    }\n                });\n            }\n        } else {\n            if (id === '') {\n                await clearAllFactFilters();\n            } else if (activeFactFilters.includes(id)) {\n                await handleFactFilter(id);\n            } else {\n                await filterByFact('');\n            }\n        }\n\n        setHistory();\n    }\n\n    resetFilters = async () => {\n        const { resetComparisonFilters, setHistory } = this.props;\n\n        await resetComparisonFilters();\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('COMPARISON');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading, page, perPage,\n            setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.resetFilters } clearFiltersButtonText='Reset filters'>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func,\n    resetComparisonFilters: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { addSystemModalActions } from '../AddSystemModal/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.props.loadEntities();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location.search !== '' && this.props.location.search === '') {\n            this.setHistory();\n        }\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, factSort, filterByFact, handleFactFilter, historicalProfiles, handleBaselineSelection,\n            handleHSPSelection, handleSystemSelection, history, loading, page, perPage, referenceId, resetComparisonFilters, selectedBaselineIds,\n            selectedHSPIds, stateFilters, stateSort, systems, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            { !emptyState\n                                                ? <DriftToolbar\n                                                    loading={ loading }\n                                                    history={ history }\n                                                    page={ page }\n                                                    perPage={ perPage }\n                                                    totalFacts={ totalFacts }\n                                                    updatePagination={ updatePagination }\n                                                    clearComparison={ clearComparison }\n                                                    clearComparisonFilters={ clearComparisonFilters }\n                                                    exportToCSV={ exportToCSV }\n                                                    updateReferenceId={ updateReferenceId }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearSelectedBaselines={ clearSelectedBaselines }\n                                                    factFilter={ factFilter }\n                                                    filterByFact={ filterByFact }\n                                                    stateFilters={ stateFilters }\n                                                    addStateFilter={ addStateFilter }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    clearAllFactFilters={ clearAllFactFilters }\n                                                    setHistory={ this.setHistory }\n                                                    resetComparisonFilters={ resetComparisonFilters }\n                                                />\n                                                : null\n                                            }\n                                            <DriftTable\n                                                updateReferenceId={ updateReferenceId }\n                                                error={ error }\n                                                isFirstReference={ isFirstReference }\n                                                setIsFirstReference={ this.setIsFirstReference }\n                                                clearComparison= { clearComparison }\n                                                handleBaselineSelection={ handleBaselineSelection }\n                                                handleHSPSelection={ handleHSPSelection }\n                                                handleSystemSelection={ handleSystemSelection }\n                                                permissions={ value.permissions }\n                                                handleFactFilter={ handleFactFilter }\n                                                addStateFilter={ addStateFilter }\n                                                stateFilters={ stateFilters }\n                                                activeFactFilters={ activeFactFilters }\n                                                factFilter={ factFilter }\n                                                setHistory={ this.setHistory }\n                                                factSort={ factSort }\n                                                stateSort={ stateSort }\n                                                referenceId={ referenceId }\n                                                systems={ systems }\n                                                baselines={ baselines }\n                                                historicalProfiles={ historicalProfiles }\n                                                selectedHSPIds={ selectedHSPIds }\n                                                selectedBaselineIds={ selectedBaselineIds }\n                                            />\n                                            { !emptyState && !loading ?\n                                                <Toolbar className=\"drift-toolbar\">\n                                                    <ToolbarGroup className=\"pf-c-pagination\">\n                                                        <ToolbarItem>\n                                                            <TablePagination\n                                                                page={ page }\n                                                                perPage={ perPage }\n                                                                total={ totalFacts }\n                                                                isCompact={ false }\n                                                                updatePagination={ updatePagination }\n                                                                widgetId='drift-pagination-bottom'\n                                                                ouiaId='drift-pagination-bottom'\n                                                                variant={ PaginationVariant.bottom }\n                                                            />\n                                                        </ToolbarItem>\n                                                    </ToolbarGroup>\n                                                </Toolbar>\n                                                : null\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    loadEntities: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    handleBaselineSelection: PropTypes.func,\n    handleHSPSelection: PropTypes.func,\n    handleSystemSelection: PropTypes.func,\n    resetComparisonFilters: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters()),\n        loadEntities: () => dispatch({ type: 'LOAD_ENTITIES' }),\n        handleSystemSelection: (content, isSelected) => dispatch(addSystemModalActions.handleSystemSelection(content, isSelected)),\n        handleBaselineSelection: (content, isSelected) => dispatch(addSystemModalActions.handleBaselineSelection(content, isSelected)),\n        handleHSPSelection: (content) => dispatch(addSystemModalActions.handleHSPSelection(content)),\n        resetComparisonFilters: () => dispatch(compareActions.resetComparisonFilters())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedBaselineIds: state.baselinesTableState.comparisonTable.selectedBaselineIds\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}