{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["EditBaselineToolbar","props","handleAddFact","bind","this","setFactData","toggleFactModal","factName","factValue","fact","Toolbar","className","ToolbarGroup","ToolbarItem","Button","variant","onClick","Component","propTypes","PropTypes","func","connect","dispatch","editBaselineActions","factData","FactModal","cancelFact","confirmModal","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","state","isCategory","isAddFact","isEditFact","handleChange","checked","setState","handleNewName","value","handleNewValue","baselineData","patchBaseline","newAPIBody","addFact","editFact","id","newFactData","editBaselineHelpers","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","isDisabled","error","Form","FormGroup","isRequired","helperTextInvalid","hasOwnProperty","detail","isValid","fieldId","TextInput","type","placeholder","isSubFact","Fragment","title","factModalOpened","Modal","isOpen","onClose","width","isFooterLeftAligned","actions","key","bool","string","obj","editBaselineState","baselineId","newBaselineBody","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","editNameModalOpened","object","EditBaseline","fetchBaselineId","renderBreadcrumb","goToBaselinesList","window","insights","chrome","auth","getUser","params","match","fetchBaselineData","history","clearBaselineData","push","Breadcrumb","BreadcrumbItem","isActive","rows","rowData","i","size","SkeletonSize","md","expandedRows","includes","expandRow","row","values","renderExpandableRowButton","renderKebab","forEach","subFact","facts","baseline_facts","undefined","length","renderRowData","renderHeaderRow","renderRows","renderLoadingRows","lg","Card","CardBody","renderTable","any","baselineDataLoading","editBaselineTableData","array","withRouter","baselinesTableActions","baselineUUID"],"mappings":"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","file":"js/6-b11097704ca348f3ab50.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAddFact = this.handleAddFact.bind(this);\n    }\n\n    handleAddFact() {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Toolbar className='display-margin'>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <Button\n                            variant='primary'\n                            onClick={ this.handleAddFact }>\n                            Add fact\n                        </Button>\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineToolbar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nclass FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            await patchBaseline(baselineData.id, newAPIBody);\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    renderFactInput() {\n        const { error } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact name'>\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { error } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact value'>\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody = <React.Fragment>\n            { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n            { this.renderFactInput() }\n            <br></br>\n            { isCategory ? null : this.renderValueInput() }\n        </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.obj,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.obj,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.obj\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        /*eslint-disable camelcase*/\n        this.updateBaselineName(baselineData.display_name);\n        /*eslint-enable camelcase*/\n        toggleEditNameModal();\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    isValid={ !error.hasOwnProperty('status') }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { editNameModalOpened } = this.props;\n\n        return (\n            <Modal\n                className='pf-c-modal-box'\n                title=\"Edit title\"\n                isOpen={ editNameModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    baselineData: PropTypes.object,\n    editNameModalOpened: PropTypes.bool,\n    toggleEditNameModal: PropTypes.func,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.obj\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        editNameModalOpened: state.editBaselineState.editNameModalOpened,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\n\nclass EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData();\n        history.push('/baselines');\n    }\n\n    renderBreadcrumb() {\n        const { baselineData } = this.props;\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{ baselineData.display_name }</BreadcrumbItem>\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    renderRowData(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.values) {\n            row.push(<td className={ expandedRows.includes(fact.name) ? 'nested-fact' : '' }>\n                { this.renderExpandableRowButton(fact.name) } { fact.name }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact.name, fact, isCategory: true }));\n            rows.push(<tr>{ row }</tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.values.forEach(function(subFact) {\n                    row = [];\n                    row.push(<td className=\"nested-fact\">\n                        <p className=\"child-row\">{ subFact.name }</p>\n                    </td>);\n                    row.push(<td>{ subFact.value }</td>);\n                    row.push(editBaselineHelpers.renderKebab({ factName: subFact.name, factValue: subFact.value, fact, isSubFact: true }));\n                    rows.push(<tr>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact.name }</td>);\n            row.push(<td>{ fact.value }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact.name, factValue: fact.value, fact }));\n            rows.push(<tr>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { baselineData } = this.props;\n        /*eslint-disable camelcase*/\n        let facts = baselineData.baseline_facts;\n        /*eslint-enable camelcase*/\n        let rows = [];\n        let rowData = [];\n\n        if (facts !== undefined) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderTable() {\n        const { baselineData } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-compact ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody>\n                    { baselineData !== undefined\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, factModalOpened, toggleEditNameModal } = this.props;\n\n        return (\n            <React.Fragment>\n                { baselineData !== undefined\n                    ? <React.Fragment>\n                        <EditBaselineNameModal />\n                        <PageHeader>\n                            { this.renderBreadcrumb() }\n                            <PageHeaderTitle title={ baselineData.display_name }/>\n                            <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => toggleEditNameModal() } />\n                        </PageHeader>\n                    </React.Fragment>\n                    : <PageHeader>\n                        <div><Skeleton size={ SkeletonSize.lg } /></div>\n                    </PageHeader>\n                }\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            { factModalOpened\n                                ? <FactModal />\n                                : null\n                            }\n                            <EditBaselineToolbar />\n                            { this.renderTable() }\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    toggleEditNameModal: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: () => dispatch(baselinesTableActions.clearBaselineData()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}