{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/redux/index.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaseline/CreateBaseline.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/BaselinesKebab.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["toggleCreateBaseline","type","types","CREATE_NEW_BASELINE","CreateBaselineButton","props","createBaseline","bind","this","history","addSystemModalOpened","toggleAddSystemModal","location","pathname","push","Button","variant","onClick","Component","propTypes","PropTypes","func","object","bool","withRouter","connect","state","addSystemModalState","dispatch","baselinesPageActions","addSystemModalActions","CreateBaseline","submitBaselineName","baselineName","updateBaselineName","value","setState","newBaselineObject","display_name","baseline_facts","baselineData","id","Fragment","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","size","EmptyStateBody","InputGroup","TextInput","onChange","aria-label","obj","baselinesTableState","baselinesTableActions","exportToCSV","exportType","data","exportData","baselineRowData","EXPORT_BASELINES_LIST_TO_CSV","payload","BaselinesKebab","kebabOpened","exportSelect","toggleKebab","baselineTableData","dropdownItems","DropdownItem","key","component","Dropdown","style","float","className","toggle","KebabToggle","onToggle","isOpen","isPlain","array","string","baselinesKebabActions","BaselinesPage","window","insights","chrome","auth","getUser","Toolbar","ToolbarGroup","ToolbarItem","BaselinesSearchBar","AddCircleOIcon","CardBody","renderToolbar","BaselinesTable","kebab","creatingNewBaseline","fullBaselineListData","baselineListLoading","title","Card","length","renderEmptyState","renderTable","baselinesPageState"],"mappings":"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","file":"js/6-5a364e278ae3b403ed37.js","sourcesContent":["import types from './types';\n\nfunction toggleCreateBaseline() {\n    return {\n        type: types.CREATE_NEW_BASELINE\n    };\n}\n\nexport default {\n    toggleCreateBaseline\n};\n","export { default as baselinesPageActions } from './actions';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core';\n\nimport { baselinesPageActions } from '../redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nclass CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n        this.createBaseline = this.createBaseline.bind(this);\n    }\n\n    createBaseline() {\n        const { history, toggleCreateBaseline, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaseline();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.createBaseline }>\n                Create baseline\n            </Button>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaseline: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaseline: () => dispatch(baselinesPageActions.toggleCreateBaseline()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    EmptyStateBody,\n    InputGroup,\n    TextInput,\n    Title } from '@patternfly/react-core';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nimport { baselinesPageActions } from '../redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nclass CreateBaseline extends Component {\n    constructor(props) {\n        super(props);\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: ''\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName } = this.state;\n        const { createBaseline, toggleCreateBaseline } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName, baseline_facts: []};\n        /*eslint-enable camelcase*/\n\n        await createBaseline(newBaselineObject);\n        this.props.history.push('baselines/' + this.props.baselineData.id);\n        toggleCreateBaseline();\n    }\n\n    render() {\n        const { baselineName } = this.state;\n\n        return (\n            <React.Fragment>\n                <EmptyState variant={ EmptyStateVariant.full }>\n                    <EmptyStateIcon icon={ CubesIcon } />\n                    <Title headingLevel=\"h5\" size=\"lg\">\n                        Create baseline\n                    </Title>\n                    <EmptyStateBody>\n                        Create a baseline name\n                        <InputGroup>\n                            <TextInput value={ baselineName } type=\"text\" onChange={ this.updateBaselineName } aria-label=\"baseline name\" />\n                            <Button onClick={ this.submitBaselineName }>Submit</Button>\n                        </InputGroup>\n                    </EmptyStateBody>\n                </EmptyState>\n            </React.Fragment>\n        );\n    }\n}\n\nCreateBaseline.propTypes = {\n    toggleCreateBaseline: PropTypes.func,\n    createBaseline: PropTypes.func,\n    baselineData: PropTypes.obj,\n    history: PropTypes.obj\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaseline: () => dispatch(baselinesPageActions.toggleCreateBaseline()),\n        createBaseline: (newBaselineObject) => dispatch(baselinesTableActions.createBaseline(newBaselineObject))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaseline));\n","import types from './types';\n\nfunction exportToCSV(exportType, baselineData, baselineRowData = []) {\n    let data = {\n        exportType,\n        exportData: baselineData,\n        baselineRowData\n    };\n\n    return {\n        type: types.EXPORT_BASELINES_LIST_TO_CSV,\n        payload: data\n    };\n}\n\nexport default {\n    exportToCSV\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { baselinesKebabActions } from './redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nclass BaselinesKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.exportSelect = this.exportSelect.bind(this);\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    exportSelect() {\n        const { exportType, baselineTableData, baselineData, baselineRowData } = this.props;\n        this.toggleKebab();\n        if (exportType === 'baseline list') {\n            this.props.exportToCSV(exportType, baselineTableData);\n        } else if (exportType === 'baselines data') {\n            this.props.exportToCSV(exportType, baselineData, baselineRowData);\n        }\n    }\n\n    render() {\n        const { kebabOpened } = this.state;\n        const dropdownItems = [\n            <DropdownItem key=\"export\" component=\"button\" onClick={ this.exportSelect }>Export as CSV</DropdownItem>\n        ];\n        return (\n            <Dropdown\n                style={ { float: 'left' } }\n                className={ 'action-kebab' }\n                toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nBaselinesKebab.propTypes = {\n    exportToCSV: PropTypes.func,\n    baselineTableData: PropTypes.array,\n    exportType: PropTypes.string,\n    baselineData: PropTypes.array,\n    baselineRowData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineTableData: state.baselinesTableState.baselineTableData,\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: (exportType, exportData, baselineRowData) => {\n            dispatch(baselinesKebabActions.exportToCSV(exportType, exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesKebab));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaseline from './CreateBaseline/CreateBaseline';\nimport BaselinesKebab from './BaselinesKebab/BaselinesKebab';\nimport BaselinesSearchBar from '../BaselinesSearchBar/BaselinesSearchBar';\n\nclass BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    renderToolbar() {\n        return (\n            <Toolbar className=\"drift-toolbar\">\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <BaselinesSearchBar />\n                    </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <CreateBaselineButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <BaselinesKebab exportType='baseline list'/>\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    }\n\n    renderEmptyState() {\n        return (\n            <center>\n                <EmptyState>\n                    <EmptyStateIcon icon={ AddCircleOIcon } />\n                    <br></br>\n                    <Title size=\"lg\">No baselines</Title>\n                    <EmptyStateBody>\n                        You currently have no baselines displayed.\n                        <br/>\n                        Please create a baseline to use in your System Comparison analysis.\n                    </EmptyStateBody>\n                    <CreateBaselineButton />\n                </EmptyState>\n            </center>\n        );\n    }\n\n    renderTable() {\n        return (\n            <CardBody>\n                { this.renderToolbar() }\n                <div>\n                    <BaselinesTable kebab='true'/>\n                </div>\n            </CardBody>\n        );\n    }\n\n    render() {\n        const { creatingNewBaseline, fullBaselineListData, baselineListLoading } = this.props;\n\n        /*eslint-disable camelcase*/\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        { creatingNewBaseline\n                            ? <CardBody>\n                                <div>\n                                    <CreateBaseline />\n                                </div>\n                            </CardBody>\n                            : (fullBaselineListData.length === 0 && baselineListLoading === false)\n                                ? this.renderEmptyState() : this.renderTable()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n        /*eslint-enable camelcase*/\n    }\n}\n\nBaselinesPage.propTypes = {\n    baselineListLoading: PropTypes.bool,\n    creatingNewBaseline: PropTypes.bool,\n    fullBaselineListData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineListLoading: state.baselinesTableState.baselineListLoading,\n        creatingNewBaseline: state.baselinesPageState.creatingNewBaseline,\n        fullBaselineListData: state.baselinesTableState.fullBaselineListData\n    };\n}\n\nexport default connect(mapStateToProps, null)(BaselinesPage);\n"],"sourceRoot":""}