{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["EditBaselineKebab","props","isDisabled","editBaselineTableData","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","this","DropdownItem","key","component","onClick","length","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","EditBaselineToolbar","handleAddFact","setFactData","toggleFactModal","factName","factValue","Toolbar","className","ToolbarGroup","ToolbarItem","Button","variant","func","dispatch","editBaselineActions","factData","FactModal","cancelFact","confirmModal","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","checked","handleNewName","value","handleNewValue","baselineData","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","error","Form","FormGroup","isRequired","helperTextInvalid","hasOwnProperty","detail","isValid","fieldId","TextInput","type","placeholder","isSubFact","title","factModalOpened","Modal","onClose","width","isFooterLeftAligned","actions","bool","string","object","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","editNameModalOpened","EditBaseline","onSelect","isSelected","event","selectFact","facts","target","selectAll","push","FACT_ID","Number","renderCheckbox","FACT_VALUE","fetchBaselineId","renderBreadcrumb","goToBaselinesList","window","insights","chrome","auth","getUser","prevProps","expandedRows","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","isActive","rows","rowData","i","size","SkeletonSize","md","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","undefined","renderRowData","renderHeaderRow","renderRows","renderLoadingRows","lg","Card","CardBody","renderTable","any","baselineDataLoading","withRouter","baselinesTableActions"],"mappings":"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","file":"js/6-ea88c5f76f9d59eaafae.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAddFact = this.handleAddFact.bind(this);\n    }\n\n    handleAddFact() {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Toolbar className='display-margin'>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <Button\n                            variant='primary'\n                            onClick={ this.handleAddFact }>\n                            Add fact\n                        </Button>\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <EditBaselineKebab />\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineToolbar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nclass FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    renderFactInput() {\n        const { error } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact name'>\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { error } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact value'>\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody = <React.Fragment>\n            { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n            { this.renderFactInput() }\n            <br></br>\n            { isCategory ? null : this.renderValueInput() }\n        </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        /*eslint-disable camelcase*/\n        this.updateBaselineName(baselineData.display_name);\n        /*eslint-enable camelcase*/\n        toggleEditNameModal();\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    isValid={ !error.hasOwnProperty('status') }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { editNameModalOpened } = this.props;\n\n        return (\n            <Modal\n                className='pf-c-modal-box'\n                title=\"Edit title\"\n                isOpen={ editNameModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    baselineData: PropTypes.object,\n    editNameModalOpened: PropTypes.bool,\n    toggleEditNameModal: PropTypes.func,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        editNameModalOpened: state.editBaselineState.editNameModalOpened,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\n\nclass EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.expandedRows.length < this.props.expandedRows.length) {\n            this.setState({ expandedRows: this.props.expandedRows });\n        }\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData();\n        history.push('/baselines');\n    }\n\n    renderBreadcrumb() {\n        const { baselineData } = this.props;\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{ baselineData.display_name }</BreadcrumbItem>\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr key='edit-baseline-table-header'>\n                <td className='pf-c-table__check'>{ this.renderCheckbox([]) }</td>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        if (event.target.name === 'select-all') {\n            this.setState({ selectAll: isSelected });\n            editBaselineTableData.forEach(function(fact) {\n                facts.push(fact[FACT_ID]);\n                if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        facts.push(subFact[FACT_ID]);\n                    });\n                }\n            });\n        } else {\n            let factData;\n            let id = Number(event.target.name);\n\n            editBaselineTableData.forEach(function(fact) {\n                if (fact[FACT_ID] === id) {\n                    factData = fact;\n                } else if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        if (subFact[FACT_ID] === id) {\n                            factData = subFact;\n                        }\n                    });\n                }\n            });\n\n            facts = [ factData[0] ];\n\n            if (editBaselineHelpers.isCategory(factData)) {\n                editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        const { selectAll } = this.props;\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        } else {\n            return (\n                <Checkbox\n                    isChecked={ selectAll }\n                    onChange={ this.onSelect }\n                    id='select-all'\n                    name='select-all'\n                />\n            );\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        row.push(<td\n            className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n            { this.renderCheckbox(fact) }\n        </td>);\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>);\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts !== undefined) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderTable() {\n        const { baselineData } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-compact ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { baselineData !== undefined\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, factModalOpened, toggleEditNameModal } = this.props;\n\n        return (\n            <React.Fragment>\n                { baselineData !== undefined\n                    ? <React.Fragment>\n                        <EditBaselineNameModal />\n                        <PageHeader>\n                            { this.renderBreadcrumb() }\n                            <PageHeaderTitle title={ baselineData.display_name }/>\n                            <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => toggleEditNameModal() } />\n                        </PageHeader>\n                    </React.Fragment>\n                    : <PageHeader>\n                        <div><Skeleton size={ SkeletonSize.lg } /></div>\n                    </PageHeader>\n                }\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            { factModalOpened\n                                ? <FactModal />\n                                : null\n                            }\n                            <EditBaselineToolbar />\n                            { this.renderTable() }\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    toggleEditNameModal: PropTypes.func,\n    selectFact: PropTypes.func,\n    selectAll: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        selectAll: state.editBaselineState.selectAll\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: () => dispatch(baselinesTableActions.clearBaselineData()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal()),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}