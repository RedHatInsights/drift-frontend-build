{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/BaselinesKebab.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["toggleCreateBaselineModal","type","types","TOGGLE_CREATE_BASELINE_MODAL","CreateBaselineButton","props","createBaseline","history","addSystemModalOpened","toggleAddSystemModal","location","pathname","push","Button","variant","onClick","this","Component","propTypes","PropTypes","func","object","bool","withRouter","connect","state","addSystemModalState","dispatch","createBaselineModalActions","addSystemModalActions","CreateBaselineModal","cancelModal","updateBaselineName","renderModalBody","modalBody","baselineName","copyBaselineChecked","copySystemChecked","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","TextInput","className","value","placeholder","onChange","isValid","aria-label","submitBaselineName","bind","fromScratchChecked","setState","handleChecked","_","event","currentTarget","clearSelectedBaselines","selectedBaselineIds","entities","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","baselineData","id","Radio","isChecked","label","BaselinesTable","createBaselineModal","SystemsTable","createBaselineModalOpened","Modal","title","isOpen","onClose","width","actions","key","obj","array","createBaselineModalState","baselinesTableState","uuid","baselinesTableActions","exportToCSV","exportType","data","exportData","baselineRowData","EXPORT_BASELINES_LIST_TO_CSV","payload","BaselinesKebab","kebabOpened","exportSelect","toggleKebab","baselineTableData","dropdownItems","DropdownItem","component","Dropdown","style","float","toggle","KebabToggle","onToggle","isPlain","string","baselinesKebabActions","BaselinesPage","window","insights","chrome","auth","getUser","Toolbar","ToolbarGroup","ToolbarItem","BaselinesSearchBar","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","size","EmptyStateBody","CardBody","renderToolbar","kebab","emptyState","baselineListLoading","Card","renderEmptyState","renderTable","fullBaselineListData"],"mappings":"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","file":"js/6-bf28d3b79747c49ab66b.js","sourcesContent":["import types from './types';\n\nfunction toggleCreateBaselineModal() {\n    return {\n        type: types.TOGGLE_CREATE_BASELINE_MODAL\n    };\n}\n\nexport default {\n    toggleCreateBaselineModal\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from '../CreateBaselineModal/redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nclass CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    createBaseline = () => {\n        const { history, toggleCreateBaselineModal, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaselineModal();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.createBaseline }>\n                Create baseline\n            </Button>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaselineModal: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, Radio, TextInput } from '@patternfly/react-core';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nclass CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const { value } = event.currentTarget;\n\n            if (value === 'fromScratchChecked') {\n                this.props.clearSelectedBaselines();\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.props.clearSelectedBaselines();\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds, history, entities } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        if (fromScratchChecked) {\n            newBaselineObject.baseline_facts = [];\n            await createBaseline(newBaselineObject);\n        } else if (selectedBaselineIds.length === 1) {\n            newBaselineObject = { display_name: baselineName };\n            await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n        } else if (entities.selectedSystemIds.length === 1) {\n            newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n            await createBaseline(newBaselineObject);\n        }\n        /*eslint-enable camelcase*/\n\n        history.push('baselines/' + this.props.baselineData.id);\n        toggleCreateBaselineModal();\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal } = this.props;\n\n        this.updateBaselineName('');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable createBaselineModal='true' />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable selectedSystemIds={ [] } createBaselineModal={ true } />\n        </React.Fragment>\n        );\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <b>Baseline name</b>\n            <br></br>\n            <TextInput\n                className=\"fact-value\"\n                value={ baselineName }\n                type=\"text\"\n                placeholder=\"Baseline name\"\n                onChange={ this.updateBaselineName }\n                isValid={ baselineName !== '' ? true : false }\n                aria-label=\"baseline name\"\n            />\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"create-baseline-modal\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.submitBaselineName }>\n                        Create baseline\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    history: PropTypes.obj,\n    baselineData: PropTypes.obj,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.baselinesTableState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.selectedBaselineIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(baselinesTableActions.createBaseline(newBaselineObject, uuid)),\n        clearSelectedBaselines: () => dispatch(baselinesTableActions.clearSelectedBaselines())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import types from './types';\n\nfunction exportToCSV(exportType, baselineData, baselineRowData = []) {\n    let data = {\n        exportType,\n        exportData: baselineData,\n        baselineRowData\n    };\n\n    return {\n        type: types.EXPORT_BASELINES_LIST_TO_CSV,\n        payload: data\n    };\n}\n\nexport default {\n    exportToCSV\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { baselinesKebabActions } from './redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nclass BaselinesKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.exportSelect = this.exportSelect.bind(this);\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    exportSelect() {\n        const { exportType, baselineTableData, baselineData, baselineRowData } = this.props;\n        this.toggleKebab();\n        if (exportType === 'baseline list') {\n            this.props.exportToCSV(exportType, baselineTableData);\n        } else if (exportType === 'baselines data') {\n            this.props.exportToCSV(exportType, baselineData, baselineRowData);\n        }\n    }\n\n    render() {\n        const { kebabOpened } = this.state;\n        const dropdownItems = [\n            <DropdownItem key=\"export\" component=\"button\" onClick={ this.exportSelect }>Export as CSV</DropdownItem>\n        ];\n        return (\n            <Dropdown\n                style={ { float: 'left' } }\n                className={ 'action-kebab' }\n                toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nBaselinesKebab.propTypes = {\n    exportToCSV: PropTypes.func,\n    baselineTableData: PropTypes.array,\n    exportType: PropTypes.string,\n    baselineData: PropTypes.array,\n    baselineRowData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineTableData: state.baselinesTableState.baselineTableData,\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: (exportType, exportData, baselineRowData) => {\n            dispatch(baselinesKebabActions.exportToCSV(exportType, exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesKebab));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport BaselinesKebab from './BaselinesKebab/BaselinesKebab';\nimport BaselinesSearchBar from '../BaselinesSearchBar/BaselinesSearchBar';\n\nclass BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    renderToolbar() {\n        return (\n            <Toolbar className=\"drift-toolbar\">\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <BaselinesSearchBar />\n                    </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <CreateBaselineButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <BaselinesKebab exportType='baseline list'/>\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    }\n\n    renderEmptyState() {\n        return (\n            <center>\n                <EmptyState>\n                    <EmptyStateIcon icon={ AddCircleOIcon } />\n                    <br></br>\n                    <Title size=\"lg\">No baselines</Title>\n                    <EmptyStateBody>\n                        You currently have no baselines displayed.\n                        <br/>\n                        Please create a baseline to use in your System Comparison analysis.\n                    </EmptyStateBody>\n                    <CreateBaselineButton />\n                </EmptyState>\n            </center>\n        );\n    }\n\n    renderTable() {\n        return (\n            <CardBody>\n                { this.renderToolbar() }\n                <div>\n                    <BaselinesTable kebab='true'/>\n                </div>\n            </CardBody>\n        );\n    }\n\n    render() {\n        const { emptyState, baselineListLoading } = this.props;\n\n        /*eslint-disable camelcase*/\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        { (emptyState && baselineListLoading === false)\n                            ? this.renderEmptyState() : this.renderTable()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n        /*eslint-enable camelcase*/\n    }\n}\n\nBaselinesPage.propTypes = {\n    baselineListLoading: PropTypes.bool,\n    fullBaselineListData: PropTypes.array,\n    emptyState: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineListLoading: state.baselinesTableState.baselineListLoading,\n        fullBaselineListData: state.baselinesTableState.fullBaselineListData,\n        emptyState: state.baselinesTableState.emptyState\n    };\n}\n\nexport default connect(mapStateToProps, null)(BaselinesPage);\n"],"sourceRoot":""}