{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["EditBaselineKebab","props","isDisabled","editBaselineTableData","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","this","DropdownItem","key","component","onClick","length","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","EditBaselineToolbar","handleAddFact","setFactData","toggleFactModal","factName","factValue","Toolbar","className","ToolbarGroup","ToolbarItem","Button","variant","func","dispatch","editBaselineActions","factData","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","checked","handleNewName","value","handleNewValue","baselineData","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","error","Form","FormGroup","isRequired","helperTextInvalid","hasOwnProperty","detail","isValid","fieldId","onKeyPress","TextInput","type","placeholder","isSubFact","title","factModalOpened","Modal","onClose","width","isFooterLeftAligned","actions","bool","string","object","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","editNameModalOpened","EditBaseline","onSelect","isSelected","selectFact","facts","target","selectAll","push","FACT_ID","Number","renderCheckbox","FACT_VALUE","fetchBaselineId","renderBreadcrumb","goToBaselinesList","window","insights","chrome","auth","getUser","prevProps","expandedRows","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","isActive","rows","rowData","i","size","SkeletonSize","md","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","undefined","renderRowData","renderHeaderRow","renderRows","renderLoadingRows","lg","Card","CardBody","renderTable","any","baselineDataLoading","withRouter","baselinesTableActions"],"mappings":"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","file":"js/6-5303b753ac67f4bb55ed.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAddFact = this.handleAddFact.bind(this);\n    }\n\n    handleAddFact() {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Toolbar className='display-margin'>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <Button\n                            variant='primary'\n                            onClick={ this.handleAddFact }>\n                            Add fact\n                        </Button>\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <EditBaselineKebab />\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineToolbar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nclass FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { error } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { error } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody = <React.Fragment>\n            { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n            { this.renderFactInput() }\n            <br></br>\n            { isCategory ? null : this.renderValueInput() }\n        </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        /*eslint-disable camelcase*/\n        this.updateBaselineName(baselineData.display_name);\n        /*eslint-enable camelcase*/\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    isValid={ !error.hasOwnProperty('status') }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { editNameModalOpened } = this.props;\n\n        return (\n            <Modal\n                className='pf-c-modal-box'\n                title=\"Edit title\"\n                isOpen={ editNameModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineId: PropTypes.string,\n    baselineName: PropTypes.string,\n    baselineData: PropTypes.object,\n    editNameModalOpened: PropTypes.bool,\n    toggleEditNameModal: PropTypes.func,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        editNameModalOpened: state.editBaselineState.editNameModalOpened,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.expandedRows.length < this.props.expandedRows.length) {\n            this.setState({ expandedRows: this.props.expandedRows });\n        }\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData();\n        history.push('/baselines');\n    }\n\n    renderBreadcrumb() {\n        const { baselineData } = this.props;\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{ baselineData.display_name }</BreadcrumbItem>\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr key='edit-baseline-table-header'>\n                <td className='pf-c-table__check'>{ this.renderCheckbox([]) }</td>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        if (event.target.name === 'select-all') {\n            this.setState({ selectAll: isSelected });\n            editBaselineTableData.forEach(function(fact) {\n                facts.push(fact[FACT_ID]);\n                if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        facts.push(subFact[FACT_ID]);\n                    });\n                }\n            });\n        } else {\n            let factData;\n            let id = Number(event.target.name);\n\n            editBaselineTableData.forEach(function(fact) {\n                if (fact[FACT_ID] === id) {\n                    factData = fact;\n                } else if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        if (subFact[FACT_ID] === id) {\n                            factData = subFact;\n                        }\n                    });\n                }\n            });\n\n            facts = [ factData[0] ];\n\n            if (editBaselineHelpers.isCategory(factData)) {\n                editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        const { selectAll } = this.props;\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        } else {\n            return (\n                <Checkbox\n                    isChecked={ selectAll }\n                    onChange={ this.onSelect }\n                    id='select-all'\n                    name='select-all'\n                />\n            );\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        row.push(<td\n            className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n            { this.renderCheckbox(fact) }\n        </td>);\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>);\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts !== undefined) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        }\n\n        return rows;\n    }\n\n    renderTable() {\n        const { baselineData } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-compact ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { baselineData !== undefined\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { baselineData, factModalOpened, toggleEditNameModal } = this.props;\n\n        return (\n            <React.Fragment>\n                { baselineData !== undefined\n                    ? <React.Fragment>\n                        <EditBaselineNameModal />\n                        <PageHeader>\n                            { this.renderBreadcrumb() }\n                            <PageHeaderTitle title={ baselineData.display_name }/>\n                            <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => toggleEditNameModal() } />\n                        </PageHeader>\n                    </React.Fragment>\n                    : <PageHeader>\n                        <div><Skeleton size={ SkeletonSize.lg } /></div>\n                    </PageHeader>\n                }\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            { factModalOpened\n                                ? <FactModal />\n                                : null\n                            }\n                            <EditBaselineToolbar />\n                            { this.renderTable() }\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.object,\n    baselineDataLoading: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    toggleEditNameModal: PropTypes.func,\n    selectFact: PropTypes.func,\n    selectAll: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        selectAll: state.editBaselineState.selectAll\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: () => dispatch(baselinesTableActions.clearBaselineData()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        toggleEditNameModal: () => dispatch(editBaselineActions.toggleEditNameModal()),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}