{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","props","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","categoryMessage","factMessage","this","deleteFactModalHelpers","DropdownItem","key","component","onClick","length","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","Button","variant","func","dispatch","editBaselineActions","factData","EditBaselineToolbar","Toolbar","className","ToolbarGroup","ToolbarItem","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","checked","handleNewName","value","handleNewValue","baselineData","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","error","Form","FormGroup","isRequired","helperTextInvalid","hasOwnProperty","detail","isValid","fieldId","onKeyPress","TextInput","type","placeholder","isSubFact","title","factModalOpened","Modal","onClose","isFooterLeftAligned","actions","bool","string","object","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","EditBaseline","onSelect","isSelected","selectFact","target","selectAll","push","FACT_ID","Number","renderCheckbox","FACT_VALUE","fetchBaselineId","renderBreadcrumb","goToBaselinesList","clearErrorData","window","insights","chrome","auth","getUser","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","isActive","rows","rowData","i","size","SkeletonSize","md","expandedRows","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","renderRowData","colSpan","EmptyStateDisplay","text","button","renderHeaderRow","undefined","renderRows","renderLoadingRows","baselineDataLoading","lg","Card","CardBody","renderTable","any","withRouter","tableId","baselinesTableActions"],"mappings":"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","file":"js/6-7753f18a3c2ef61d9ec1.js","sourcesContent":["import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.handleAddFact }>\n                Add fact or category\n            </Button>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { /*Button, */Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\nimport { editBaselineActions } from '../redux';\n\nclass EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAddFact = this.handleAddFact.bind(this);\n    }\n\n    handleAddFact() {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Toolbar className='display-margin'>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <AddFactButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <EditBaselineKebab />\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineToolbar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nclass FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { error } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { error } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody = <React.Fragment>\n            { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n            { this.renderFactInput() }\n            <br></br>\n            { isCategory ? null : this.renderValueInput() }\n        </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    isValid={ !error.hasOwnProperty('status') }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened } = this.props;\n\n        return (\n            <Modal\n                className='small-modal-body'\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    renderBreadcrumb() {\n        const { baselineData } = this.props;\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{ baselineData.display_name }</BreadcrumbItem>\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr key='edit-baseline-table-header'>\n                <td className='pf-c-table__check'>{ this.renderCheckbox([]) }</td>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        if (event.target.name === 'select-all') {\n            this.setState({ selectAll: isSelected });\n            editBaselineTableData.forEach(function(fact) {\n                facts.push(fact[FACT_ID]);\n                if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        facts.push(subFact[FACT_ID]);\n                    });\n                }\n            });\n        } else {\n            let factData;\n            let id = Number(event.target.name);\n\n            editBaselineTableData.forEach(function(fact) {\n                if (fact[FACT_ID] === id) {\n                    factData = fact;\n                } else if (editBaselineHelpers.isCategory(fact)) {\n                    editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                        if (subFact[FACT_ID] === id) {\n                            factData = subFact;\n                        }\n                    });\n                }\n            });\n\n            facts = [ factData[0] ];\n\n            if (editBaselineHelpers.isCategory(factData)) {\n                editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        const { selectAll, editBaselineTableData } = this.props;\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        } else {\n            return (\n                <Checkbox\n                    isChecked={ selectAll }\n                    onChange={ this.onSelect }\n                    id='select-all'\n                    name='select-all'\n                    isDisabled={ editBaselineTableData.length === 0 ? true : false }\n                />\n            );\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        row.push(<td\n            className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n            { this.renderCheckbox(fact) }\n        </td>);\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>);\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        } else {\n            rows =\n                <td colSpan='3'>\n                    <EmptyStateDisplay\n                        title={ 'No facts' }\n                        text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                        button={ <AddFactButton /> }\n                    />\n                </td>;\n        }\n\n        return rows;\n    }\n\n    renderTable() {\n        const { baselineData } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-compact ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { baselineData !== undefined\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, factModalOpened, error } = this.props;\n\n        return (\n            <React.Fragment>\n                { baselineData !== undefined && !baselineDataLoading\n                    ? <React.Fragment>\n                        <EditBaselineNameModal\n                            baselineData={ baselineData }\n                            modalOpened={ modalOpened }\n                            toggleEditNameModal={ this.toggleEditNameModal }\n                            error={ error }\n                        />\n                        <PageHeader>\n                            { this.renderBreadcrumb() }\n                            <PageHeaderTitle title={ baselineData ? baselineData.display_name : '' }/>\n                            <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } />\n                        </PageHeader>\n                    </React.Fragment>\n                    : <PageHeader>\n                        <div><Skeleton size={ SkeletonSize.lg } /></div>\n                    </PageHeader>\n                }\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            { factModalOpened\n                                ? <FactModal />\n                                : null\n                            }\n                            <EditBaselineToolbar />\n                            { this.renderTable() }\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.array,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    selectAll: PropTypes.bool,\n    clearErrorData: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        selectAll: state.editBaselineState.selectAll,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}