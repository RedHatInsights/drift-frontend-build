{"version":3,"sources":["webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./src/Utilities/SetHistory.js","webpack:///./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack:///./src/SmartComponents/StateIcon/StateIcon.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack:///./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack:///./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack:///./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack:///./src/SmartComponents/DriftPage/DriftFilterChips/DriftFilterChips.js","webpack:///./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack:///./src/SmartComponents/DriftPage/DriftPage.js"],"names":["strictUriEncode","objectAssign","encode","value","opts","strict","encodeURIComponent","exports","extract","str","split","parse","formatter","result","arrayFormat","key","accumulator","exec","replace","undefined","concat","parserForArrayFormat","ret","Object","create","trim","forEach","param","parts","shift","val","length","join","decodeURIComponent","keys","sort","reduce","Boolean","Array","isArray","keysSorter","input","a","b","Number","map","stringify","obj","index","encoderForArrayFormat","slice","val2","push","filter","x","module","c","charCodeAt","toString","toUpperCase","setHistory","history","systemIds","baselineIds","hspIds","referenceId","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","item","onBulkSelect","ids","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","historicalProfiles","loading","totalBaselines","Fragment","Modal","width","isOpen","onClose","actions","Button","variant","onClick","isDisabled","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","hasMultiSelect","BaselinesTable","tableId","tableData","Component","propTypes","showModal","PropTypes","bool","number","func","object","array","baselines","string","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","toggleAddSystemModal","newActiveTab","baselinesTableActions","StateIcon","factState","color","height","icon","ReferenceSelector","isReference","updateReferenceId","className","DriftTable","shiftReferenceToFront","masterList","systemToMove","findIndex","splice","unshift","fetchCompare","HSPIds","emptyStateMessage","isFirstReference","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","removeSystem","formatDate","fullHistoricalSystemList","historicalGroups","type","hsp","hasOwnProperty","system_id","hsps","find","indexOf","entries","location","setSelectedBaselines","selectHistoricProfiles","dateString","moment","utc","format","profile","reference","setState","facts","rows","fact","renderRow","rowData","i","size","SkeletonSize","md","row","sys","comparisons","expandedRows","includes","name","renderExpandableRowButton","comparison","renderRowChild","findSystem","typeIcon","header-id","display_name","system_profile_exists","Tooltip","position","content","last_updated","updated","HistoricalProfilesDropdown","dropdownDirection","DropdownDirection","down","hasCompareButton","ASC","DESC","sortType","toggleFactSort","toggleStateSort","factSort","stateSort","toggleSort","renderSortButton","renderSystemHeaders","factName","expandRow","compareData","renderHeaderRow","renderLoadingRows","renderRows","emptyState","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","historicProfileIds","historicProfilesActions","toggleFilterDropDown","types","OPEN_FILTER_DROPDOWN","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","DropdownItem","Checkbox","display","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setFactFilter","changeFactFilter","factFilter","prevProps","TextInput","placeholder","aria-label","filterByFact","DriftFilterChips","setStateChips","stateChips","removeChip","chip","isBeta","checkChips","chipGroup","setIsEmpty","isEmpty","group","chips","category","newChipGroup","newStateChips","newFactChips","filteredChips","chipKeyCount","ChipGroup","categoryName","Chip","AddSystemButton","isTable","DriftPage","dropdownOpen","clearFilters","clearComparisonFilters","clearComparison","clearSelectedBaselines","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","ExclamationCircleIcon","text","detail","button","PlusCircleIcon","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","Consumer","permissions","compareRead","LockIcon","ErrorAlert","Card","CardBody","Toolbar","ToolbarContent","ToolbarGroup","ToolbarItem","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","top","bottom","pagination"],"mappings":"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","file":"js/6-1a988aae042dbc1b9ee6.js","sourcesContent":["'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nexports.extract = function (str) {\n\treturn str.split('?')[1] || '';\n};\n\nexports.parse = function (str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\tformatter(decodeURIComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n};\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort().map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n","'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n","import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleModal();\n    }\n\n    cancelSelection() {\n        this.props.toggleModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, historicalProfiles, loading,\n            entities, selectedBaselineIds, selectedHSPIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={\n                                (entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0\n                            }\n                        >\n                            Submit\n                        </Button>\n                    ] }\n                >\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.factState === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='20px' width='20px'/>;\n        } else if (this.props.factState === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='20px' width='20px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='20px' width='20px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        return (\n            this.icon()\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    factState: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    render() {\n        const { updateReferenceId, id } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId(id) }\n                />\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    id: PropTypes.string\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { DropdownDirection, Tooltip } from '@patternfly/react-core';\nimport queryString from 'query-string';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { AngleDownIcon, AngleRightIcon, LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport moment from 'moment';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport { ASC, DESC } from '../../../constants';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport HistoricalProfilesDropdown from '../../HistoricalProfilesDropdown/HistoricalProfilesDropdown';\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesDropdown/redux';\nimport ReferenceSelector from './ReferenceSelector/ReferenceSelector';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n        this.formatDate = this.formatDate.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (historicalGroups.hasOwnProperty(hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        updateReferenceId(queryString.parse(location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    formatDate(dateString) {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    async removeSystem(item) {\n        const { selectHistoricProfiles } = this.props;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n\n            this.HSPIds = this.props.historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === this.props.referenceId) {\n            await this.props.updateReferenceId(this.baselineIds[0]);\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        const { isFirstReference } = this.state;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n                this.setState({ isFirstReference: false });\n            } else if (referenceId) {\n                reference = referenceId;\n                this.setState({ isFirstReference: false });\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, reference);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        this.props.updateReferenceId(reference);\n        this.props.fetchCompare(systemIds, baselineIds, HSPIds, reference);\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system.state === 'DIFFERENT') {\n                    className.push('highlight');\n                    className.push('different-fact-cell');\n                }\n            } else {\n                if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>{ system.value === null ? 'No Data' : system.value }</td>);\n        });\n\n        return row;\n    }\n\n    renderRow(fact) {\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                <td className={\n                    this.props.expandedRows.includes(fact.name) ?\n                        'nested-fact sticky-column fixed-column-1' :\n                        'sticky-column fixed-column-1' }>\n                    { this.renderExpandableRowButton(this.props.expandedRows, fact.name) } { fact.name }\n                </td>\n            );\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr>{ row }</tr>);\n\n            if (this.props.expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon factState={ fact.state }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        let row = [];\n\n        row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n            <p className=\"child-row\">{ fact.name }</p>\n        </td>);\n        row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon factState={ fact.state }/></td>);\n\n        row = row.concat(this.findSystem(fact));\n\n        return row;\n    }\n\n    renderSystemHeaders() {\n        let row = [];\n        let typeIcon = '';\n        let referenceId = this.props.referenceId;\n        let updateReferenceId = this.updateReferenceId;\n\n        this.masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <ServerIcon/>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <BlueprintIcon/>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <ClockIcon />;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={\n                        item.id === referenceId\n                            ? 'drift-header reference-header'\n                            : `drift-header ${item.type}-header`\n                    }\n                >\n                    <div>\n                        <a onClick={ () => this.removeSystem(item) } className=\"remove-system-icon\">\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                id={ item.id }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={\n                                        <div>System profile does not exist. Please run insights-client on system to upload archive.</div>\n                                    }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesDropdown\n                                    system={ item }\n                                    systemIds={ this.systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ this.fetchCompare }\n                                    dropdownDirection={ DropdownDirection.down }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        if (sortType === 'fact') {\n            this.props.toggleFactSort(sort);\n        } else {\n            this.props.toggleStateSort(sort);\n        }\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\">\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort }\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== '' ?\n                        <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div> :\n                        <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    renderExpandableRowButton(expandedRows, factName) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"carat-margin pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"carat-margin pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table className=\"pf-c-table pf-m-compact drift-table\">\n                        <thead>\n                            { this.renderHeaderRow() }\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem>\n                <Checkbox\n                    id={ stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () =>\n                        this.props.addStateFilter(stateFilter)\n                    }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    toggle={ <DropdownToggle onToggle={ this.onToggle }>\n                        View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport { compareActions } from '../../modules';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.changeFactFilter(filter);\n    }, 250);\n\n    render() {\n        return (\n            <React.Fragment>\n                <TextInput\n                    value={ this.state.filter }\n                    id=\"filterByFact\"\n                    placeholder=\"Filter by fact\"\n                    onChange={ this.updateFactFilter }\n                    aria-label=\"filter by fact\"\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    changeFactFilter: PropTypes.func,\n    factFilter: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        changeFactFilter: (factFilter) => dispatch(compareActions.filterByFact(factFilter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(SearchBar));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Chip, ChipGroup } from '@patternfly/react-core';\n\nimport { compareActions } from '../../modules';\n\nexport class DriftFilterChips extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chipGroup: [\n                { category: 'State', chips: this.setStateChips(this.props.stateFilters) },\n                { category: 'Fact name', chips:\n                    this.props.factFilter !== ''\n                        ? [ this.props.factFilter ]\n                        : []\n                }\n            ]\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const { stateFilters, factFilter } = this.props;\n        const { chipGroup } = this.state;\n        let newStateChips = chipGroup[0];\n        let newFactChips = chipGroup[1];\n        let newChipGroup;\n\n        if (prevProps !== this.props) {\n            if (stateFilters !== prevProps.stateFilters) {\n                let filteredChips = [];\n\n                stateFilters.forEach(function(filter) {\n                    if (filter.selected) {\n                        filteredChips.push(filter.display);\n                    }\n                });\n\n                newStateChips = { category: 'State', chips: filteredChips };\n            }\n\n            if (factFilter !== prevProps.factFilter) {\n                newFactChips = { category: 'Fact name', chips:\n                    factFilter !== ''\n                        ? [ factFilter ]\n                        : []\n                };\n            }\n\n            newChipGroup = [ newStateChips, newFactChips ];\n            this.setState({ chipGroup: newChipGroup });\n        }\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    removeChip = (chip) => {\n        const { stateFilters, addStateFilter, filterByFact } = this.props;\n\n        if (insights.chrome.isBeta()) {\n            if (chip === 'Expected' || chip === 'Unexpected' || chip === 'Uncertain') {\n                stateFilters.forEach(function(stateFilter) {\n                    if (stateFilter.display === chip) {\n                        addStateFilter(stateFilter);\n                    }\n                });\n            } else {\n                filterByFact('');\n            }\n        } else {\n            if (chip === 'Same' || chip === 'Different' || chip === 'Incomplete data') {\n                stateFilters.forEach(function(stateFilter) {\n                    if (stateFilter.display === chip) {\n                        addStateFilter(stateFilter);\n                    }\n                });\n            } else {\n                filterByFact('');\n            }\n        }\n    }\n\n    checkChips = () => {\n        const { chipGroup } = this.state;\n        const { setIsEmpty } = this.props;\n        let isEmpty = true;\n\n        chipGroup.forEach(function(group) {\n            if (group.chips.length > 0) {\n                isEmpty = false;\n            }\n        });\n\n        setIsEmpty(isEmpty);\n    }\n\n    render() {\n        const { chipGroup } = this.state;\n        let chipKeyCount = 0;\n\n        this.checkChips();\n\n        return (\n            chipGroup.map(group => (\n                <ChipGroup categoryName={ group.category } key={ group.category }>\n                    { group.chips.map(chip => (\n                        <Chip key={ group.category + chipKeyCount++ } onClick={ () => this.removeChip(chip) }>\n                            { chip }\n                        </Chip>\n                    )) }\n                </ChipGroup>\n            ))\n        );\n    }\n}\n\nDriftFilterChips.propTypes = {\n    factFilter: PropTypes.string,\n    stateFilters: PropTypes.array,\n    filterByFact: PropTypes.func,\n    addStateFilter: PropTypes.func,\n    setIsEmpty: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DriftFilterChips);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, DropdownItem, Toolbar, ToolbarGroup, ToolbarItem, ToolbarContent, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesDropdown/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport FilterDropDown from './FilterDropDown/FilterDropDown';\nimport SearchBar from './SearchBar/SearchBar';\nimport ActionKebab from './ActionKebab/ActionKebab';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport ExportCSVButton from '../ExportCSVButton/ExportCSVButton';\nimport DriftFilterChips from './DriftFilterChips/DriftFilterChips';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem key=\"remove-systems\" component=\"button\" onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            dropdownOpen: false,\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isEmpty: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={\n                    'Error ' + error.status + ': ' + error.detail\n                }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { emptyState, error, loading, page, perPage, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen, isEmpty } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState ?\n                                                    <React.Fragment>\n                                                        <Toolbar className=\"drift-toolbar\">\n                                                            <ToolbarContent>\n                                                                <ToolbarGroup variant='filter-group'>\n                                                                    <ToolbarItem>\n                                                                        <SearchBar />\n                                                                    </ToolbarItem>\n                                                                    <ToolbarItem>\n                                                                        <FilterDropDown />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                                <ToolbarGroup variant='button-group'>\n                                                                    <ToolbarItem>\n                                                                        <AddSystemButton loading={ loading } />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                                <ToolbarGroup variant='icon-button-group'>\n                                                                    <ToolbarItem>\n                                                                        <ExportCSVButton\n                                                                            dropdownItems={ dropdownItems }\n                                                                            isOpen={ dropdownOpen }\n                                                                            onToggle={ this.onToggle }\n                                                                        />\n                                                                    </ToolbarItem>\n                                                                    <ToolbarItem>\n                                                                        <ActionKebab dropdownItems={ actionKebabItems } />\n                                                                    </ToolbarItem>\n                                                                </ToolbarGroup>\n                                                                <ToolbarItem variant='pagination' align={ { default: 'alignRight' } }>\n                                                                    <TablePagination\n                                                                        page={ page }\n                                                                        perPage={ perPage }\n                                                                        total={ totalFacts }\n                                                                        isCompact={ true }\n                                                                        updatePagination={ updatePagination }\n                                                                        widgetId='drift-pagination-top'\n                                                                        variant={ PaginationVariant.top }\n                                                                    />\n                                                                </ToolbarItem>\n                                                            </ToolbarContent>\n                                                        </Toolbar>\n                                                        <Toolbar className=\"drift-toolbar\">\n                                                            <ToolbarContent>\n                                                                <ToolbarGroup>\n                                                                    <ToolbarItem>\n                                                                        <DriftFilterChips setIsEmpty={ this.setIsEmpty } />\n                                                                    </ToolbarItem>\n                                                                    { !isEmpty\n                                                                        ? <ToolbarItem>\n                                                                            <a onClick={ () => this.clearFilters() } >\n                                                                                Clear filters\n                                                                            </a>\n                                                                        </ToolbarItem>\n                                                                        : null\n                                                                    }\n                                                                </ToolbarGroup>\n                                                            </ToolbarContent>\n                                                        </Toolbar>\n                                                    </React.Fragment>\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}