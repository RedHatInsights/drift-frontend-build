{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/DeleteFactModal/helpers.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineKebab/EditBaselineKebab.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/AddFactButton/AddFactButton.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineToolbar/EditBaselineToolbar.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/FactModal/FactModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaselineNameModal/EditBaselineNameModal.js","webpack:///./src/SmartComponents/BaselinesPage/EditBaseline/EditBaseline.js"],"names":["countFacts","editBaselineTableData","categories","facts","forEach","fact","selected","editBaselineHelpers","isCategory","baselineSubFacts","subFact","EditBaselineKebab","props","isDisabled","state","kebabOpened","modalOpened","toggleKebab","setState","toggleModalOpened","dropdownItems","categoryMessage","factMessage","this","deleteFactModalHelpers","DropdownItem","key","component","onClick","length","Fragment","DeleteFactModal","toggleModal","bind","Dropdown","style","float","toggle","KebabToggle","onToggle","isOpen","isPlain","Component","propTypes","PropTypes","array","connect","editBaselineState","AddFactButton","handleAddFact","setFactData","toggleFactModal","factName","factValue","Button","variant","func","dispatch","editBaselineActions","factData","EditBaselineToolbar","bulkSelectItems","title","onBulkSelect","Toolbar","className","ToolbarGroup","ToolbarItem","count","items","checked","onSelect","bool","any","FactModal","checkKeyPress","event","preventDefault","confirmModal","cancelFact","renderCategoryCheckbox","renderFactInput","renderValueInput","renderModalBody","isAddFact","isEditFact","handleChange","handleNewName","value","handleNewValue","baselineData","patchBaseline","fetchBaselineData","newAPIBody","addFact","editFact","id","newFactData","buildNewFactData","makeAddFactPatch","editedFactData","buildEditedFactData","makeEditFactPatch","Checkbox","aria-label","label","name","onChange","isChecked","error","Form","FormGroup","isRequired","helperTextInvalid","hasOwnProperty","detail","isValid","fieldId","onKeyPress","TextInput","type","placeholder","isSubFact","factModalOpened","Modal","onClose","isFooterLeftAligned","actions","string","object","baselineId","newBaselineBody","baselineUUID","EditBaselineNameModal","cancelModal","toggleEditNameModal","updateBaselineName","display_name","baselineName","facts_patch","EditBaseline","isSelected","selectFact","Number","target","FACT_ID","push","renderCheckbox","FACT_VALUE","fetchBaselineId","renderBreadcrumb","goToBaselinesList","clearErrorData","window","insights","chrome","auth","getUser","params","match","history","clearBaselineData","Breadcrumb","BreadcrumbItem","isActive","rows","rowData","i","size","SkeletonSize","md","expandedRows","includes","expandRow","row","baseline_facts","find","baselineFact","FACT_NAME","renderExpandableRowButton","renderKebab","renderRowData","colSpan","EmptyStateDisplay","text","button","renderHeaderRow","undefined","renderRows","renderLoadingRows","baselineDataLoading","findSelected","lg","Card","CardBody","renderTable","withRouter","tableId","baselinesTableActions"],"mappings":"obAyBe,OACXA,WAxBJ,SAAoBC,GAChB,IAAIC,EAAa,EACbC,EAAQ,EAkBZ,OAhBAF,EAAsBG,SAAQ,SAASC,GAC/BA,EAAKC,SACDC,IAAoBC,WAAWH,GAC/BH,GAAc,EAEdC,GAAS,EAENI,IAAoBC,WAAWH,IACtCE,IAAoBE,iBAAiBJ,GAAMD,SAAQ,SAASM,GACpDA,EAAQJ,WACRH,GAAS,SAMlB,CAAED,aAAYC,WCbnBQ,E,YACF,WAAYC,GAAO,0BACf,4BAAMA,KAuBVC,WAAa,WAAM,IACPZ,EAA0B,EAAKW,MAA/BX,sBACJY,GAAa,EAgBjB,OAdAZ,EAAsBG,SAAQ,SAACC,GACvBA,EAAKC,WACLO,GAAa,GAGbN,IAAoBC,WAAWH,IAC/BE,IAAoBE,iBAAiBJ,GAAMD,SAAQ,SAACM,GAC5CA,EAAQJ,WACRO,GAAa,SAMtBA,GAvCP,EAAKC,MAAQ,CACTC,aAAa,EACbC,aAAa,GAGjB,EAAKC,YAAc,WAAM,IACbF,EAAgB,EAAKD,MAArBC,YACR,EAAKG,SAAS,CACVH,aAAcA,KAItB,EAAKI,kBAAoB,WAAM,IACnBH,EAAgB,EAAKF,MAArBE,YACR,EAAKE,SAAS,CACVF,aAAcA,EACdD,aAAa,KAnBN,E,sDA6CV,IAGDK,EACAC,EACAC,EALC,EACgCC,KAAKT,MAAlCC,EADH,EACGA,YAAaC,EADhB,EACgBA,YACbf,EAA0BsB,KAAKX,MAA/BX,sBAFH,EAMuBuB,EAAuBxB,WAAWC,GAAxDC,EAND,EAMCA,WAAYC,EANb,EAMaA,MAqBlB,OAnBID,EAAa,IACbmB,EAAiC,IAAfnB,EAAmB,aAAeA,EAAa,eAGjEC,EAAQ,IACRmB,EAAwB,IAAVnB,EAAc,SAAWA,EAAQ,UAGnDiB,EAAgB,CACZ,kBAACK,EAAA,EAAD,CACIC,IAAI,eACJC,UAAU,SACVC,QAAUL,KAAKJ,kBACfN,aAAaZ,EAAsB4B,OAAS,IAAIN,KAAKV,cAJzD,iBAWA,kBAAC,IAAMiB,SAAP,KACMd,EAAc,kBAACe,EAAA,EAAD,CACZC,YAAcT,KAAKJ,kBAAkBc,KAAKV,MAC1CP,YAAcA,EACdK,gBAAkBA,EAClBC,YAAcA,IACb,KACL,kBAACY,EAAA,EAAD,CACIC,MAAQ,CAAEC,MAAO,QACjBC,OAAS,kBAACC,EAAA,EAAD,CAAaC,SAAWhB,KAAKN,cACtCuB,OAASzB,EACTK,cAAgBA,EAChBqB,SAAO,S,GAtFKC,aA6FhC/B,EAAkBgC,UAAY,CAC1B1C,sBAAuB2C,IAAUC,OAStBC,yBANf,SAAyBhC,GACrB,MAAO,CACHb,sBAAuBa,EAAMiC,kBAAkB9C,yBAIf,KAAzB6C,CAA+BnC,G,gBCzGxCqC,E,YACF,WAAYpC,GAAO,0BACf,4BAAMA,KAGVqC,cAAgB,WAAM,MACuB,EAAKrC,MAAtCsC,EADU,EACVA,YAAaC,EADH,EACGA,gBAErBD,EAAY,CAAEE,SAAU,GAAIC,UAAW,GAAIhD,KAAM,KACjD8C,KARe,E,sDAYf,OACI,kBAACG,EAAA,EAAD,CACIC,QAAQ,UACR3B,QAAUL,KAAK0B,eAFnB,4B,GAdgBP,aAuB5BM,EAAcL,UAAY,CACtBQ,gBAAiBP,IAAUY,KAC3BN,YAAaN,IAAUY,MAUZV,wBAAQ,MAPvB,SAA4BW,GACxB,MAAO,CACHN,gBAAiB,kBAAMM,EAASC,IAAoBP,oBACpDD,YAAa,SAACS,GAAD,OAAcF,EAASC,IAAoBR,YAAYS,QAI7Db,CAAkCE,GClCpCY,EAAb,YACI,WAAYhD,GAAO,0BACf,4BAAMA,KACDE,MAAQ,CACT+C,gBAAiB,CACb,CACIC,MAAO,aACPpC,IAAK,aACLE,QAAS,kBAAM,EAAKhB,MAAMmD,cAAa,KACxC,CACCD,MAAO,cACPpC,IAAK,cACLE,QAAS,kBAAM,EAAKhB,MAAMmD,cAAa,OAXpC,EADvB,sDAkBa,MAC0CxC,KAAKX,MAA5CC,EADH,EACGA,WAAYkD,EADf,EACeA,aAAczD,EAD7B,EAC6BA,SAC1BuD,EAAoBtC,KAAKT,MAAzB+C,gBAER,OACI,kBAACG,EAAA,EAAD,CAASC,UAAU,kBACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,aAAD,CACIC,MAAQ9D,EAAW,EAAIA,EAAW,KAClC+D,MAAQR,EACRS,QAAUhE,EAAW,EACrBiE,SAAW,kBAAMR,GAAczD,EAAW,IAC1CO,WAAaA,MAIzB,kBAACqD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAAC,EAAD,aAxCxB,GAAyCzB,aAgDzCkB,EAAoBjB,UAAY,CAC5B9B,WAAY+B,IAAU4B,KACtBT,aAAcnB,IAAUY,KACxBlD,SAAUsC,IAAU6B,KAGTb,Q,qCCtDTc,G,YACF,WAAY9D,GAAO,0BACf,4BAAMA,KA4FV+D,cAAgB,SAACC,GACK,UAAdA,EAAMlD,MACNkD,EAAMC,iBACN,EAAKC,iBA7FT,EAAKC,WAAa,EAAKA,WAAW9C,KAAhB,QAClB,EAAK6C,aAAe,EAAKA,aAAa7C,KAAlB,QACpB,EAAK+C,uBAAyB,EAAKA,uBAAuB/C,KAA5B,QAC9B,EAAKgD,gBAAkB,EAAKA,gBAAgBhD,KAArB,QACvB,EAAKiD,iBAAmB,EAAKA,iBAAiBjD,KAAtB,QACxB,EAAKkD,gBAAkB,EAAKA,gBAAgBlD,KAArB,QAEvB,EAAKnB,MAAQ,CACTsC,SAAU,EAAKxC,MAAMwC,SACrBC,UAAW,EAAKzC,MAAMyC,UACtBM,SAAU,EAAK/C,MAAM+C,SACrBnD,WAAY,EAAKI,MAAMJ,YAG3B,EAAKM,MAAMsE,UAAoC,KAAxB,EAAKxE,MAAMwC,UAA4C,KAAzB,EAAKxC,MAAMyC,UAChE,EAAKvC,MAAMuE,WAAqC,KAAxB,EAAKzE,MAAMwC,UAA4C,KAAzB,EAAKxC,MAAMyC,UAEjE,EAAKiC,aAAe,SAAAhB,GAChB,EAAKpD,SAAS,CAAEV,WAAY8D,KAGhC,EAAKiB,cAAgB,SAAAC,GACjB,EAAKtE,SAAS,CAAEkC,SAAUoC,KAG9B,EAAKC,eAAiB,SAAAD,GAClB,EAAKtE,SAAS,CAAEmC,UAAWmC,KA7BhB,E,iEAoCfrC,EAF4B5B,KAAKX,MAAzBuC,qB,oJAMoE5B,KAAKX,MAAzEuC,E,EAAAA,gBAAiBuC,E,EAAAA,aAAcC,E,EAAAA,cAAeC,E,EAAAA,kBAC9CR,EAAc7D,KAAKT,MAAnBsE,UACJS,EAAa,G,SAITA,EADAT,EACa7D,KAAKuE,QAAQJ,GAEbnE,KAAKwE,SAASL,G,SAGXC,EAAcD,EAAaM,GAAIH,G,eAE/CD,EAAkBF,EAAaM,IAGnC7C,I,uLAMAuC,GAAc,MACoCnE,KAAKT,MAAnDN,EADU,EACVA,WAAY4C,EADF,EACEA,SAAUC,EADZ,EACYA,UAAWM,EADvB,EACuBA,SAErCsC,EAAc1F,IAAoB2F,iBAAiB1F,EAAY4C,EAAUC,EAAWM,GAExF,OAAOpD,IAAoB4F,iBAAiBF,EAAaP,K,+BAGpDA,GAAc,MACmCnE,KAAKT,MAAnDN,EADW,EACXA,WAAY4C,EADD,EACCA,SAAUC,EADX,EACWA,UAAWM,EADtB,EACsBA,SAErCyC,EAAiB7F,IAAoB8F,oBACrC7F,EAAYe,KAAKX,MAAMwC,SAAUA,EAAU7B,KAAKX,MAAMyC,UAAWA,EAAWM,GAEhF,OAAOpD,IAAoB+F,kBAAkBF,EAAgBV,EAAc/B,K,+CAGtD,MACcpC,KAAKT,MAAhCN,EADa,EACbA,WAAY6E,EADC,EACDA,WAEpB,OAAO,kBAACkB,EAAA,EAAD,CACHC,aAAW,8BACXC,MAAM,qBACNT,GAAG,aACHU,KAAK,aACLC,SAAWpF,KAAK+D,aAChBsB,UAAYpG,EACZK,WAAaL,GAAc6E,M,wCAWjB,IACNwB,EAAUtF,KAAKX,MAAfiG,MADM,EAEmBtF,KAAKT,MAA9BsC,EAFM,EAENA,SAAU5C,EAFJ,EAEIA,WAElB,OACI,yBAAKyD,UAAU,cACX,kBAAC6C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIN,MAAQjG,EAAa,gBAAkB,YACvCwG,YAAU,EACVC,kBAAoBJ,EAAMK,eAAe,UAAYL,EAAMM,OAAS,KACpEC,SAAWP,EAAMK,eAAe,UAChCG,QAAQ,YACRC,WAAa/F,KAAKoD,eAElB,kBAAC4C,EAAA,EAAD,CACI/B,MAAQpC,EACRoE,KAAK,OACLC,YAAY,OACZd,SAAWpF,KAAKgE,cAChB6B,SAAWP,EAAMK,eAAe,UAChCV,aAAW,mB,yCAQhB,IACPK,EAAUtF,KAAKX,MAAfiG,MACAxD,EAAc9B,KAAKT,MAAnBuC,UAER,OACI,yBAAKY,UAAU,cACX,kBAAC6C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIN,MAAM,QACNO,YAAU,EACVC,kBAAoBJ,EAAMK,eAAe,UAAYL,EAAMM,OAAS,KACpEC,SAAWP,EAAMK,eAAe,UAChCG,QAAQ,aACRC,WAAa/F,KAAKoD,eAElB,kBAAC4C,EAAA,EAAD,CACI/B,MAAQnC,EACRmE,KAAK,OACLC,YAAY,QACZd,SAAWpF,KAAKkE,eAChB2B,SAAWP,EAAMK,eAAe,UAChCV,aAAW,e,wCAQjB,IACNkB,EAAcnG,KAAKX,MAAnB8G,UADM,EAEoBnG,KAAKT,MAA/BsE,EAFM,EAENA,UAAW5E,EAFL,EAEKA,WAUnB,OAPY,kBAAC,IAAMsB,SAAP,KACLsD,IAAcsC,GAAclH,EAAae,KAAKyD,yBAA2B,KAC1EzD,KAAK0D,kBACP,6BACEzE,EAAa,KAAOe,KAAK2D,sB,8BAM3B,IACIwC,EAAcnG,KAAKX,MAAnB8G,UADJ,EAE0CnG,KAAKT,MAA3CsE,EAFJ,EAEIA,UAAWC,EAFf,EAEeA,WAAY7E,EAF3B,EAE2BA,WAC3BsD,EAAQ,WAcZ,OAZmB,IAAfuB,GAAwB7E,GAAekH,GAElB,IAAdtC,IAAqC,IAAf5E,EAC7BsD,EAAQ,gBACa,IAAdsB,IAAoC,IAAdsC,EAC7B5D,EAAQ,gBACc,IAAfuB,IAAqC,IAAdqC,EAC9B5D,EAAQ,iBACc,IAAftD,IACPsD,EAAQ,iBARRA,EAAQ,YAWLA,I,+BAGF,IACG6D,EAAoBpG,KAAKX,MAAzB+G,gBAER,OACI,kBAACC,GAAA,EAAD,CACI3D,UAAU,mBACVH,MAAQvC,KAAKuC,QACbtB,OAASmF,EACTE,QAAUtG,KAAKwD,WACf+C,qBAAmB,EACnBC,QAAU,CACN,kBAACzE,EAAA,EAAD,CACI5B,IAAI,UACJ6B,QAAQ,UACR3B,QAAUL,KAAKuD,cAHnB,QAMA,kBAACxB,EAAA,EAAD,CACI5B,IAAI,SACJ6B,QAAQ,OACR3B,QAAUL,KAAKwD,YAHnB,YAQFxD,KAAK4D,uB,GA3NCzC,aAiOxBgC,GAAU/B,UAAY,CAClBQ,gBAAiBP,IAAUY,KAC3BmE,gBAAiB/E,IAAU4B,KAC3BpB,SAAUR,IAAUoF,OACpB3E,UAAWT,IAAUoF,OACrBrE,SAAUf,IAAUqF,OACpBzH,WAAYoC,IAAU4B,KACtBkD,UAAW9E,IAAU4B,KACrBkB,aAAc9C,IAAUqF,OACxBtC,cAAe/C,IAAUY,KACzBqD,MAAOjE,IAAUqF,OACjBrC,kBAAmBhD,IAAUY,MAwBlBV,0BArBf,SAAyBhC,GACrB,MAAO,CACH6G,gBAAiB7G,EAAMiC,kBAAkB4E,gBACzCvE,SAAUtC,EAAMiC,kBAAkBK,SAClCC,UAAWvC,EAAMiC,kBAAkBM,UACnCM,SAAU7C,EAAMiC,kBAAkBY,SAClCnD,WAAYM,EAAMiC,kBAAkBvC,WACpCkH,UAAW5G,EAAMiC,kBAAkB2E,UACnChC,aAAc5E,EAAMiC,kBAAkB2C,aACtCmB,MAAO/F,EAAMiC,kBAAkB8D,UAIvC,SAA4BpD,GACxB,MAAO,CACHN,gBAAiB,kBAAMM,EAASC,IAAoBP,oBACpDwC,cAAe,SAACuC,EAAYC,GAAb,OAAiC1E,EAASC,IAAoBiC,cAAcuC,EAAYC,KACvGvC,kBAAmB,SAACwC,GAAD,OAAkB3E,EAASC,IAAoBkC,kBAAkBwC,QAI7EtF,CAA6C4B,ICrQ/C2D,GAAb,YACI,WAAYzH,GAAO,0BACf,4BAAMA,KA8BV0H,YAAc,WAAM,MAC8B,EAAK1H,MAA3C2H,EADQ,EACRA,oBAAqB7C,EADb,EACaA,aAE7B,EAAK8C,mBAAmB9C,EAAa+C,cACrCF,KAnCe,EAsCnB5D,cAAgB,SAACC,GACK,UAAdA,EAAMlD,MACNkD,EAAMC,iBACN,EAAKC,iBArCT,EAAKhE,MAAQ,CACT4H,aAAc,EAAK9H,MAAM8E,aAAa+C,cAI1C,EAAKD,mBAAqB,SAAChD,GACvB,EAAKtE,SAAS,CAAEwH,aAAclD,KAGlC,EAAKV,aAAe,EAAKA,aAAa7C,KAAlB,QAbL,EADvB,2KAkBgByG,EAAiBnH,KAAKT,MAAtB4H,aAlBhB,EAmBqEnH,KAAKX,MAA1D8E,EAnBhB,EAmBgBA,aAAcC,EAnB9B,EAmB8BA,cAAe4C,EAnB7C,EAmB6CA,oBAnB7C,kBAuBkB5C,EAAcD,EAAaM,GAAI,CAAEyC,aAAcC,EAAcC,YAAa,KAvB5F,OA0BYJ,IA1BZ,8LA8CsB,IACNG,EAAiBnH,KAAKT,MAAtB4H,aACA7B,EAAUtF,KAAKX,MAAfiG,MAER,OAAQ,yBAAK5C,UAAU,cACnB,kBAAC6C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIN,MAAM,iBACNO,YAAU,EACVK,QAAQ,gBACRJ,kBAAoBJ,EAAMK,eAAe,UAAYL,EAAMM,OAAS,KACpEC,SAAWP,EAAMK,eAAe,UAChCI,WAAa/F,KAAKoD,eAElB,kBAAC4C,EAAA,EAAD,CACI/B,MAAQkD,EACRlB,KAAK,OACLb,SAAWpF,KAAKiH,mBAChBpB,SAAWP,EAAMK,eAAe,UAChCV,aAAW,uBAjEnC,+BAwEa,IACGxF,EAAgBO,KAAKX,MAArBI,YAER,OACI,kBAAC4G,GAAA,EAAD,CACI3D,UAAU,mBACVH,MAAM,YACNtB,OAASxB,EACT6G,QAAUtG,KAAK+G,YACfR,qBAAmB,EACnBC,QAAU,CACN,kBAACzE,EAAA,EAAD,CACI5B,IAAI,UACJ6B,QAAQ,UACR3B,QAAUL,KAAKuD,cAHnB,QAMA,kBAACxB,EAAA,EAAD,CACI5B,IAAI,SACJ6B,QAAQ,OACR3B,QAAUL,KAAK+G,aAHnB,YAQF/G,KAAK4D,uBAjGvB,GAA2CzC,aAuG3C2F,GAAsB1F,UAAY,CAC9B+C,aAAc9C,IAAUqF,OACxBM,oBAAqB3F,IAAUY,KAC/BxC,YAAa4B,IAAU4B,KACvBmB,cAAe/C,IAAUY,KACzBqD,MAAOjE,IAAUqF,QASNnF,yBAAQ,MANvB,SAA4BW,GACxB,MAAO,CACHkC,cAAe,SAACuC,EAAYC,GAAb,OAAiC1E,EAASC,IAAoBiC,cAAcuC,EAAYC,QAIhGrF,CAAkCuF,I,yECxG1C,IAAMO,GAAb,YACI,WAAYhI,GAAO,0BACf,4BAAMA,KA6FV2D,SAAW,SAACsE,EAAYjE,GAAU,IAG1BjB,EAH0B,EACgB,EAAK/C,MAA3CX,EADsB,EACtBA,sBAAuB6I,EADD,EACCA,WAC3B3I,EAAQ,GAER6F,EAAK+C,OAAOnE,EAAMoE,OAAOtC,MAE7BzG,EAAsBG,SAAQ,SAASC,GAC/BA,EAAK4I,QAAajD,EAClBrC,EAAWtD,EACJE,IAAoBC,WAAWH,IACtCE,IAAoBE,iBAAiBJ,GAAMD,SAAQ,SAASM,GACpDA,EAAQuI,QAAajD,IACrBrC,EAAWjD,SAM3BP,EAAQ,CAAEwD,EAAS,IAEfpD,IAAoBC,WAAWmD,IAC/BpD,IAAoBE,iBAAiBkD,GAAUvD,SAAQ,SAASM,GAC5DP,EAAM+I,KAAKxI,EAAQuI,UAI3BH,EAAW3I,EAAO0I,IAxHH,EA2HnB9E,aAAe,SAAC8E,GAAe,MACmB,EAAKjI,MAA3CX,EADmB,EACnBA,sBAAuB6I,EADJ,EACIA,WAC3B3I,EAAQ,GAEZF,EAAsBG,SAAQ,SAASC,GACnCF,EAAM+I,KAAK7I,EAAK4I,OACZ1I,IAAoBC,WAAWH,IAC/BE,IAAoBE,iBAAiBJ,GAAMD,SAAQ,SAASM,GACxDP,EAAM+I,KAAKxI,EAAQuI,aAK/BH,EAAW3I,EAAO0I,IAxIH,EA2InBM,eAAiB,SAAC9I,GACd,IAAI2F,EAQJ,OANIzF,IAAoBC,WAAWH,GAC/B2F,EAAK,YAAc3F,EAAK4I,MACY,iBAAtB5I,EAAK+I,QACnBpD,EAAK,QAAU3F,EAAK4I,OAIpB,kBAAC1C,EAAA,EAAD,CACIK,UAAYvG,EAAKC,SACjBqG,SAAW,EAAKpC,SAChByB,GAAKA,EACLU,KAAOrG,EAAK4I,SAtJpB,EAAKnI,MAAQ,CACTE,aAAa,GAGjB,EAAKqI,kBACL,EAAKC,iBAAmB,EAAKA,iBAAiBrH,KAAtB,QACxB,EAAKsH,kBAAoB,EAAKA,kBAAkBtH,KAAvB,QAEzB,EAAKsG,oBAAsB,WAAM,IACrBvH,EAAgB,EAAKF,MAArBE,YACAwI,EAAmB,EAAK5I,MAAxB4I,eAER,EAAKtI,SAAS,CAAEF,aAAcA,IAC9BwI,KAhBW,EADvB,2KAsBcC,OAAOC,SAASC,OAAOC,KAAKC,UAtB1C,gIAyBsB,MACmCtI,KAAKX,MAArCkJ,EADH,EACNC,MAASD,QAEjBlE,EAHc,EACaA,mBAETkE,EAAO9D,MA5BjC,0CA+BwB,MACuBzE,KAAKX,MAApCoJ,EADQ,EACRA,SAERC,EAHgB,EACCA,mBAEC,YAClBD,EAAQd,KAAK,gBAnCrB,yCAsCuB,WACPxD,EAAiBnE,KAAKX,MAAtB8E,aAcR,OAVa,kBAACwE,EAAA,EAAD,KACT,kBAACC,EAAA,EAAD,KACI,uBAAGvI,QAAU,kBAAM,EAAK2H,sBAAxB,cAIJ,kBAACY,EAAA,EAAD,CAAgBC,UAAQ,GAAG1E,EAAa+C,iBAjDpD,wCAyDQ,OACI,wBAAI/G,IAAI,8BACJ,6BACA,wBAAIuC,UAAU,wBAAuB,sCACrC,wBAAIA,UAAU,wBAAuB,uCACrC,gCA9DhB,0CAuEQ,IAHA,IAAIoG,EAAO,GACPC,EAAU,GAELC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EACxBD,EAAQpB,KAAK,4BAAI,kBAAC,WAAD,CAAUsB,KAAOC,eAAaC,OAGnD,IAAK,IAAIH,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBF,EAAKnB,KAAK,4BAAMoB,IAGpB,OAAOD,IA/Ef,gDAkF8BjH,GAAU,WAUhC,OATyB7B,KAAKX,MAAtB+J,aAGSC,SAASxH,GACT,kBAAC,IAAD,CAAea,UAAU,sBAAsBrC,QAAU,kBAAM,EAAKhB,MAAMiK,UAAUzH,MAEpF,kBAAC,IAAD,CAAgBa,UAAU,UAAUrC,QAAU,kBAAM,EAAKhB,MAAMiK,UAAUzH,QAzFlG,oCA+JkB/C,GAAM,aACuBkB,KAAKX,MAApC+J,EADQ,EACRA,aAAcjF,EADN,EACMA,aAClBoF,EAAM,GACNT,EAAO,GAEP1G,EAAW+B,EAAaqF,eAAeC,MAAK,SAACC,GAC7C,OAAOA,EAAavE,OAASrG,EAAK6K,SAuCtC,OApCAJ,EAAI5B,KAAK,wBACLjF,UAAY0G,EAAaC,SAASvK,EAAK6K,OAAc,gCAAkC,qBACrF3J,KAAK4H,eAAe9I,KAGtBE,IAAoBC,WAAWH,IAC/ByK,EAAI5B,KAAK,4BACH3H,KAAK4J,0BAA0B9K,EAAK6K,OADjC,IACiD7K,EAAK6K,QAC/DJ,EAAI5B,KAAK,8BACT4B,EAAI5B,KAAK3I,IAAoB6K,YAAY,CAAEhI,SAAU/C,EAAK6K,MAAYvH,WAAUnD,YAAY,KAC5F6J,EAAKnB,KAAK,wBAAIxH,IAAMrB,EAAK6K,OAAeJ,IAEpCH,EAAaC,SAASvK,EAAK6K,QAC3B3K,IAAoBE,iBAAiBJ,GAAMD,SAAQ,SAACM,IAChDoK,EAAM,IACF5B,KAAK,wBAAIjF,UAAU,iCAAkC,EAAKkF,eAAezI,KAC7EoK,EAAI5B,KAAK,4BACL,uBAAGjF,UAAU,aAAcvD,EAAQwK,SAEvCJ,EAAI5B,KAAK,4BAAMxI,EAAQ0I,QACvB0B,EAAI5B,KAAK3I,IAAoB6K,YAAY,CACrChI,SAAU1C,EAAQwK,MAClB7H,UAAW3C,EAAQ0I,MACnBzF,WACA+D,WAAW,KAEf2C,EAAKnB,KAAK,wBAAIxH,IAAMhB,EAAQwK,OAAeJ,SAInDA,EAAI5B,KAAK,4BAAM7I,EAAK6K,QACpBJ,EAAI5B,KAAK,4BAAM7I,EAAK+I,QACpB0B,EAAI5B,KAAK3I,IAAoB6K,YAAY,CAAEhI,SAAU/C,EAAK6K,MAAY7H,UAAWhD,EAAK+I,MAAazF,cACnG0G,EAAKnB,KAAK,wBAAIxH,IAAMrB,EAAK6K,OAAeJ,KAGrCT,IA5Mf,mCA+MiB,IAELlK,EAD8BoB,KAAKX,MAA/BX,sBAEJoK,EAAO,GACPC,EAAU,GAEd,GAAqB,IAAjBnK,EAAM0B,OACN,IAAK,IAAI0I,EAAI,EAAGA,EAAIpK,EAAM0B,OAAQ0I,GAAK,EACnCD,EAAU/I,KAAK8J,cAAclL,EAAMoK,IACnCF,EAAKnB,KAAKoB,QAGdD,EACI,wBAAIiB,QAAQ,KACR,kBAACC,GAAA,EAAD,CACIzH,MAAQ,WACR0H,KAAO,CAAE,gEACTC,OAAS,kBAAC,EAAD,SAKzB,OAAOpB,IArOf,oCAwOkB,IACF3E,EAAiBnE,KAAKX,MAAtB8E,aAER,OACI,2BAAOzB,UAAU,oEACb,+BACM1C,KAAKmK,mBAEX,2BAAOhK,IAAI,4BACYiK,IAAjBjG,EACInE,KAAKqK,aACLrK,KAAKsK,wBAnP/B,+BA0Pa,WACG7K,EAAgBO,KAAKT,MAArBE,YADH,EAEwFO,KAAKX,MAA1F8E,EAFH,EAEGA,aAAcoG,EAFjB,EAEiBA,oBAAqB7L,EAFtC,EAEsCA,sBAAuB0H,EAF7D,EAE6DA,gBAAiBd,EAF9E,EAE8EA,MAC/EvG,EAAWC,IAAoBwL,aAAa9L,GAEhD,OACI,kBAAC,IAAM6B,SAAP,UACuB6J,IAAjBjG,GAA+BoG,EAc3B,kBAAC,aAAD,KACE,6BAAK,kBAAC,WAAD,CAAUtB,KAAOC,eAAauB,OAdrC,kBAAC,IAAMlK,SAAP,KACE,kBAAC,GAAD,CACI4D,aAAeA,EACf1E,YAAcA,EACduH,oBAAsBhH,KAAKgH,oBAC3B1B,MAAQA,IAEZ,kBAAC,aAAD,KACMtF,KAAK+H,mBACP,kBAAC,kBAAD,CAAiBxF,MAAQ4B,EAAeA,EAAa+C,aAAe,KACpE,kBAAC,IAAD,CAAaxE,UAAU,sCAAsCrC,QAAU,kBAAM,EAAK2G,2BAO9F,kBAAC,OAAD,KACI,kBAAC0D,EAAA,EAAD,CAAMhI,UAAU,8BACZ,kBAACiI,EAAA,EAAD,KACMvE,EACI,kBAAC,GAAD,MACA,KAEN,kBAAC,EAAD,CACIrH,SAAWA,EACXyD,aAAexC,KAAKwC,aACpBlD,WAA8C,IAAjCZ,EAAsB4B,SAErCN,KAAK4K,sBA/RnC,GAAkCzJ,aAwSlCkG,GAAajG,UAAY,CACrBqH,QAASpH,IAAUqF,OACnB8B,MAAOnH,IAAU6B,IACjBwF,kBAAmBrH,IAAUY,KAC7BkC,aAAc9C,IAAUC,MACxBiJ,oBAAqBlJ,IAAU4B,KAC/BoB,kBAAmBhD,IAAUY,KAC7BmE,gBAAiB/E,IAAU4B,KAC3BvE,sBAAuB2C,IAAUC,MACjCgI,UAAWjI,IAAUY,KACrBmH,aAAc/H,IAAUC,MACxBiG,WAAYlG,IAAUY,KACtBgG,eAAgB5G,IAAUY,KAC1BqD,MAAOjE,IAAUqF,QAwBNmE,sBAAWtJ,mBArB1B,SAAyBhC,GACrB,MAAO,CACH4E,aAAc5E,EAAMiC,kBAAkB2C,aACtCoG,oBAAqBhL,EAAMiC,kBAAkB+I,oBAC7CnE,gBAAiB7G,EAAMiC,kBAAkB4E,gBACzC1H,sBAAuBa,EAAMiC,kBAAkB9C,sBAC/C0K,aAAc7J,EAAMiC,kBAAkB4H,aACtC9D,MAAO/F,EAAMiC,kBAAkB8D,UAIvC,SAA4BpD,GACxB,MAAO,CACHwG,kBAAmB,SAACoC,GAAD,OAAa5I,EAAS6I,KAAsBrC,kBAAkBoC,KACjFxB,UAAW,SAACzH,GAAD,OAAcK,EAASC,IAAoBmH,UAAUzH,KAChEwC,kBAAmB,SAACwC,GAAD,OAAkB3E,EAASC,IAAoBkC,kBAAkBwC,KACpFU,WAAY,SAAC3I,EAAO0I,GAAR,OAAuBpF,EAASC,IAAoBoF,WAAW3I,EAAO0I,KAClFW,eAAgB,kBAAM/F,EAASC,IAAoB8F,sBAIjC1G,CAA6C8F","file":"js/6-0182639c65ed2b9f2672.js","sourcesContent":["import editBaselineHelpers from '../helpers';\n\nfunction countFacts(editBaselineTableData) {\n    let categories = 0;\n    let facts = 0;\n\n    editBaselineTableData.forEach(function(fact) {\n        if (fact.selected) {\n            if (editBaselineHelpers.isCategory(fact)) {\n                categories += 1;\n            } else {\n                facts += 1;\n            }\n        } else if (editBaselineHelpers.isCategory(fact)) {\n            editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                if (subFact.selected) {\n                    facts += 1;\n                }\n            });\n        }\n    });\n\n    return { categories, facts };\n}\n\nexport default {\n    countFacts\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteFactModal from '../DeleteFactModal/DeleteFactModal';\nimport editBaselineHelpers from '../helpers';\nimport deleteFactModalHelpers from '../DeleteFactModal/helpers';\n\nclass EditBaselineKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false,\n            modalOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n\n        this.toggleModalOpened = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened,\n                kebabOpened: false\n            });\n        };\n    }\n\n    isDisabled = () => {\n        const { editBaselineTableData } = this.props;\n        let isDisabled = true;\n\n        editBaselineTableData.forEach((fact) => {\n            if (fact.selected) {\n                isDisabled = false;\n            }\n\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    if (subFact.selected) {\n                        isDisabled = false;\n                    }\n                });\n            }\n        });\n\n        return isDisabled;\n    }\n\n    render() {\n        const { kebabOpened, modalOpened } = this.state;\n        const { editBaselineTableData } = this.props;\n        let dropdownItems;\n        let categoryMessage;\n        let factMessage;\n        let { categories, facts } = deleteFactModalHelpers.countFacts(editBaselineTableData);\n\n        if (categories > 0) {\n            categoryMessage = categories === 1 ? '1 category' : categories + ' categories';\n        }\n\n        if (facts > 0) {\n            factMessage = facts === 1 ? '1 fact' : facts + ' facts';\n        }\n\n        dropdownItems = [\n            <DropdownItem\n                key=\"multi-delete\"\n                component=\"button\"\n                onClick={ this.toggleModalOpened }\n                isDisabled={ editBaselineTableData.length > 0 ? this.isDisabled() : true }\n            >\n                Delete facts\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened ? <DeleteFactModal\n                    toggleModal={ this.toggleModalOpened.bind(this) }\n                    modalOpened={ modalOpened }\n                    categoryMessage={ categoryMessage }\n                    factMessage={ factMessage }\n                /> : null }\n                <Dropdown\n                    style={ { float: 'left' } }\n                    toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                    isOpen={ kebabOpened }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaselineKebab.propTypes = {\n    editBaselineTableData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        editBaselineTableData: state.editBaselineState.editBaselineTableData\n    };\n}\n\nexport default connect(mapStateToProps, null)(EditBaselineKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nclass AddFactButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddFact = () => {\n        const { setFactData, toggleFactModal } = this.props;\n\n        setFactData({ factName: '', factValue: '', fact: []});\n        toggleFactModal();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.handleAddFact }>\n                Add fact or category\n            </Button>\n        );\n    };\n}\n\nAddFactButton.propTypes = {\n    toggleFactModal: PropTypes.func,\n    setFactData: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        setFactData: (factData) => dispatch(editBaselineActions.setFactData(factData))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddFactButton);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { BulkSelect } from '@redhat-cloud-services/frontend-components';\n\nimport EditBaselineKebab from '../EditBaselineKebab/EditBaselineKebab';\nimport AddFactButton from '../AddFactButton/AddFactButton';\n\nexport class EditBaselineToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ]\n        };\n    }\n\n    render() {\n        const { isDisabled, onBulkSelect, selected } = this.props;\n        const { bulkSelectItems } = this.state;\n\n        return (\n            <Toolbar className='display-margin'>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <BulkSelect\n                            count={ selected > 0 ? selected : null }\n                            items={ bulkSelectItems }\n                            checked={ selected > 0 ? true : false }\n                            onSelect={ () => onBulkSelect(!selected > 0) }\n                            isDisabled={ isDisabled }\n                        />\n                    </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <AddFactButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <EditBaselineKebab />\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    };\n}\n\nEditBaselineToolbar.propTypes = {\n    isDisabled: PropTypes.bool,\n    onBulkSelect: PropTypes.func,\n    selected: PropTypes.any\n};\n\nexport default EditBaselineToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Checkbox, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\nimport editBaselineHelpers from '../helpers';\n\nclass FactModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.cancelFact = this.cancelFact.bind(this);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.renderCategoryCheckbox = this.renderCategoryCheckbox.bind(this);\n        this.renderFactInput = this.renderFactInput.bind(this);\n        this.renderValueInput = this.renderValueInput.bind(this);\n        this.renderModalBody = this.renderModalBody.bind(this);\n\n        this.state = {\n            factName: this.props.factName,\n            factValue: this.props.factValue,\n            factData: this.props.factData,\n            isCategory: this.props.isCategory\n        };\n\n        this.state.isAddFact = this.props.factName === '' && this.props.factValue === '';\n        this.state.isEditFact = this.props.factName !== '' && this.props.factValue !== '';\n\n        this.handleChange = checked => {\n            this.setState({ isCategory: checked });\n        };\n\n        this.handleNewName = value => {\n            this.setState({ factName: value });\n        };\n\n        this.handleNewValue = value => {\n            this.setState({ factValue: value });\n        };\n    }\n\n    cancelFact() {\n        const { toggleFactModal } = this.props;\n\n        toggleFactModal();\n    }\n\n    async confirmModal() {\n        const { toggleFactModal, baselineData, patchBaseline, fetchBaselineData } = this.props;\n        const { isAddFact } = this.state;\n        let newAPIBody = '';\n\n        try {\n            if (isAddFact) {\n                newAPIBody = this.addFact(baselineData);\n            } else {\n                newAPIBody = this.editFact(baselineData);\n            }\n\n            let results = await patchBaseline(baselineData.id, newAPIBody);\n            if (results) {\n                fetchBaselineData(baselineData.id);\n            }\n\n            toggleFactModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    addFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let newFactData = editBaselineHelpers.buildNewFactData(isCategory, factName, factValue, factData);\n\n        return editBaselineHelpers.makeAddFactPatch(newFactData, baselineData);\n    }\n\n    editFact(baselineData) {\n        const { isCategory, factName, factValue, factData } = this.state;\n\n        let editedFactData = editBaselineHelpers.buildEditedFactData(\n            isCategory, this.props.factName, factName, this.props.factValue, factValue, factData\n        );\n        return editBaselineHelpers.makeEditFactPatch(editedFactData, baselineData, factData);\n    }\n\n    renderCategoryCheckbox() {\n        const { isCategory, isEditFact } = this.state;\n\n        return <Checkbox\n            aria-label=\"controlled checkbox example\"\n            label=\"This is a category\"\n            id=\"isCategory\"\n            name=\"isCategory\"\n            onChange={ this.handleChange }\n            isChecked={ isCategory }\n            isDisabled={ isCategory && isEditFact }\n        />;\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderFactInput() {\n        const { error } = this.props;\n        const { factName, isCategory } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label={ isCategory ? 'Category name' : 'Fact name' }\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact name'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factName }\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            onChange={ this.handleNewName }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"fact name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderValueInput() {\n        const { error } = this.props;\n        const { factValue } = this.state;\n\n        return (\n            <div className=\"fact-value\">\n                <Form>\n                    <FormGroup\n                        label='Value'\n                        isRequired\n                        helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                        isValid={ !error.hasOwnProperty('status') }\n                        fieldId='fact value'\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ factValue }\n                            type=\"text\"\n                            placeholder=\"Value\"\n                            onChange={ this.handleNewValue }\n                            isValid={ !error.hasOwnProperty('status') }\n                            aria-label=\"value\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n        );\n    }\n\n    renderModalBody() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isCategory } = this.state;\n        let modalBody;\n\n        modalBody = <React.Fragment>\n            { (isAddFact && !isSubFact) || isCategory ? this.renderCategoryCheckbox() : null }\n            { this.renderFactInput() }\n            <br></br>\n            { isCategory ? null : this.renderValueInput() }\n        </React.Fragment>;\n\n        return modalBody;\n    }\n\n    title() {\n        const { isSubFact } = this.props;\n        const { isAddFact, isEditFact, isCategory } = this.state;\n        let title = 'Add fact';\n\n        if (isEditFact === true && !isCategory && !isSubFact) {\n            title = 'Edit fact';\n        } else if (isAddFact === true && isCategory === true) {\n            title = 'Add category';\n        } else if (isAddFact === true && isSubFact === true) {\n            title = 'Add sub fact';\n        } else if (isEditFact === true && isSubFact === true) {\n            title = 'Edit sub fact';\n        } else if (isCategory === true) {\n            title = 'Edit category';\n        }\n\n        return title;\n    }\n\n    render() {\n        const { factModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title={ this.title() }\n                isOpen={ factModalOpened }\n                onClose={ this.cancelFact }\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelFact }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nFactModal.propTypes = {\n    toggleFactModal: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    factName: PropTypes.string,\n    factValue: PropTypes.string,\n    factData: PropTypes.object,\n    isCategory: PropTypes.bool,\n    isSubFact: PropTypes.bool,\n    baselineData: PropTypes.object,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object,\n    fetchBaselineData: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        factModalOpened: state.editBaselineState.factModalOpened,\n        factName: state.editBaselineState.factName,\n        factValue: state.editBaselineState.factValue,\n        factData: state.editBaselineState.factData,\n        isCategory: state.editBaselineState.isCategory,\n        isSubFact: state.editBaselineState.isSubFact,\n        baselineData: state.editBaselineState.baselineData,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleFactModal: () => dispatch(editBaselineActions.toggleFactModal()),\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FactModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Modal, TextInput } from '@patternfly/react-core';\n\nimport { editBaselineActions } from '../redux';\n\nexport class EditBaselineNameModal extends Component {\n    constructor(props) {\n        super(props);\n\n        /*eslint-disable camelcase*/\n        this.state = {\n            baselineName: this.props.baselineData.display_name\n        };\n        /*eslint-enable camelcase*/\n\n        this.updateBaselineName = (value) => {\n            this.setState({ baselineName: value });\n        };\n\n        this.confirmModal = this.confirmModal.bind(this);\n    }\n\n    async confirmModal() {\n        const { baselineName } = this.state;\n        const { baselineData, patchBaseline, toggleEditNameModal } = this.props;\n\n        try {\n            /*eslint-disable camelcase*/\n            await patchBaseline(baselineData.id, { display_name: baselineName, facts_patch: []});\n            /*eslint-enable camelcase*/\n\n            toggleEditNameModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    cancelModal = () => {\n        const { toggleEditNameModal, baselineData } = this.props;\n\n        this.updateBaselineName(baselineData.display_name);\n        toggleEditNameModal();\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.confirmModal();\n        }\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n        const { error } = this.props;\n\n        return (<div className='fact-value'>\n            <Form>\n                <FormGroup\n                    label='Baseline title'\n                    isRequired\n                    fieldId='baseline name'\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    isValid={ !error.hasOwnProperty('status') }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n        </div>);\n    }\n\n    render() {\n        const { modalOpened } = this.props;\n\n        return (\n            <Modal\n                className='small-modal-body'\n                title=\"Edit name\"\n                isOpen={ modalOpened }\n                onClose={ this.cancelModal }\n                isFooterLeftAligned\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.confirmModal }>\n                        Save\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    };\n}\n\nEditBaselineNameModal.propTypes = {\n    baselineData: PropTypes.object,\n    toggleEditNameModal: PropTypes.func,\n    modalOpened: PropTypes.bool,\n    patchBaseline: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        patchBaseline: (baselineId, newBaselineBody) => dispatch(editBaselineActions.patchBaseline(baselineId, newBaselineBody))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(EditBaselineNameModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, Checkbox } from '@patternfly/react-core';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { AngleDownIcon, AngleRightIcon, EditAltIcon } from '@patternfly/react-icons';\n\nimport EditBaselineToolbar from './EditBaselineToolbar/EditBaselineToolbar';\nimport FactModal from './FactModal/FactModal';\nimport EditBaselineNameModal from './EditBaselineNameModal/EditBaselineNameModal';\nimport AddFactButton from './AddFactButton/AddFactButton';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { editBaselineActions } from './redux';\nimport editBaselineHelpers from './helpers';\nimport { FACT_ID, FACT_NAME, FACT_VALUE } from '../../../constants';\nimport EmptyStateDisplay from '../../EmptyStateDisplay/EmptyStateDisplay';\n\nexport class EditBaseline extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalOpened: false\n        };\n\n        this.fetchBaselineId();\n        this.renderBreadcrumb = this.renderBreadcrumb.bind(this);\n        this.goToBaselinesList = this.goToBaselinesList.bind(this);\n\n        this.toggleEditNameModal = () => {\n            const { modalOpened } = this.state;\n            const { clearErrorData } = this.props;\n\n            this.setState({ modalOpened: !modalOpened });\n            clearErrorData();\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaselineId() {\n        const { match: { params }, fetchBaselineData } = this.props;\n\n        fetchBaselineData(params.id);\n    }\n\n    goToBaselinesList() {\n        const { history, clearBaselineData } = this.props;\n\n        clearBaselineData('CHECKBOX');\n        history.push('/baselines');\n    }\n\n    renderBreadcrumb() {\n        const { baselineData } = this.props;\n        let breadcrumb;\n\n        /*eslint-disable camelcase*/\n        breadcrumb = <Breadcrumb>\n            <BreadcrumbItem>\n                <a onClick={ () => this.goToBaselinesList() }>\n                    Baselines\n                </a>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>{ baselineData.display_name }</BreadcrumbItem>\n        </Breadcrumb>;\n        /*eslint-enable camelcase*/\n\n        return breadcrumb;\n    }\n\n    renderHeaderRow() {\n        return (\n            <tr key='edit-baseline-table-header'>\n                <th></th>\n                <th className=\"edit-baseline-header\"><div>Fact</div></th>\n                <th className=\"edit-baseline-header\"><div>Value</div></th>\n                <th></th>\n            </tr>\n        );\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderExpandableRowButton(factName) {\n        const { expandedRows } = this.props;\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon className=\"pointer active-blue\" onClick={ () => this.props.expandRow(factName) } />;\n        } else {\n            expandIcon = <AngleRightIcon className=\"pointer\" onClick={ () => this.props.expandRow(factName) } />;\n        }\n\n        return expandIcon;\n    }\n\n    onSelect = (isSelected, event) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n        let factData;\n        let id = Number(event.target.name);\n\n        editBaselineTableData.forEach(function(fact) {\n            if (fact[FACT_ID] === id) {\n                factData = fact;\n            } else if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    if (subFact[FACT_ID] === id) {\n                        factData = subFact;\n                    }\n                });\n            }\n        });\n\n        facts = [ factData[0] ];\n\n        if (editBaselineHelpers.isCategory(factData)) {\n            editBaselineHelpers.baselineSubFacts(factData).forEach(function(subFact) {\n                facts.push(subFact[FACT_ID]);\n            });\n        }\n\n        selectFact(facts, isSelected);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { editBaselineTableData, selectFact } = this.props;\n        let facts = [];\n\n        editBaselineTableData.forEach(function(fact) {\n            facts.push(fact[FACT_ID]);\n            if (editBaselineHelpers.isCategory(fact)) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach(function(subFact) {\n                    facts.push(subFact[FACT_ID]);\n                });\n            }\n        });\n\n        selectFact(facts, isSelected);\n    }\n\n    renderCheckbox = (fact) => {\n        let id;\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            id = 'category-' + fact[FACT_ID];\n        } else if (typeof(fact[FACT_VALUE]) === 'string') {\n            id = 'fact-' + fact[FACT_ID];\n        }\n\n        return (\n            <Checkbox\n                isChecked={ fact.selected }\n                onChange={ this.onSelect }\n                id={ id }\n                name={ fact[FACT_ID] }\n            />\n        );\n    }\n\n    renderRowData(fact) {\n        const { expandedRows, baselineData } = this.props;\n        let row = [];\n        let rows = [];\n\n        let factData = baselineData.baseline_facts.find((baselineFact) => {\n            return baselineFact.name === fact[FACT_NAME];\n        });\n\n        row.push(<td\n            className={ expandedRows.includes(fact[FACT_NAME]) ? 'pf-c-table__check nested-fact' : 'pf-c-table__check' }>\n            { this.renderCheckbox(fact) }\n        </td>);\n\n        if (editBaselineHelpers.isCategory(fact)) {\n            row.push(<td>\n                { this.renderExpandableRowButton(fact[FACT_NAME]) } { fact[FACT_NAME] }</td>);\n            row.push(<td></td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factData, isCategory: true }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n\n            if (expandedRows.includes(fact[FACT_NAME])) {\n                editBaselineHelpers.baselineSubFacts(fact).forEach((subFact) => {\n                    row = [];\n                    row.push(<td className='pf-c-table__check nested-fact'>{ this.renderCheckbox(subFact) }</td>);\n                    row.push(<td>\n                        <p className=\"child-row\">{ subFact[FACT_NAME] }</p>\n                    </td>);\n                    row.push(<td>{ subFact[FACT_VALUE] }</td>);\n                    row.push(editBaselineHelpers.renderKebab({\n                        factName: subFact[FACT_NAME],\n                        factValue: subFact[FACT_VALUE],\n                        factData,\n                        isSubFact: true\n                    }));\n                    rows.push(<tr key={ subFact[FACT_NAME] }>{ row }</tr>);\n                });\n            }\n        } else {\n            row.push(<td>{ fact[FACT_NAME] }</td>);\n            row.push(<td>{ fact[FACT_VALUE] }</td>);\n            row.push(editBaselineHelpers.renderKebab({ factName: fact[FACT_NAME], factValue: fact[FACT_VALUE], factData }));\n            rows.push(<tr key={ fact[FACT_NAME] }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRows() {\n        const { editBaselineTableData } = this.props;\n        let facts = editBaselineTableData;\n        let rows = [];\n        let rowData = [];\n\n        if (facts.length !== 0) {\n            for (let i = 0; i < facts.length; i += 1) {\n                rowData = this.renderRowData(facts[i]);\n                rows.push(rowData);\n            }\n        } else {\n            rows =\n                <td colSpan='3'>\n                    <EmptyStateDisplay\n                        title={ 'No facts' }\n                        text={ [ 'No facts or categories have been added to this baseline yet.' ] }\n                        button={ <AddFactButton /> }\n                    />\n                </td>;\n        }\n\n        return rows;\n    }\n\n    renderTable() {\n        const { baselineData } = this.props;\n\n        return (\n            <table className=\"pf-c-table ins-c-table pf-m-compact ins-entity-table drift-table\">\n                <thead>\n                    { this.renderHeaderRow() }\n                </thead>\n                <tbody key='edit-baseline-table'>\n                    { baselineData !== undefined\n                        ? this.renderRows()\n                        : this.renderLoadingRows()\n                    }\n                </tbody>\n            </table>\n        );\n    }\n\n    render() {\n        const { modalOpened } = this.state;\n        const { baselineData, baselineDataLoading, editBaselineTableData, factModalOpened, error } = this.props;\n        let selected = editBaselineHelpers.findSelected(editBaselineTableData);\n\n        return (\n            <React.Fragment>\n                { baselineData !== undefined && !baselineDataLoading\n                    ? <React.Fragment>\n                        <EditBaselineNameModal\n                            baselineData={ baselineData }\n                            modalOpened={ modalOpened }\n                            toggleEditNameModal={ this.toggleEditNameModal }\n                            error={ error }\n                        />\n                        <PageHeader>\n                            { this.renderBreadcrumb() }\n                            <PageHeaderTitle title={ baselineData ? baselineData.display_name : '' }/>\n                            <EditAltIcon className='pointer not-active edit-icon-margin' onClick={ () => this.toggleEditNameModal() } />\n                        </PageHeader>\n                    </React.Fragment>\n                    : <PageHeader>\n                        <div><Skeleton size={ SkeletonSize.lg } /></div>\n                    </PageHeader>\n                }\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        <CardBody>\n                            { factModalOpened\n                                ? <FactModal />\n                                : null\n                            }\n                            <EditBaselineToolbar\n                                selected={ selected }\n                                onBulkSelect={ this.onBulkSelect }\n                                isDisabled={ editBaselineTableData.length === 0 }\n                            />\n                            { this.renderTable() }\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nEditBaseline.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.any,\n    clearBaselineData: PropTypes.func,\n    baselineData: PropTypes.array,\n    baselineDataLoading: PropTypes.bool,\n    fetchBaselineData: PropTypes.func,\n    factModalOpened: PropTypes.bool,\n    editBaselineTableData: PropTypes.array,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    selectFact: PropTypes.func,\n    clearErrorData: PropTypes.func,\n    error: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineData: state.editBaselineState.baselineData,\n        baselineDataLoading: state.editBaselineState.baselineDataLoading,\n        factModalOpened: state.editBaselineState.factModalOpened,\n        editBaselineTableData: state.editBaselineState.editBaselineTableData,\n        expandedRows: state.editBaselineState.expandedRows,\n        error: state.editBaselineState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearBaselineData: (tableId) => dispatch(baselinesTableActions.clearBaselineData(tableId)),\n        expandRow: (factName) => dispatch(editBaselineActions.expandRow(factName)),\n        fetchBaselineData: (baselineUUID) => dispatch(editBaselineActions.fetchBaselineData(baselineUUID)),\n        selectFact: (facts, isSelected) => dispatch(editBaselineActions.selectFact(facts, isSelected)),\n        clearErrorData: () => dispatch(editBaselineActions.clearErrorData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditBaseline));\n"],"sourceRoot":""}