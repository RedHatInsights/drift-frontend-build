{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/BaselinesKebab.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["toggleCreateBaselineModal","type","types","TOGGLE_CREATE_BASELINE_MODAL","CreateBaselineButton","props","createBaseline","history","addSystemModalOpened","toggleAddSystemModal","location","pathname","push","Button","variant","onClick","this","Component","propTypes","PropTypes","func","object","bool","withRouter","connect","state","addSystemModalState","dispatch","createBaselineModalActions","addSystemModalActions","CreateBaselineModal","cancelModal","updateBaselineName","submitBaselineName","bind","baselineName","value","setState","newBaselineObject","display_name","baseline_facts","baselineData","id","Fragment","TextInput","className","placeholder","onChange","isValid","aria-label","createBaselineModalOpened","Modal","title","isOpen","onClose","width","actions","key","renderModalBody","obj","createBaselineModalState","baselinesTableState","baselinesTableActions","exportToCSV","exportType","data","exportData","baselineRowData","EXPORT_BASELINES_LIST_TO_CSV","payload","BaselinesKebab","kebabOpened","exportSelect","toggleKebab","baselineTableData","dropdownItems","DropdownItem","component","Dropdown","style","float","toggle","KebabToggle","onToggle","isPlain","array","string","baselinesKebabActions","BaselinesPage","window","insights","chrome","auth","getUser","Toolbar","ToolbarGroup","ToolbarItem","BaselinesSearchBar","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","size","EmptyStateBody","CardBody","renderToolbar","BaselinesTable","kebab","emptyState","baselineListLoading","Card","renderEmptyState","renderTable","fullBaselineListData"],"mappings":"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","file":"js/6-8ea0ace5a094c614a413.js","sourcesContent":["import types from './types';\n\nfunction toggleCreateBaselineModal() {\n    return {\n        type: types.TOGGLE_CREATE_BASELINE_MODAL\n    };\n}\n\nexport default {\n    toggleCreateBaselineModal\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from '../CreateBaselineModal/redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nclass CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    createBaseline = () => {\n        const { history, toggleCreateBaselineModal, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaselineModal();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.createBaseline }>\n                Create baseline\n            </Button>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaselineModal: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, TextInput } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nclass CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: ''\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName } = this.state;\n        const { createBaseline, toggleCreateBaselineModal } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName, baseline_facts: []};\n        /*eslint-enable camelcase*/\n\n        await createBaseline(newBaselineObject);\n        this.props.history.push('baselines/' + this.props.baselineData.id);\n        toggleCreateBaselineModal();\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal } = this.props;\n\n        this.updateBaselineName('');\n        toggleCreateBaselineModal();\n    }\n\n    renderModalBody() {\n        const { baselineName } = this.state;\n\n        return (<React.Fragment>\n            <b>Baseline name</b>\n            <br></br>\n            <TextInput\n                className=\"fact-value\"\n                value={ baselineName }\n                type=\"text\"\n                placeholder=\"Baseline name\"\n                onChange={ this.updateBaselineName }\n                isValid={ baselineName !== '' ? true : false }\n                aria-label=\"baseline name\"\n            />\n        </React.Fragment>\n        );\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"small-modal-body\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                actions={ [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"primary\"\n                        onClick={ this.submitBaselineName }>\n                        Create baseline\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"secondary\"\n                        onClick={ this.cancelModal }>\n                        Cancel\n                    </Button>\n                ] }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    history: PropTypes.obj,\n    baselineData: PropTypes.obj,\n    toggleCreateBaselineModal: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject) => dispatch(baselinesTableActions.createBaseline(newBaselineObject))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import types from './types';\n\nfunction exportToCSV(exportType, baselineData, baselineRowData = []) {\n    let data = {\n        exportType,\n        exportData: baselineData,\n        baselineRowData\n    };\n\n    return {\n        type: types.EXPORT_BASELINES_LIST_TO_CSV,\n        payload: data\n    };\n}\n\nexport default {\n    exportToCSV\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { baselinesKebabActions } from './redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nclass BaselinesKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.exportSelect = this.exportSelect.bind(this);\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    exportSelect() {\n        const { exportType, baselineTableData, baselineData, baselineRowData } = this.props;\n        this.toggleKebab();\n        if (exportType === 'baseline list') {\n            this.props.exportToCSV(exportType, baselineTableData);\n        } else if (exportType === 'baselines data') {\n            this.props.exportToCSV(exportType, baselineData, baselineRowData);\n        }\n    }\n\n    render() {\n        const { kebabOpened } = this.state;\n        const dropdownItems = [\n            <DropdownItem key=\"export\" component=\"button\" onClick={ this.exportSelect }>Export as CSV</DropdownItem>\n        ];\n        return (\n            <Dropdown\n                style={ { float: 'left' } }\n                className={ 'action-kebab' }\n                toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nBaselinesKebab.propTypes = {\n    exportToCSV: PropTypes.func,\n    baselineTableData: PropTypes.array,\n    exportType: PropTypes.string,\n    baselineData: PropTypes.array,\n    baselineRowData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineTableData: state.baselinesTableState.baselineTableData,\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: (exportType, exportData, baselineRowData) => {\n            dispatch(baselinesKebabActions.exportToCSV(exportType, exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesKebab));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport BaselinesKebab from './BaselinesKebab/BaselinesKebab';\nimport BaselinesSearchBar from '../BaselinesSearchBar/BaselinesSearchBar';\n\nclass BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    renderToolbar() {\n        return (\n            <Toolbar className=\"drift-toolbar\">\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <BaselinesSearchBar />\n                    </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <CreateBaselineButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <BaselinesKebab exportType='baseline list'/>\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    }\n\n    renderEmptyState() {\n        return (\n            <center>\n                <EmptyState>\n                    <EmptyStateIcon icon={ AddCircleOIcon } />\n                    <br></br>\n                    <Title size=\"lg\">No baselines</Title>\n                    <EmptyStateBody>\n                        You currently have no baselines displayed.\n                        <br/>\n                        Please create a baseline to use in your System Comparison analysis.\n                    </EmptyStateBody>\n                    <CreateBaselineButton />\n                </EmptyState>\n            </center>\n        );\n    }\n\n    renderTable() {\n        return (\n            <CardBody>\n                { this.renderToolbar() }\n                <div>\n                    <BaselinesTable kebab='true'/>\n                </div>\n            </CardBody>\n        );\n    }\n\n    render() {\n        const { emptyState, baselineListLoading } = this.props;\n\n        /*eslint-disable camelcase*/\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        { (emptyState && baselineListLoading === false)\n                            ? this.renderEmptyState() : this.renderTable()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n        /*eslint-enable camelcase*/\n    }\n}\n\nBaselinesPage.propTypes = {\n    baselineListLoading: PropTypes.bool,\n    fullBaselineListData: PropTypes.array,\n    emptyState: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineListLoading: state.baselinesTableState.baselineListLoading,\n        fullBaselineListData: state.baselinesTableState.fullBaselineListData,\n        emptyState: state.baselinesTableState.emptyState\n    };\n}\n\nexport default connect(mapStateToProps, null)(BaselinesPage);\n"],"sourceRoot":""}