{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","onSelect","_","event","selectBaseline","currentTarget","id","checked","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","key","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","label","isRequired","type","helperTextInvalid","hasOwnProperty","detail","fieldId","validated","onKeyPress","TextInput","className","placeholder","value","onChange","ValidatedOptions","error","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","setState","handleChecked","this","createBaseline","selectedBaselineIds","history","entities","selectedHSPIds","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","hsp_uuid","push","baselineData","Radio","isChecked","name","baselineTableData","createBaselineModalOpened","hasReadPermissions","hasWritePermissions","loading","totalBaselines","BaselinesTable","tableId","tableData","hasInventoryReadPermissions","historicalProfiles","SystemsTable","createBaselineModal","hasHistoricalDropdown","hasMultiSelect","undefined","Button","variant","isDisabled","onClick","Modal","width","isOpen","onClose","actions","renderActions","status","Alert","isInline","Component","propTypes","PropTypes","bool","func","object","array","number","updatePagination","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","historicProfilesState","dispatch","createBaselineModalActions","uuid","isSelected","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","rowId","map","item","onBulkSelect","ids","forEach","baseline","renderEmptyState","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","button","AddCircleOIcon","CreateBaselineButton","window","insights","chrome","auth","getUser","clearEditBaselineData","CardBody","kebab","createButton","exportButton","Consumer","permissions","inventoryRead","baselinesRead","baselinesWrite","LockIcon","ErrorAlert","Card","renderTable","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/6-128b565896d337bda3b3.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: '' },\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectedHSPIds } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedHSPIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = selectedHSPIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (_, event) => {\n        const { selectBaseline } = this.props;\n\n        let id = [ event.currentTarget.id ];\n        let isSelected = event.currentTarget.checked;\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, createBaselineModalOpened, hasReadPermissions, hasWritePermissions, loading, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n                hasReadPermissions={ hasReadPermissions }\n                hasWritePermissions={ hasWritePermissions }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { hasInventoryReadPermissions, historicalProfiles } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable\n                selectedSystemIds={ [] }\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ historicalProfiles }\n                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <Form>\n                <FormGroup\n                    label='Baseline name'\n                    isRequired\n                    type=\"text\"\n                    helperTextInvalid={ createBaselineError.hasOwnProperty('detail') ? createBaselineError.detail : null }\n                    fieldId=\"name\"\n                    validated={ createBaselineError.hasOwnProperty('status') ? 'error' : null }\n                    onKeyPress={ this.checkKeyPress }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeholder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        validated={ createBaselineError.hasOwnProperty('status') ? ValidatedOptions.error : null }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, selectedHSPIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n        let selectedSystemIds = entities === undefined || entities.selectedSystemIds === undefined ? [] : entities.selectedSystemIds;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                (selectedSystemIds.length === 0 && selectedHSPIds.length === 0)\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                width={ '1200px' }\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasReadPermissions: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable ]},\n                { title: '' }\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable(hasReadPermissions, hasWritePermissions) {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                        hasReadPermissions={ hasReadPermissions }\n                        hasWritePermissions={ hasWritePermissions }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = () => {\n        const { baselineError, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton /> }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={\n                    'Error ' + baselineError.status + ': ' + baselineError.detail\n                }\n                button={\n                    <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                        <UndoIcon className='reload-button' />\n                        Retry\n                    </a>\n                }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        <CreateBaselineModal\n                            hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                            hasReadPermissions={ value.permissions.baselinesRead }\n                            hasWritePermissions={ value.permissions.baselinesWrite }\n                        />\n                        <PageHeader>\n                            <PageHeaderTitle title='Baselines'/>\n                        </PageHeader>\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState()\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable(value.permissions.baselinesRead, value.permissions.baselinesWrite)\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}