{"version":3,"sources":["webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack:///./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/redux/actions.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesKebab/BaselinesKebab.js","webpack:///./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["toggleCreateBaselineModal","type","types","TOGGLE_CREATE_BASELINE_MODAL","createBaseline","newBaseline","uuid","undefined","CREATE_BASELINE","payload","api","postNewBaseline","CreateBaselineButton","props","history","addSystemModalOpened","toggleAddSystemModal","location","pathname","push","Button","variant","onClick","this","Component","propTypes","PropTypes","func","object","bool","withRouter","connect","state","addSystemModalState","dispatch","createBaselineModalActions","addSystemModalActions","CreateBaselineModal","cancelModal","updateBaselineName","renderModalBody","modalBody","baselineName","copyBaselineChecked","copySystemChecked","error","renderCopyBaseline","renderCopySystem","Fragment","renderRadioButtons","Form","FormGroup","helperTextInvalid","hasOwnProperty","detail","fieldId","isValid","TextInput","className","placeHolder","value","onChange","aria-label","submitBaselineName","bind","fromScratchChecked","setState","handleChecked","_","event","currentTarget","clearSelectedBaselines","selectedBaselineIds","entities","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","baselineData","id","Radio","isChecked","name","label","BaselinesTable","createBaselineModal","SystemsTable","key","isDisabled","createBaselineModalOpened","Modal","title","isOpen","onClose","width","isFooterLeftAligned","actions","renderActions","obj","array","createBaselineModalState","baselinesTableState","baselinesTableActions","exportToCSV","exportType","data","exportData","baselineRowData","EXPORT_BASELINES_LIST_TO_CSV","BaselinesKebab","kebabOpened","exportSelect","toggleKebab","baselineTableData","dropdownItems","DropdownItem","component","Dropdown","style","float","toggle","KebabToggle","onToggle","isPlain","string","baselinesKebabActions","BaselinesPage","window","insights","chrome","auth","getUser","Toolbar","ToolbarGroup","ToolbarItem","BaselinesSearchBar","EmptyState","EmptyStateIcon","icon","AddCircleOIcon","Title","size","EmptyStateBody","CardBody","renderToolbar","kebab","emptyState","baselineListLoading","Card","renderEmptyState","renderTable","fullBaselineListData"],"mappings":"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","file":"js/6-8ad6e6d5ef70528673ab.js","sourcesContent":["import types from './types';\nimport api from '../../../../api';\n\nfunction toggleCreateBaselineModal() {\n    return {\n        type: types.TOGGLE_CREATE_BASELINE_MODAL\n    };\n}\n\nfunction createBaseline(newBaseline, uuid = undefined) {\n    return {\n        type: types.CREATE_BASELINE,\n        payload: api.postNewBaseline(newBaseline, uuid)\n    };\n}\n\nexport default {\n    toggleCreateBaselineModal,\n    createBaseline\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from '../CreateBaselineModal/redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nclass CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    createBaseline = () => {\n        const { history, toggleCreateBaselineModal, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaselineModal();\n    }\n\n    render() {\n        return (\n            <Button\n                variant='primary'\n                onClick={ this.createBaseline }>\n                Create baseline\n            </Button>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaselineModal: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Modal, Radio, TextInput, Form, FormGroup } from '@patternfly/react-core';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nclass CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const { value } = event.currentTarget;\n            this.props.clearSelectedBaselines();\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds, history, entities } = this.props;\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (fromScratchChecked) {\n                newBaselineObject.baseline_facts = [];\n                await createBaseline(newBaselineObject);\n            } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                newBaselineObject = { display_name: baselineName };\n                await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n            } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                await createBaseline(newBaselineObject);\n            }\n\n            history.push('baselines/' + this.props.baselineData.id);\n            toggleCreateBaselineModal();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal } = this.props;\n\n        this.updateBaselineName('');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable createBaselineModal='true' />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <SystemsTable selectedSystemIds={ [] } createBaselineModal={ true } />\n        </React.Fragment>\n        );\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { error } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <br></br>\n            <b>Baseline name</b>\n            <br></br>\n            <Form>\n                <FormGroup\n                    type=\"text\"\n                    helperTextInvalid={ error.hasOwnProperty('detail') ? error.detail : null }\n                    fieldId=\"name\"\n                    isValid={ !error.hasOwnProperty('status') }\n                >\n                    <TextInput\n                        className=\"fact-value\"\n                        placeHolder=\"Baseline name\"\n                        value={ baselineName }\n                        type=\"text\"\n                        onChange={ this.updateBaselineName }\n                        isValid={ !error.hasOwnProperty('status') }\n                        aria-label=\"baseline name\"\n                    />\n                </FormGroup>\n            </Form>\n            <br></br>\n            <br></br>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked && entities && entities.selectedSystemIds !== undefined && entities.selectedSystemIds.length === 0)\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }>\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={ this.cancelModal }>\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineModalOpened } = this.props;\n\n        return (\n            <Modal\n                className=\"create-baseline-modal\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                width=\"auto\"\n                isFooterLeftAligned\n                actions={ this.renderActions() }\n            >\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    history: PropTypes.obj,\n    baselineData: PropTypes.obj,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    error: PropTypes.obj\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.selectedBaselineIds,\n        error: state.createBaselineModalState.error\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        clearSelectedBaselines: () => dispatch(baselinesTableActions.clearSelectedBaselines())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import types from './types';\n\nfunction exportToCSV(exportType, baselineData, baselineRowData = []) {\n    let data = {\n        exportType,\n        exportData: baselineData,\n        baselineRowData\n    };\n\n    return {\n        type: types.EXPORT_BASELINES_LIST_TO_CSV,\n        payload: data\n    };\n}\n\nexport default {\n    exportToCSV\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { baselinesKebabActions } from './redux';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nclass BaselinesKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.exportSelect = this.exportSelect.bind(this);\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    exportSelect() {\n        const { exportType, baselineTableData, baselineData, baselineRowData } = this.props;\n        this.toggleKebab();\n        if (exportType === 'baseline list') {\n            this.props.exportToCSV(exportType, baselineTableData);\n        } else if (exportType === 'baselines data') {\n            this.props.exportToCSV(exportType, baselineData, baselineRowData);\n        }\n    }\n\n    render() {\n        const { kebabOpened } = this.state;\n        const dropdownItems = [\n            <DropdownItem key=\"export\" component=\"button\" onClick={ this.exportSelect }>Export as CSV</DropdownItem>\n        ];\n        return (\n            <Dropdown\n                style={ { float: 'left' } }\n                className={ 'action-kebab' }\n                toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nBaselinesKebab.propTypes = {\n    exportToCSV: PropTypes.func,\n    baselineTableData: PropTypes.array,\n    exportType: PropTypes.string,\n    baselineData: PropTypes.array,\n    baselineRowData: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineTableData: state.baselinesTableState.baselineTableData,\n        baselineData: state.baselinesTableState.baselineData\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        exportToCSV: (exportType, exportData, baselineRowData) => {\n            dispatch(baselinesKebabActions.exportToCSV(exportType, exportData, baselineRowData));\n        }\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesKebab));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport BaselinesKebab from './BaselinesKebab/BaselinesKebab';\nimport BaselinesSearchBar from '../BaselinesSearchBar/BaselinesSearchBar';\n\nclass BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    renderToolbar() {\n        return (\n            <Toolbar className=\"drift-toolbar\">\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <BaselinesSearchBar />\n                    </ToolbarItem>\n                </ToolbarGroup>\n                <ToolbarGroup>\n                    <ToolbarItem>\n                        <CreateBaselineButton />\n                    </ToolbarItem>\n                    <ToolbarItem>\n                        <BaselinesKebab exportType='baseline list'/>\n                    </ToolbarItem>\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    }\n\n    renderEmptyState() {\n        return (\n            <center>\n                <EmptyState>\n                    <EmptyStateIcon icon={ AddCircleOIcon } />\n                    <br></br>\n                    <Title size=\"lg\">No baselines</Title>\n                    <EmptyStateBody>\n                        You currently have no baselines displayed.\n                        <br/>\n                        Please create a baseline to use in your System Comparison analysis.\n                    </EmptyStateBody>\n                    <CreateBaselineButton />\n                </EmptyState>\n            </center>\n        );\n    }\n\n    renderTable() {\n        return (\n            <CardBody>\n                { this.renderToolbar() }\n                <div>\n                    <BaselinesTable kebab='true'/>\n                </div>\n            </CardBody>\n        );\n    }\n\n    render() {\n        const { emptyState, baselineListLoading } = this.props;\n\n        /*eslint-disable camelcase*/\n        return (\n            <React.Fragment>\n                <CreateBaselineModal />\n                <PageHeader>\n                    <PageHeaderTitle title='Baselines'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light pf-m-opaque-100'>\n                        { (emptyState && baselineListLoading === false)\n                            ? this.renderEmptyState() : this.renderTable()\n                        }\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n        /*eslint-enable camelcase*/\n    }\n}\n\nBaselinesPage.propTypes = {\n    baselineListLoading: PropTypes.bool,\n    fullBaselineListData: PropTypes.array,\n    emptyState: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n    return {\n        baselineListLoading: state.baselinesTableState.baselineListLoading,\n        fullBaselineListData: state.baselinesTableState.fullBaselineListData,\n        emptyState: state.baselinesTableState.emptyState\n    };\n}\n\nexport default connect(mapStateToProps, null)(BaselinesPage);\n"],"sourceRoot":""}