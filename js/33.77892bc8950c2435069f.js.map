{"version":3,"sources":["webpack://drift-frontend/./src/SmartComponents/BaselinesPage/CreateBaselineModal/CreateBaselineModal.js","webpack://drift-frontend/./src/SmartComponents/BaselinesPage/BaselinesPage.js"],"names":["CreateBaselineModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","cancelModal","toggleCreateBaselineModal","clearSelectedBaselines","updateBaselineName","checkKeyPress","key","preventDefault","state","baselineName","submitBaselineName","renderModalBody","modalBody","copyBaselineChecked","copySystemChecked","createBaselineError","renderCopyBaseline","renderCopySystem","renderRadioButtons","className","Form","FormGroup","label","isRequired","type","helperTextInvalid","Object","prototype","hasOwnProperty","call","detail","fieldId","validated","onKeyPress","TextInput","placeholder","value","onChange","ValidatedOptions","aria-label","bind","fromScratchChecked","columns","title","transforms","sortable","cellWidth","setState","handleChecked","_","currentTarget","this","createBaseline","selectedBaselineIds","history","entities","selectedHSPIds","newBaselineObject","display_name","baseline_facts","length","selectedSystemIds","inventory_uuid","hsp_uuid","push","baselineData","id","Radio","isChecked","name","createBaselineModalOpened","hasReadPermissions","hasWritePermissions","loading","totalBaselines","BaselinesTable","tableId","tableData","hasMultiSelect","hasInventoryReadPermissions","historicalProfiles","SystemsTable","createBaselineModal","hasHistoricalDropdown","selectVariant","undefined","Button","variant","isDisabled","ouiaId","onClick","globalFilterState","Modal","width","isOpen","onClose","actions","renderActions","GlobalFilterAlert","status","Alert","isInline","Component","propTypes","PropTypes","updatePagination","withRouter","connect","createBaselineModalState","baselinesTableState","radioTable","emptyState","compareState","historicProfilesState","dispatch","createBaselineModalActions","uuid","baselinesTableActions","BaselinesPage","fetchBaseline","baselineId","map","item","onBulkSelect","ids","forEach","baseline","renderEmptyState","hasBaselinesWritePermissions","baselineError","revertBaselineFetch","emptyStateMessage","errorMessage","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","error","button","UndoIcon","AddCircleOIcon","CreateBaselineButton","window","insights","chrome","auth","getUser","appAction","clearEditBaselineData","CardBody","kebab","createButton","exportButton","permissions","inventoryRead","baselinesRead","baselinesWrite","PageHeader","PageHeaderTitle","Main","LockIcon","ErrorAlert","Card","renderTable","checkboxTable","editBaselineActions"],"mappings":"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","file":"js/33.77892bc8950c2435069f.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Alert, Button, Modal, Radio, TextInput, Form, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../../SystemsTable/SystemsTable';\nimport BaselinesTable from '../../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../../GlobalFilterAlert/GlobalFilterAlert';\nimport { createBaselineModalActions } from './redux';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\n\nexport class CreateBaselineModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitBaselineName = this.submitBaselineName.bind(this);\n\n        this.state = {\n            baselineName: '',\n            fromScratchChecked: true,\n            copyBaselineChecked: false,\n            copySystemChecked: false,\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(40) ]}\n            ]\n        };\n\n        this.updateBaselineName = value => {\n            this.setState({ baselineName: value });\n        };\n\n        this.handleChecked = (_, event) => {\n            const value = event.currentTarget.value;\n            this.props.clearSelectedBaselines('RADIO');\n\n            if (value === 'fromScratchChecked') {\n                this.setState({ fromScratchChecked: true, copyBaselineChecked: false, copySystemChecked: false });\n            } else if (value === 'copyBaselineChecked') {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: true, copySystemChecked: false });\n            } else {\n                this.setState({ fromScratchChecked: false, copyBaselineChecked: false, copySystemChecked: true });\n            }\n        };\n    }\n\n    async submitBaselineName() {\n        const { baselineName, fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaseline, toggleCreateBaselineModal, selectedBaselineIds,\n            history, entities, clearSelectedBaselines, selectedHSPIds } = this.props;\n\n        /*eslint-disable camelcase*/\n        let newBaselineObject = { display_name: baselineName };\n\n        try {\n            if (baselineName !== '') {\n                if (fromScratchChecked) {\n                    newBaselineObject.baseline_facts = [];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedBaselineIds.length === 1 && copyBaselineChecked) {\n                    newBaselineObject = { display_name: baselineName };\n                    await createBaseline(newBaselineObject, selectedBaselineIds[0]);\n                } else if (entities.selectedSystemIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.inventory_uuid = entities.selectedSystemIds[0];\n                    await createBaseline(newBaselineObject);\n                } else if (selectedHSPIds.length === 1 && copySystemChecked) {\n                    newBaselineObject.hsp_uuid = selectedHSPIds[0];\n                    await createBaseline(newBaselineObject);\n                }\n\n                history.push('baselines/' + this.props.baselineData.id);\n                toggleCreateBaselineModal();\n                clearSelectedBaselines('RADIO');\n            }\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n        /*eslint-enable camelcase*/\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n\n        let id = [ baselineTableData[rowId][0] ];\n        selectBaseline(id, isSelected, 'RADIO');\n    }\n\n    cancelModal = () => {\n        const { toggleCreateBaselineModal, clearSelectedBaselines } = this.props;\n\n        this.updateBaselineName('');\n        clearSelectedBaselines('RADIO');\n        toggleCreateBaselineModal();\n    }\n\n    renderRadioButtons() {\n        const { fromScratchChecked, copyBaselineChecked, copySystemChecked } = this.state;\n\n        return (<React.Fragment>\n            <Radio\n                isChecked={ fromScratchChecked }\n                id='create baseline'\n                name='baseline-create-options'\n                label='Create baseline from scratch'\n                value='fromScratchChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copyBaselineChecked }\n                id='copy baseline'\n                name='baseline-create-options'\n                label='Copy an existing baseline'\n                value='copyBaselineChecked'\n                onChange={ this.handleChecked }\n            />\n            <Radio\n                isChecked={ copySystemChecked }\n                id='copy system'\n                name='baseline-create-options'\n                label='Copy an existing system'\n                value='copySystemChecked'\n                onChange={ this.handleChecked }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopyBaseline() {\n        const { baselineTableData, createBaselineModalOpened, hasReadPermissions, hasWritePermissions, loading, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (<React.Fragment>\n            <b>Select baseline to copy from</b>\n            <BaselinesTable\n                tableId='RADIO'\n                onSelect={ this.onSelect }\n                tableData={ baselineTableData }\n                loading={ loading }\n                createBaselineModalOpened={ createBaselineModalOpened }\n                columns={ columns }\n                totalBaselines={ totalBaselines }\n                hasReadPermissions={ hasReadPermissions }\n                hasWritePermissions={ hasWritePermissions }\n                hasMultiSelect={ false }\n            />\n        </React.Fragment>\n        );\n    }\n\n    renderCopySystem() {\n        const { hasInventoryReadPermissions, entities, historicalProfiles } = this.props;\n\n        return (<React.Fragment>\n            <b>Select system to copy from</b>\n            <br></br>\n            <SystemsTable\n                selectedSystemIds={ [] }\n                createBaselineModal={ true }\n                hasHistoricalDropdown={ true }\n                hasMultiSelect={ false }\n                historicalProfiles={ historicalProfiles }\n                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                entities={ entities }\n                selectVariant='radio'\n            />\n        </React.Fragment>\n        );\n    }\n\n    checkKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this.state.baselineName ? this.submitBaselineName() : null;\n        }\n    }\n\n    renderModalBody = () => {\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        const { createBaselineError } = this.props;\n        let modalBody;\n\n        if (copyBaselineChecked) {\n            modalBody = this.renderCopyBaseline();\n        } else if (copySystemChecked) {\n            modalBody = this.renderCopySystem();\n        }\n\n        return (<React.Fragment>\n            { this.renderRadioButtons() }\n            <div className='md-padding-top md-padding-bottom'>\n                <Form>\n                    <FormGroup\n                        label='Baseline name'\n                        isRequired\n                        type=\"text\"\n                        helperTextInvalid={ Object.prototype.hasOwnProperty.call(createBaselineError, 'detail') ? createBaselineError.detail : null }\n                        fieldId=\"name\"\n                        validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? 'error' : null }\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            className=\"fact-value\"\n                            placeholder=\"Baseline name\"\n                            value={ baselineName }\n                            type=\"text\"\n                            onChange={ this.updateBaselineName }\n                            validated={ Object.prototype.hasOwnProperty.call(createBaselineError, 'status') ? ValidatedOptions.error : null }\n                            aria-label=\"baseline name\"\n                        />\n                    </FormGroup>\n                </Form>\n            </div>\n            { modalBody }\n        </React.Fragment>\n        );\n    }\n\n    renderActions() {\n        const { selectedBaselineIds, selectedHSPIds, entities } = this.props;\n        const { baselineName, copyBaselineChecked, copySystemChecked } = this.state;\n        let actions;\n        let selectedSystemIds = entities === undefined || entities.selectedSystemIds === undefined ? [] : entities.selectedSystemIds;\n\n        if (baselineName === ''\n            || (copyBaselineChecked && selectedBaselineIds.length === 0)\n            || (copySystemChecked &&\n                (selectedSystemIds.length === 0 && selectedHSPIds.length === 0)\n            )\n        ) {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    isDisabled\n                    ouiaId=\"create_baseline\"\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"cancel\"\n                >\n                    Cancel\n                </Button>\n            ];\n        } else {\n            actions = [\n                <Button\n                    key=\"confirm\"\n                    variant=\"primary\"\n                    onClick={ this.submitBaselineName }\n                    ouiaId=\"create_baseline\"\n                >\n                    Create baseline\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"link\"\n                    onClick={ this.cancelModal }\n                    ouiaId=\"cancel\"\n                >\n                    Cancel\n                </Button>\n            ];\n        }\n\n        return actions;\n    }\n\n    render() {\n        const { createBaselineError, createBaselineModalOpened, globalFilterState } = this.props;\n        const { copySystemChecked } = this.state;\n\n        return (\n            <Modal\n                className=\"drift\"\n                width=\"1200px\"\n                title=\"Create baseline\"\n                isOpen={ createBaselineModalOpened }\n                onClose={ this.cancelModal }\n                actions={ this.renderActions() }\n            >\n                { copySystemChecked\n                    ? <GlobalFilterAlert globalFilterState={ globalFilterState }/>\n                    : null\n                }\n                { createBaselineError.status\n                    ? <Alert\n                        variant='danger'\n                        isInline\n                        title={ 'Status: ' + createBaselineError.status }\n                        ouiaId=\"status\"\n                    >\n                        <p>\n                            { createBaselineError.detail }\n                        </p>\n                    </Alert>\n                    : <div></div>\n                }\n                { this.renderModalBody() }\n            </Modal>\n        );\n    }\n}\n\nCreateBaselineModal.propTypes = {\n    createBaselineModalOpened: PropTypes.bool,\n    createBaseline: PropTypes.func,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineData: PropTypes.object,\n    toggleCreateBaselineModal: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    entities: PropTypes.object,\n    selectedBaselineIds: PropTypes.array,\n    createBaselineError: PropTypes.object,\n    baselineTableData: PropTypes.array,\n    loading: PropTypes.bool,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasReadPermissions: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineData: state.createBaselineModalState.baselineData,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.radioTable.selectedBaselineIds,\n        createBaselineError: state.createBaselineModalState.createBaselineError,\n        loading: state.baselinesTableState.radioTable.loading,\n        emptyState: state.baselinesTableState.radioTable.emptyState,\n        baselineTableData: state.baselinesTableState.radioTable.baselineTableData,\n        totalBaselines: state.baselinesTableState.radioTable.totalBaselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        createBaseline: (newBaselineObject, uuid) => dispatch(createBaselineModalActions.createBaseline(newBaselineObject, uuid)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId))\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineModal));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { AddCircleOIcon, ExclamationCircleIcon, LockIcon, UndoIcon } from '@patternfly/react-icons';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport CreateBaselineButton from './CreateBaselineButton/CreateBaselineButton';\nimport CreateBaselineModal from './CreateBaselineModal/CreateBaselineModal';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { editBaselineActions } from './EditBaseline/redux';\nimport { PermissionContext } from '../../App';\n\nexport class BaselinesPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable, cellWidth(40) ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(45) ]},\n                { title: '', transforms: [ cellWidth(5) ]}\n            ],\n            emptyStateMessage: [\n                'You currently have no baselines displayed.',\n                'Create a baseline to use in your Comparison analysis.'\n            ],\n            errorMessage: [ 'The list of baselines cannot be displayed at this time. Please retry and if',\n                'the problem persists contact your system administrator.',\n                ''\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        await window.insights?.chrome?.appAction?.('baseline-list');\n    }\n\n    fetchBaseline = (baselineId) => {\n        const { history } = this.props;\n\n        history.push('baselines/' + baselineId);\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    renderTable(hasReadPermissions, hasWritePermissions) {\n        const { baselineTableData, loading, createBaselineModalOpened, clearEditBaselineData, selectedBaselineIds,\n            totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        clearEditBaselineData();\n\n        return (\n            <CardBody>\n                <div>\n                    <BaselinesTable\n                        tableId='CHECKBOX'\n                        hasMultiSelect={ true }\n                        onSelect={ this.onSelect }\n                        tableData={ baselineTableData }\n                        loading={ loading }\n                        columns={ columns }\n                        kebab={ true }\n                        createButton={ true }\n                        exportButton={ true }\n                        onClick={ this.fetchBaseline }\n                        createBaselineModalOpened={ createBaselineModalOpened }\n                        onBulkSelect={ this.onBulkSelect }\n                        selectedBaselineIds={ selectedBaselineIds }\n                        totalBaselines={ totalBaselines }\n                        hasReadPermissions={ hasReadPermissions }\n                        hasWritePermissions={ hasWritePermissions }\n                    />\n                </div>\n            </CardBody>\n        );\n    }\n\n    renderEmptyState = (hasBaselinesWritePermissions) => {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n        const { emptyStateMessage, errorMessage } = this.state;\n\n        if (!baselineError.status) {\n            return <EmptyStateDisplay\n                icon={ AddCircleOIcon }\n                title={ 'No baselines' }\n                text={ emptyStateMessage }\n                button={ <CreateBaselineButton\n                    emptyState={ emptyState }\n                    hasWritePermissions={ hasBaselinesWritePermissions }\n                    loading={ loading } /> }\n            />;\n        } else if (baselineError.status !== 200 && baselineError.status !== undefined) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Baselines cannot be displayed' }\n                text={ errorMessage }\n                error={ 'Error ' + baselineError.status + ': ' + baselineError.detail }\n                button={ <a onClick={ () => revertBaselineFetch('CHECKBOX') }>\n                    <UndoIcon className='reload-button' />\n                        Retry\n                </a> }\n            />;\n        }\n    }\n\n    render() {\n        const { baselineError, emptyState, loading, revertBaselineFetch } = this.props;\n\n        return (\n            <PermissionContext.Consumer>\n                { value =>\n                    <React.Fragment>\n                        <CreateBaselineModal\n                            hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                            hasReadPermissions={ value.permissions.baselinesRead }\n                            hasWritePermissions={ value.permissions.baselinesWrite }\n                        />\n                        <PageHeader>\n                            <PageHeaderTitle title='Baselines'/>\n                        </PageHeader>\n                        <Main>\n                            { value.permissions.baselinesRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Baselines' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : emptyState && !loading\n                                    ? this.renderEmptyState(value.permissions.baselinesWrite)\n                                    : <React.Fragment>\n                                        <ErrorAlert\n                                            error={ !emptyState && baselineError ? baselineError : {} }\n                                            onClose={ revertBaselineFetch }\n                                            tableId={ 'CHECKBOX' }\n                                        />\n                                        <Card className='pf-t-light pf-m-opaque-100'>\n                                            {\n                                                this.renderTable(value.permissions.baselinesRead, value.permissions.baselinesWrite)\n                                            }\n                                        </Card>\n                                    </React.Fragment>\n                            }\n                        </Main>\n                    </React.Fragment>\n                }\n            </PermissionContext.Consumer>\n        );\n    }\n}\n\nBaselinesPage.propTypes = {\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    emptyState: PropTypes.bool,\n    createBaselineModalOpened: PropTypes.bool,\n    selectBaseline: PropTypes.func,\n    history: PropTypes.object,\n    baselineError: PropTypes.object,\n    revertBaselineFetch: PropTypes.func,\n    clearEditBaselineData: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number\n};\n\nfunction mapStateToProps(state) {\n    return {\n        loading: state.baselinesTableState.checkboxTable.loading,\n        emptyState: state.baselinesTableState.checkboxTable.emptyState,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        createBaselineModalOpened: state.createBaselineModalState.createBaselineModalOpened,\n        baselineError: state.baselinesTableState.checkboxTable.baselineError,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId)),\n        clearEditBaselineData: () => dispatch(editBaselineActions.clearEditBaselineData())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BaselinesPage));\n"],"sourceRoot":""}