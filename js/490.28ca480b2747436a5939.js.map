{"version":3,"sources":["webpack://drift-frontend/./src/Utilities/SetHistory.js","webpack://drift-frontend/./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack://drift-frontend/./src/SmartComponents/StateIcon/StateIcon.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","map","item","onBulkSelect","ids","forEach","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","globalFilterState","hasBaselinesReadPermissions","hasBaselinesWritePermissions","hasInventoryReadPermissions","historicalProfiles","loading","totalBaselines","Modal","className","width","isOpen","onClose","actions","Button","key","variant","onClick","isDisabled","length","ouiaId","GlobalFilterAlert","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","hasMultiSelect","selectVariant","BaselinesTable","tableId","tableData","hasReadPermissions","hasWritePermissions","kebab","Component","propTypes","showModal","PropTypes","baselines","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","stateSort","Tooltip","name","position","content","tooltip","icon","ReferenceSelector","isReference","updateReferenceId","StarIcon","data-ouia-component-type","data-ouia-component-id","OutlinedStarIcon","type","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","moment","format","sort","ASC","LongArrowAltUpIcon","DESC","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","row","typeIcon","ServerIcon","BlueprintIcon","ClockIcon","header-id","TimesIcon","display_name","system_profile_exists","ExclamationTriangleIcon","last_updated","updated","HistoricalProfilesPopover","hasCompareButton","factSort","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","DriftTable","shiftReferenceToFront","index","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","hsp","Object","prototype","hasOwnProperty","call","system_id","hsps","find","indexOf","slice","concat","entries","location","Array","isArray","filter","setSelectedBaselines","selectHistoricProfiles","isFirstReference","setIsFirstReference","profile","reference","clearComparison","facts","rows","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","style","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","includes","renderState","comparison","renderRowChild","category","multivalues","subFactItem","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","historicProfileIds","historicProfilesActions","AddSystemButton","isTable","types","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","DropdownItem","display","Checkbox","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","filterByFact","checkKeyPress","activeFactFilters","handleFactFilter","preventDefault","factFilter","prevProps","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","aria-label","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ToolbarItem","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","PageHeader","PageHeaderTitle","Main","permissions","compareRead","ErrorAlert","Card","CardBody","baselinesRead","baselinesWrite","inventoryRead","pagination"],"mappings":"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","file":"js/490.28ca480b2747436a5939.js","sourcesContent":["import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, hasBaselinesReadPermissions,\n            hasBaselinesWritePermissions, hasInventoryReadPermissions, historicalProfiles, loading, entities, selectedBaselineIds,\n            selectedHSPIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ ((entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) || !entities) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0 }\n                            ouiaId=\"submit\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            ouiaId=\"cancel\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                hasReadPermissions={ hasBaselinesReadPermissions }\n                                hasWritePermissions={ hasBaselinesWritePermissions }\n                                kebab={ false }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        const { toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            toggleFactSort(sort);\n        } else {\n            toggleStateSort(sort);\n        }\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, referenceId, removeSystem, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport queryString from 'query-string';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        updateReferenceId(queryString.parse(location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { historicalProfiles, isFirstReference, referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, reference);\n        setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            setIsFirstReference(false);\n        } else {\n            clearComparison();\n        }\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                rows.push(<tr className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, referenceId, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, hasBaselinesReadPermissions, hasBaselinesWritePermissions,\n            hasInventoryReadPermissions, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    hasBaselinesReadPermissions={ hasBaselinesReadPermissions }\n                    hasBaselinesWritePermissions={ hasBaselinesWritePermissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () =>\n                        this.props.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.filterByFact(filter);\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters, handleFactFilter } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                handleFactFilter(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { setHistory } from '../../../Utilities/SetHistory';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    handleFactFilter(id);\n                } else {\n                    filterByFact('');\n                }\n            }\n        } else {\n            this.clearAllStateChips();\n            this.clearAllFactChips();\n        }\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, setIsFirstReference, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        setIsFirstReference(true);\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter,\n            loading, page, perPage, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen, isEmpty } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                        <ToolbarGroup variant=\"filter-group\">\n                            { !isEmpty\n                                ? <ToolbarItem>\n                                    <a onClick={ () => this.clearFilters() } >\n                                        Clear filters\n                                    </a>\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, filterByFact, handleFactFilter, history, loading, page, perPage, stateFilters,\n            totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    hasBaselinesReadPermissions={ value.permissions.baselinesRead }\n                                                    hasBaselinesWritePermissions={ value.permissions.baselinesWrite }\n                                                    hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    ouiaId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}