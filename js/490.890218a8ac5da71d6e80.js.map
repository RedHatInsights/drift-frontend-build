{"version":3,"sources":["webpack://drift-frontend/./src/Utilities/SetHistory.js","webpack://drift-frontend/./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack://drift-frontend/./src/SmartComponents/StateIcon/StateIcon.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","map","item","onBulkSelect","ids","forEach","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","selectedSystemIds","systems","system","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","globalFilterState","hasBaselinesReadPermissions","hasBaselinesWritePermissions","hasInventoryReadPermissions","historicalProfiles","loading","totalBaselines","Modal","className","width","isOpen","onClose","actions","Button","key","variant","onClick","isDisabled","length","ouiaId","GlobalFilterAlert","Tabs","activeKey","Tab","eventKey","SystemsTable","hasHistoricalDropdown","hasMultiSelect","selectVariant","BaselinesTable","tableId","tableData","hasReadPermissions","hasWritePermissions","kebab","Component","propTypes","showModal","PropTypes","baselines","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","stateSort","Tooltip","name","position","content","tooltip","icon","ReferenceSelector","isReference","updateReferenceId","StarIcon","OutlinedStarIcon","type","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","moment","format","sort","ASC","LongArrowAltUpIcon","DESC","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","row","typeIcon","ServerIcon","BlueprintIcon","ClockIcon","header-id","TimesIcon","display_name","system_profile_exists","ExclamationTriangleIcon","last_updated","updated","HistoricalProfilesPopover","hasCompareButton","factSort","toggleSort","data-ouia-component-type","data-ouia-component-id","renderSortButton","renderSystemHeaders","renderHeaderRow","DriftTable","shiftReferenceToFront","index","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","hsp","Object","prototype","hasOwnProperty","call","system_id","hsps","find","indexOf","slice","concat","entries","location","Array","isArray","filter","setSelectedBaselines","selectHistoricProfiles","isFirstReference","setIsFirstReference","profile","reference","clearComparison","facts","rows","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","style","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","includes","renderState","comparison","renderRowChild","multivalues","subFactItem","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","historicProfileIds","historicProfilesActions","AddSystemButton","isTable","types","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","stateFilter","DropdownItem","Checkbox","display","label","isChecked","selected","onChange","addStateFilter","stateFilters","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","filterByFact","checkKeyPress","activeFactFilters","handleFactFilter","preventDefault","factFilter","prevProps","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","aria-label","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ToolbarItem","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","PageHeader","PageHeaderTitle","Main","permissions","compareRead","ErrorAlert","Card","CardBody","baselinesRead","baselinesWrite","inventoryRead","pagination"],"mappings":"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","file":"js/490.890218a8ac5da71d6e80.js","sourcesContent":["import queryString from 'query-string';\n\nexport function setHistory(history, systemIds = [], baselineIds = [], hspIds = [], referenceId) {\n    /*eslint-disable camelcase*/\n    history.push({\n        search: '?' + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    selectedSystemIds() {\n        let ids = this.props.systems.map(function (system) {\n            return system.id;\n        });\n\n        return ids ? ids : [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, hasBaselinesReadPermissions,\n            hasBaselinesWritePermissions, hasInventoryReadPermissions, historicalProfiles, loading, entities, selectedBaselineIds,\n            selectedHSPIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ ((entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) || !entities) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0 }\n                            ouiaId=\"submit\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            ouiaId=\"cancel\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                hasReadPermissions={ hasBaselinesReadPermissions }\n                                hasWritePermissions={ hasBaselinesWritePermissions }\n                                kebab={ false }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    toggleSort(sortType, sort) {\n        const { toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            toggleFactSort(sort);\n        } else {\n            toggleStateSort(sort);\n        }\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, referenceId, removeSystem, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a onClick={ () => removeSystem(item) } className=\"remove-system-icon\">\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\">\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport queryString from 'query-string';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\nimport { setHistory } from '../../../Utilities/SetHistory';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    setSystemIds() {\n        this.systemIds = queryString.parse(this.props.location.search).system_ids;\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        this.baselineIds = queryString.parse(this.props.location.search).baseline_ids;\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { selectHistoricProfiles } = this.props;\n\n        this.HSPIds = queryString.parse(this.props.location.search).hsp_ids;\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        updateReferenceId(queryString.parse(location.search).reference_id);\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { historicalProfiles, isFirstReference, referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n    }\n\n    fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setHistory(this.props.history, systemIds, baselineIds, HSPIds, reference);\n        setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            setIsFirstReference(false);\n        } else {\n            clearComparison();\n        }\n    }\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr>{ row }</tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                rows.push(<tr className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>{ row }</tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, referenceId, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table className=\"pf-c-table pf-m-compact drift-table\">\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, hasBaselinesReadPermissions, hasBaselinesWritePermissions,\n            hasInventoryReadPermissions, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    hasBaselinesReadPermissions={ hasBaselinesReadPermissions }\n                    hasBaselinesWritePermissions={ hasBaselinesWritePermissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState,\n        referenceId: state.compareState.referenceId\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId=\"add\"\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem>\n                <Checkbox\n                    id={ stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () =>\n                        this.props.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    toggle={ <DropdownToggle onToggle={ this.onToggle }>\n                        View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(function(filter) {\n        this.props.filterByFact(filter);\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters, handleFactFilter } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                handleFactFilter(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { setHistory } from '../../../Utilities/SetHistory';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem key=\"remove-systems\" component=\"button\" onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    handleFactFilter(id);\n                } else {\n                    filterByFact('');\n                }\n            }\n        } else {\n            this.clearAllStateChips();\n            this.clearAllFactChips();\n        }\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = () => {\n        const { clearComparisonFilters } = this.props;\n\n        clearComparisonFilters();\n    }\n\n    clearComparison = () => {\n        const { history, clearComparison, clearSelectedBaselines, setIsFirstReference, updateReferenceId } = this.props;\n\n        clearComparison();\n        clearSelectedBaselines('CHECKBOX');\n        setIsFirstReference(true);\n        updateReferenceId();\n        setHistory(history, []);\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter,\n            loading, page, perPage, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen, isEmpty } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                        <ToolbarGroup variant=\"filter-group\">\n                            { !isEmpty\n                                ? <ToolbarItem>\n                                    <a onClick={ () => this.clearFilters() } >\n                                        Clear filters\n                                    </a>\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, filterByFact, handleFactFilter, history, loading, page, perPage, stateFilters,\n            totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    hasBaselinesReadPermissions={ value.permissions.baselinesRead }\n                                                    hasBaselinesWritePermissions={ value.permissions.baselinesWrite }\n                                                    hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}