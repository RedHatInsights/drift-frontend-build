{"version":3,"sources":["webpack://drift-frontend/./src/SmartComponents/AddSystemModal/redux/actions.js","webpack://drift-frontend/./src/SmartComponents/BaselinesPage/CreateBaselineButton/CreateBaselineButton.js","webpack://drift-frontend/./src/SmartComponents/BaselinesPage/CreateBaselineModal/redux/actions.js","webpack://drift-frontend/./src/SmartComponents/BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal.js","webpack://drift-frontend/./src/SmartComponents/BaselinesTable/BaselineTableKebab/BaselineTableKebab.js","webpack://drift-frontend/./src/SmartComponents/BaselinesTable/BaselinesToolbar/BaselinesToolbar.js","webpack://drift-frontend/./src/SmartComponents/BaselinesTable/BaselinesTable.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/ActionKebab/ActionKebab.js","webpack://drift-frontend/./src/SmartComponents/GlobalFilterAlert/GlobalFilterAlert.js","webpack://drift-frontend/./src/SmartComponents/Pagination/Pagination.js","webpack://drift-frontend/./src/SmartComponents/SystemsTable/SystemsTable.js"],"names":["toggleAddSystemModal","type","types","selectActiveTab","newActiveTab","payload","CreateBaselineButton","props","createBaseline","history","toggleCreateBaselineModal","addSystemModalOpened","location","pathname","push","this","emptyState","hasWritePermissions","loading","undefined","Button","id","variant","onClick","ouiaId","isDisabled","Tooltip","content","className","Component","propTypes","PropTypes","withRouter","connect","state","addSystemModalState","dispatch","createBaselineModalActions","addSystemModalActions","newBaseline","uuid","api","DeleteBaselinesModal","deleteBaselines","bind","clearSelectedBaselines","deleteSelectedBaselines","selectedBaselineIds","fetchWithParams","baselineId","tableId","toggleModal","apiBody","baseline_ids","modalOpened","deleteMessage","length","Modal","ModalVariant","title","isOpen","onClose","actions","key","revertBaselineFetch","baselinesTableState","checkboxTable","baselinesTableActions","BaselineTableKebab","fetchBaseline","baselineRowData","onKebabToggle","setState","dropdownItems","DropdownItem","component","Dropdown","style","float","toggle","KebabToggle","onToggle","isPlain","BaselinesToolbar","dropdownOpen","buildDropdownList","isDeleteDisabled","actionKebabItems","setTextFilter","value","nameSearch","handleSearch","clearTextFilter","debounce","search","onSearch","bulkSelectItems","onBulkSelect","exportToCSV","tableData","clearFilters","createButton","exportButton","hasMultiSelect","hasReadPermissions","kebab","page","perPage","totalBaselines","updatePagination","selected","filter","baseline","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","BulkSelect","count","items","checked","helpers","onSelect","ToolbarFilter","chips","deleteChip","categoryName","ConditionalFilter","placeholder","onChange","event","ExportCSVButton","ActionKebab","total","isCompact","clearSort","BaselinesTable","fetchParams","fetchBaselines","baselinesReducerHelpers","orderBy","orderHow","newSearch","onSort","_event","index","direction","sortBy","toUpperCase","pagination","emptyStateMessage","window","insights","chrome","auth","getUser","table","forEach","row","link","columns","tableRows","SkeletonTable","rowSize","hasRadio","canSelectAll","isSelectable","emptyRow","EmptyTable","EmptyStateDisplay","text","cells","colSpan","Table","aria-label","rows","TableHeader","TableBody","icon","LockIcon","color","renderRows","selectVariant","RowSelectVariant","renderTable","params","exportData","kebabOpened","toggleKebab","GlobalFilterAlert","buildBody","globalFilterState","sidsFilter","tagsFilter","workloadsFilter","filters","Object","keys","i","tags","tagsList","tag","split","entries","toggleIsOpen","SAP","isSelected","Alert","isInline","actionClose","AlertActionCloseButton","TablePagination","onSetPage","onPerPageSelect","widgetId","Pagination","itemCount","SystemsTable","selectedSystemIds","setSelectedSystemIds","driftClearFilters","createBaselineModal","hasHistoricalDropdown","historicalProfiles","selectHistoricProfiles","updateColumns","hasInventoryReadPermissions","entities","selectEntities","useSelector","deselectHistoricalProfiles","toSelect","bulk","useEffect","entityListener","addNewListener","actionType","callback","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","getRegistry","register","selectedReducer","showTags","noDetail","customFilters","system_profile","sap_system","sap_sids","tableProps","bulkSelect","selectedHSPIds","defaultProps","historicProfileIds","historicProfilesActions","systemIds","compareActions","systemsTableActions"],"mappings":"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","file":"js/376.c4538bf5c981a85dd901.js","sourcesContent":["import types from './types';\n\nfunction toggleAddSystemModal() {\n    return {\n        type: types.OPEN_ADD_SYSTEM_MODAL\n    };\n}\n\nfunction selectActiveTab(newActiveTab) {\n    return {\n        type: types.SELECT_ACTIVE_TAB,\n        payload: newActiveTab\n    };\n}\n\nexport default {\n    toggleAddSystemModal,\n    selectActiveTab\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\n\nimport { createBaselineModalActions } from '../CreateBaselineModal/redux';\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class CreateBaselineButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    createBaseline = () => {\n        const { history, toggleCreateBaselineModal, addSystemModalOpened, toggleAddSystemModal } = this.props;\n\n        if (history.location.pathname === '/') {\n            if (addSystemModalOpened === true) {\n                toggleAddSystemModal();\n            }\n\n            history.push({ pathname: 'baselines' });\n        }\n\n        toggleCreateBaselineModal();\n    }\n\n    render() {\n        const { emptyState, hasWritePermissions, loading } = this.props;\n\n        return (\n            <React.Fragment>\n                { !hasWritePermissions && hasWritePermissions !== undefined\n                    ? <Tooltip\n                        content={ <div>You do not have permissions to perform this action</div> }\n                    >\n                        <div className={ emptyState ? 'tooltip-button-margin' : null }>\n                            <Button\n                                id='create-baseline-button'\n                                variant='primary'\n                                onClick={ this.createBaseline }\n                                isDisabled\n                                ouiaId=\"create\"\n                            >\n                                Create baseline\n                            </Button>\n                        </div>\n                    </Tooltip>\n                    : <Button\n                        id='create-baseline-button'\n                        variant='primary'\n                        onClick={ this.createBaseline }\n                        ouiaId=\"create\"\n                        isDisabled={ loading }>\n                        Create baseline\n                    </Button>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nCreateBaselineButton.propTypes = {\n    toggleCreateBaselineModal: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    history: PropTypes.object,\n    addSystemModalOpened: PropTypes.bool,\n    loading: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    emptyState: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleCreateBaselineModal: () => dispatch(createBaselineModalActions.toggleCreateBaselineModal()),\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal())\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CreateBaselineButton));\n","import types from './types';\nimport api from '../../../../api';\n\nfunction toggleCreateBaselineModal() {\n    return {\n        type: types.TOGGLE_CREATE_BASELINE_MODAL\n    };\n}\n\nfunction createBaseline(newBaseline, uuid = undefined) {\n    return {\n        type: types.CREATE_BASELINE,\n        payload: api.postNewBaseline(newBaseline, uuid)\n    };\n}\n\nexport default {\n    toggleCreateBaselineModal,\n    createBaseline\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nimport { baselinesTableActions } from '../../BaselinesTable/redux/index';\n\nexport class DeleteBaselinesModal extends Component {\n    constructor(props) {\n        super(props);\n        this.deleteBaselines = this.deleteBaselines.bind(this);\n    }\n\n    async deleteBaselines() {\n        const {\n            clearSelectedBaselines,\n            deleteSelectedBaselines,\n            selectedBaselineIds,\n            fetchWithParams,\n            baselineId,\n            tableId,\n            toggleModal\n        } = this.props;\n        let apiBody;\n\n        /*eslint-disable camelcase*/\n        if (baselineId) {\n            apiBody = { baseline_ids: [ baselineId ]};\n        } else {\n            apiBody = { baseline_ids: selectedBaselineIds };\n        }\n        /*eslint-enable camelcase*/\n\n        toggleModal();\n\n        try {\n            await deleteSelectedBaselines(apiBody, tableId);\n            clearSelectedBaselines(tableId);\n            fetchWithParams();\n        } catch (e) {\n            // do nothing and let redux handle\n        }\n    }\n\n    render() {\n        const { baselineId, modalOpened, selectedBaselineIds, toggleModal } = this.props;\n        const deleteMessage = baselineId || selectedBaselineIds.length === 1 ? 'Delete baseline' : 'Delete baselines';\n\n        return (\n            <Modal\n                className=\"drift\"\n                variant={ ModalVariant.small }\n                title={ deleteMessage }\n                isOpen={ modalOpened }\n                onClose={ toggleModal }\n                actions = { [\n                    <Button\n                        key=\"confirm\"\n                        variant=\"danger\"\n                        onClick={ this.deleteBaselines }\n                        ouiaId=\"delete\"\n                    >\n                        { deleteMessage }\n                    </Button>,\n                    <Button\n                        key=\"cancel\"\n                        variant=\"link\"\n                        onClick={ toggleModal }\n                        ouiaId=\"cancel\"\n                    >\n                    Cancel\n                    </Button>\n                ] }\n            >\n                Deleting a baseline is permanent and cannot be undone.\n            </Modal>\n        );\n    }\n}\n\nDeleteBaselinesModal.propTypes = {\n    modalOpened: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    deleteSelectedBaselines: PropTypes.func,\n    fetchWithParams: PropTypes.func,\n    baselineId: PropTypes.string,\n    tableId: PropTypes.string,\n    toggleModal: PropTypes.func,\n    revertBaselineFetch: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        deleteSelectedBaselines: (apiBody, tableId) => dispatch(baselinesTableActions.deleteSelectedBaselines(apiBody, tableId)),\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        revertBaselineFetch: (tableId) => dispatch(baselinesTableActions.revertBaselineFetch(tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteBaselinesModal);\n","\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Dropdown, KebabToggle, DropdownItem } from '@patternfly/react-core';\n\nimport DeleteBaselinesModal from '../../BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal';\n\nexport class BaselineTableKebab extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            modalOpened: false\n        };\n\n        this.onKebabToggle = this.onKebabToggle.bind(this);\n\n        this.toggleModal = () => {\n            const { modalOpened } = this.state;\n            this.setState({\n                modalOpened: !modalOpened\n            });\n        };\n    }\n\n    onKebabToggle(isOpen) {\n        this.setState({\n            isOpen\n        });\n    }\n\n    fetchBaseline = () => {\n        const { baselineRowData, history } = this.props;\n\n        history.push('baselines/' + baselineRowData[0]);\n    }\n\n    render() {\n        const { isOpen, modalOpened } = this.state;\n        const { baselineRowData, fetchWithParams, tableId } = this.props;\n        const dropdownItems = [\n            <DropdownItem\n                key=\"edit\"\n                component=\"button\"\n                onClick={ this.fetchBaseline }>\n                Edit\n            </DropdownItem>,\n            <DropdownItem\n                key=\"delete\"\n                component=\"button\"\n                onClick={ this.toggleModal }>\n                Delete\n            </DropdownItem>\n        ];\n\n        return (\n            <React.Fragment>\n                { modalOpened\n                    ? <DeleteBaselinesModal\n                        modalOpened={ modalOpened }\n                        baselineId={ baselineRowData[0] }\n                        tableId={ tableId }\n                        fetchWithParams={ fetchWithParams }\n                        toggleModal={ this.toggleModal }\n                    />\n                    : null\n                }\n                <Dropdown\n                    style={{ float: 'right' }}\n                    className={ 'baseline-table-kebab' }\n                    toggle={ <KebabToggle onToggle={ (isOpen) => this.onKebabToggle(isOpen) } /> }\n                    isOpen={ isOpen }\n                    dropdownItems={ dropdownItems }\n                    isPlain\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nBaselineTableKebab.propTypes = {\n    baselineRowData: PropTypes.array,\n    history: PropTypes.object,\n    tableId: PropTypes.string,\n    fetchWithParams: PropTypes.func\n};\n\nexport default withRouter(BaselineTableKebab);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nimport { DropdownItem, Toolbar, ToolbarFilter, ToolbarGroup, ToolbarItem, ToolbarContent } from '@patternfly/react-core';\nimport { BulkSelect, ConditionalFilter } from '@redhat-cloud-services/frontend-components';\n\nimport CreateBaselineButton from '../../BaselinesPage/CreateBaselineButton/CreateBaselineButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport ActionKebab from '../../DriftPage/ActionKebab/ActionKebab';\nimport DeleteBaselinesModal from '../../BaselinesPage/DeleteBaselinesModal/DeleteBaselinesModal';\nimport helpers from '../../helpers';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class BaselinesToolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameSearch: '',\n            modalOpened: false,\n            bulkSelectItems: [\n                {\n                    title: 'Select all',\n                    key: 'select-all',\n                    onClick: () => this.props.onBulkSelect(true)\n                }, {\n                    title: 'Select none',\n                    key: 'select-none',\n                    onClick: () => this.props.onBulkSelect(false)\n                }\n            ],\n            dropdownOpen: false,\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    onClick={ () => this.props.exportToCSV(this.props.tableData) }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ]\n        };\n\n        this.handleSearch = this.handleSearch.bind(this);\n        this.clearFilters = this.clearFilters.bind(this);\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    async clearFilters() {\n        const { onSearch } = this.props;\n\n        this.setState({\n            nameSearch: ''\n        });\n\n        onSearch('');\n    }\n\n    buildDropdownList = () => {\n        const { isDeleteDisabled } = this.props;\n        let actionKebabItems = [];\n\n        actionKebabItems.push(<DropdownItem\n            key=\"multi-delete\"\n            component=\"button\"\n            onClick={ this.toggleModal }\n            isDisabled={ isDeleteDisabled }\n        >\n            Delete baselines\n        </DropdownItem>);\n\n        return actionKebabItems;\n    }\n\n    toggleModal = () => {\n        const { modalOpened } = this.state;\n\n        this.setState({\n            modalOpened: !modalOpened\n        });\n    }\n\n    setTextFilter = (value) => {\n        this.setState({ nameSearch: value });\n        this.handleSearch(value);\n    }\n\n    clearTextFilter = () => {\n        this.setState({ nameSearch: '' });\n        this.handleSearch('');\n    }\n\n    handleSearch = debounce(function(search) {\n        this.props.onSearch(search);\n    }, 250)\n\n    render() {\n        const { createButton, exportButton, fetchWithParams, hasMultiSelect, hasReadPermissions,\n            hasWritePermissions, kebab, loading, onBulkSelect, tableData, tableId,\n            page, perPage, totalBaselines, updatePagination } = this.props;\n        const { bulkSelectItems, dropdownItems, dropdownOpen, modalOpened, nameSearch } = this.state;\n        let selected = tableData.filter(baseline => baseline.selected === true).length;\n\n        return (\n            <React.Fragment>\n                <DeleteBaselinesModal\n                    modalOpened={ modalOpened }\n                    tableId={ tableId }\n                    fetchWithParams={ fetchWithParams }\n                    toggleModal={ this.toggleModal }\n                />\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.clearFilters }>\n                    <ToolbarContent>\n                        { hasMultiSelect\n                            ? <ToolbarGroup variant='filter-group'>\n                                <ToolbarItem>\n                                    <BulkSelect\n                                        count={ selected > 0 ? selected : null }\n                                        items={ bulkSelectItems }\n                                        checked={ helpers.findCheckedValue(tableData.length, selected) }\n                                        onSelect={ () => onBulkSelect(!selected > 0) }\n                                        isDisabled={ tableData.length === 0\n                                            || (!hasWritePermissions && kebab)\n                                            || (!hasReadPermissions && !createButton) }\n                                    />\n                                </ToolbarItem>\n                            </ToolbarGroup>\n                            : null\n                        }\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ nameSearch !== '' ? [ nameSearch ] : [] }\n                                deleteChip={ this.clearFilters }\n                                categoryName=\"Baseline name\"\n                            >\n                                <ConditionalFilter\n                                    placeholder=\"Filter by name\"\n                                    value={ nameSearch }\n                                    onChange={ (event, value) => this.setTextFilter(value) }\n                                    isDisabled={ !hasReadPermissions || !hasWritePermissions }\n                                />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            { createButton ?\n                                <ToolbarItem>\n                                    <CreateBaselineButton\n                                        loading={ loading }\n                                        hasWritePermissions={ hasWritePermissions }\n                                    />\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            { exportButton ?\n                                <ToolbarItem>\n                                    <ExportCSVButton\n                                        dropdownItems={ dropdownItems }\n                                        isOpen={ dropdownOpen }\n                                        onToggle={ this.onToggle }\n                                    />\n                                </ToolbarItem>\n                                : null\n                            }\n                            { kebab ?\n                                <ToolbarItem>\n                                    <ActionKebab dropdownItems={ this.buildDropdownList() } />\n                                </ToolbarItem>\n                                : null\n                            }\n                        </ToolbarGroup>\n                        <ToolbarItem variant=\"pagination\">\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ !hasReadPermissions ? 0 : totalBaselines }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                tableId={ tableId }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesToolbar.propTypes = {\n    createButton: PropTypes.bool,\n    exportButton: PropTypes.bool,\n    kebab: PropTypes.bool,\n    fetchWithParams: PropTypes.func,\n    onSearch: PropTypes.func,\n    tableId: PropTypes.string,\n    tableData: PropTypes.array,\n    onBulkSelect: PropTypes.func,\n    hasMultiSelect: PropTypes.bool,\n    clearSort: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    isDeleteDisabled: PropTypes.bool,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalBaselines: PropTypes.number,\n    updatePagination: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    loading: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool,\n    hasReadPermissions: PropTypes.bool\n};\n\nexport default BaselinesToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { RowSelectVariant, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { EmptyTable, SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport { Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport BaselineTableKebab from './BaselineTableKebab/BaselineTableKebab';\nimport { baselinesTableActions } from './redux';\nimport baselinesReducerHelpers from './redux/helpers';\nimport BaselinesToolbar from './BaselinesToolbar/BaselinesToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport TablePagination from '../Pagination/Pagination';\n\nexport class BaselinesTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            sortBy: {\n                index: 1,\n                direction: 'asc'\n            },\n            search: undefined,\n            orderBy: 'display_name',\n            orderHow: 'ASC',\n            page: 1,\n            perPage: 20,\n            emptyStateMessage: [\n                'This filter criteria matches no baselines.',\n                'Try changing your filter settings.'\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n        this.fetchWithParams();\n    }\n\n    fetchWithParams = (fetchParams) => {\n        const { tableId, fetchBaselines } = this.props;\n\n        fetchParams = {\n            ...this.state,\n            ...fetchParams\n        };\n\n        baselinesReducerHelpers.fetchBaselines(tableId, fetchBaselines, fetchParams);\n    }\n\n    onSearch = (search) => {\n        const { orderBy, orderHow } = this.state;\n\n        let newSearch = search;\n        this.setState({ search });\n        this.fetchWithParams({ orderBy, orderHow, search: newSearch });\n    }\n\n    onSort = (_event, index, direction) => {\n        const { search } = this.state;\n        const { hasWritePermissions } = this.props;\n        let orderBy = '';\n\n        if (index === 0) {\n            orderBy = 'display_name';\n        } else if (index === 1) {\n            orderBy = !hasWritePermissions ? 'updated' : 'display_name';\n        } else if (index === 2) {\n            orderBy = 'updated';\n        }\n\n        this.setState({\n            sortBy: {\n                index,\n                direction\n            },\n            orderHow: direction.toUpperCase(),\n            orderBy\n        });\n\n        this.fetchWithParams({ orderBy, orderHow: direction.toUpperCase(), search });\n    }\n\n    updatePagination = (pagination) => {\n        this.setState({ page: pagination.page, perPage: pagination.perPage });\n        this.fetchWithParams({ page: pagination.page, perPage: pagination.perPage });\n    }\n\n    renderRows(hasWritePermissions) {\n        const { tableData, kebab, onClick, tableId } = this.props;\n        let table = [];\n\n        tableData.forEach((baseline) => {\n            let row = [];\n\n            if (onClick) {\n                let link = <div>\n                    <a className=\"pointer active-blue\"\n                        onClick={ () => onClick(baseline[0]) }\n                    >\n                        { baseline[1] }\n                    </a>\n                </div>;\n                row.push(link);\n            } else {\n                row.push(baseline[1]);\n            }\n\n            row.push(baseline[2]);\n\n            if (kebab && hasWritePermissions) {\n                let kebab = <BaselineTableKebab\n                    tableId={ tableId }\n                    baselineRowData={ baseline }\n                    fetchWithParams={ this.fetchWithParams }\n                />;\n                row.push(<div>{ kebab }</div>);\n            }\n\n            if (baseline.selected) {\n                row.selected = true;\n            }\n\n            table.push(row);\n        });\n\n        return table;\n    }\n\n    renderTable(hasWritePermissions, hasReadPermissions) {\n        const { columns, createButton, hasMultiSelect, kebab, loading, onSelect, tableData, tableId } = this.props;\n        const { emptyStateMessage } = this.state;\n        let tableRows = [];\n        let table;\n\n        if (!loading) {\n            if (tableData.length === 0) {\n                let emptyRow = <EmptyTable>\n                    <EmptyStateDisplay\n                        title={ 'No matching baselines found' }\n                        text={ emptyStateMessage }\n                    />\n                </EmptyTable>;\n\n                tableRows.push({\n                    cells: [{\n                        title: emptyRow,\n                        props: { colSpan: columns.length }\n                    }]\n                });\n\n                table = <Table\n                    aria-label=\"Baselines Table\"\n                    cells={ columns }\n                    rows={ tableRows }\n                    canSelectAll={ false }\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>;\n            } else {\n                if (!hasReadPermissions && !createButton) {\n                    return <EmptyStateDisplay\n                        icon={ LockIcon }\n                        color='#6a6e73'\n                        title={ 'You do not have access to Baselines' }\n                        text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                    />;\n                } else {\n                    tableRows = this.renderRows(hasWritePermissions);\n\n                    table = <Table\n                        aria-label=\"Baselines Table\"\n                        onSort={ this.onSort }\n                        onSelect={ hasWritePermissions || (tableId === 'CHECKBOX' && !kebab)\n                            ? onSelect\n                            : false }\n                        sortBy={ this.state.sortBy }\n                        cells={ columns }\n                        rows={ tableRows }\n                        canSelectAll={ false }\n                        selectVariant={ !hasMultiSelect ? RowSelectVariant.radio : RowSelectVariant.checkbox }\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>;\n                }\n            }\n        } else if (loading) {\n            table = <SkeletonTable\n                columns={ columns }\n                rowSize={ 8 }\n                onSelect={ true }\n                hasRadio={ !hasMultiSelect }\n                canSelectAll={ false }\n                isSelectable={ true }\n            />;\n        }\n\n        return table;\n    }\n\n    render() {\n        const { kebab, createButton, exportToCSV, exportButton, hasMultiSelect, loading, onBulkSelect, selectedBaselineIds,\n            tableData, tableId, totalBaselines, hasReadPermissions, hasWritePermissions } = this.props;\n        const { page, perPage } = this.state;\n\n        return (\n            <React.Fragment>\n                <BaselinesToolbar\n                    createButton={ createButton }\n                    exportButton={ exportButton }\n                    kebab={ kebab }\n                    onSearch={ this.onSearch }\n                    tableId={ tableId }\n                    fetchWithParams={ this.fetchWithParams }\n                    tableData={ tableData }\n                    onBulkSelect={ onBulkSelect }\n                    hasMultiSelect={ hasMultiSelect }\n                    selectedBaselineIds={ selectedBaselineIds }\n                    isDeleteDisabled={ selectedBaselineIds?.length < 1 }\n                    page={ page }\n                    perPage={ perPage }\n                    totalBaselines={ totalBaselines }\n                    updatePagination={ this.updatePagination }\n                    exportToCSV={ exportToCSV }\n                    loading={ loading }\n                    hasWritePermissions={ hasWritePermissions }\n                    hasReadPermissions={ hasReadPermissions }\n                />\n                { this.renderTable(hasWritePermissions, hasReadPermissions) }\n                <Toolbar>\n                    <ToolbarGroup className='pf-c-pagination'>\n                        <ToolbarItem>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ !hasReadPermissions ? 0 : totalBaselines }\n                                isCompact={ false }\n                                updatePagination={ this.updatePagination }\n                                tableId={ tableId }\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nBaselinesTable.propTypes = {\n    loading: PropTypes.bool,\n    tableData: PropTypes.array,\n    fetchBaselines: PropTypes.func,\n    tableId: PropTypes.string,\n    hasMultiSelect: PropTypes.bool,\n    onClick: PropTypes.func,\n    kebab: PropTypes.bool,\n    createButton: PropTypes.bool,\n    exportButton: PropTypes.bool,\n    onSelect: PropTypes.func,\n    columns: PropTypes.array,\n    onBulkSelect: PropTypes.func,\n    selectedBaselineIds: PropTypes.array,\n    totalBaselines: PropTypes.number,\n    exportToCSV: PropTypes.func,\n    hasReadPermissions: PropTypes.bool,\n    hasWritePermissions: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchBaselines: (tableId, params) => dispatch(baselinesTableActions.fetchBaselines(tableId, params)),\n        exportToCSV: (exportData, baselineRowData)=> {\n            dispatch(baselinesTableActions.exportToCSV(exportData, baselineRowData));\n        }\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(BaselinesTable);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Dropdown, KebabToggle } from '@patternfly/react-core';\n\nclass ActionKebab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kebabOpened: false\n        };\n\n        this.toggleKebab = () => {\n            const { kebabOpened } = this.state;\n\n            this.setState({\n                kebabOpened: !kebabOpened\n            });\n        };\n    }\n\n    render() {\n        const { dropdownItems } = this.props;\n        const { kebabOpened } = this.state;\n\n        return (\n            <Dropdown\n                id='action-kebab'\n                aria-label='action-kebab'\n                style={{ float: 'left' }}\n                toggle={ <KebabToggle onToggle={ this.toggleKebab } /> }\n                isOpen={ kebabOpened }\n                ouiaId=\"action\"\n                dropdownItems={ dropdownItems }\n                isPlain\n            />\n        );\n    }\n}\n\nActionKebab.propTypes = {\n    dropdownItems: PropTypes.array\n};\n\nexport default ActionKebab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\n\nexport class GlobalFilterAlert extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: true\n        };\n\n        this.toggleIsOpen = () => {\n            const { isOpen } = this.state;\n\n            this.setState({\n                isOpen: !isOpen\n            });\n        };\n    }\n\n    buildBody = () => {\n        const { sidsFilter, tagsFilter, workloadsFilter } = this.props.globalFilterState;\n        let filters = 'Workloads: ' + Object.keys(workloadsFilter)[0] + '. ';\n\n        if (sidsFilter.length) {\n            filters += 'SAP ID (SID): ';\n            for (let i = 0; i < sidsFilter.length; i++) {\n                filters += sidsFilter[i];\n                if (i + 1 === sidsFilter.length) {\n                    filters += '. ';\n                } else {\n                    filters += ', ';\n                }\n            }\n        }\n\n        if (tagsFilter.length) {\n            let tags = [];\n            let tagsList = {};\n            filters += 'Tags: ';\n\n            tagsFilter.forEach(function(tag) {\n                tags.push(tag.split('/'));\n            });\n\n            tags.forEach(function(tag) {\n                if (!(tag[0] in tagsList)) {\n                    tagsList[tag[0]] = [ tag[1] ];\n                } else {\n                    tagsList[tag[0]].push(tag[1]);\n                }\n            });\n\n            for (const [ key, value ] of Object.entries(tagsList)) {\n                filters += key + ': ';\n                for (let i = 0; i < value.length; i++) {\n                    filters += value[i];\n                    if (i + 1 === value.length) {\n                        filters += '. ';\n                    } else {\n                        filters += ', ';\n                    }\n                }\n            }\n        }\n\n        return filters;\n    }\n\n    render() {\n        const { sidsFilter, tagsFilter, workloadsFilter } = this.props.globalFilterState;\n        const { isOpen } = this.state;\n\n        return (\n            <React.Fragment>\n                { isOpen && (workloadsFilter.SAP?.isSelected || sidsFilter.length > 0 || tagsFilter.length > 0)\n                    ? <Alert\n                        variant='info'\n                        title='Your systems are pre-filtered by the global context selector.'\n                        isInline\n                        actionClose={ <AlertActionCloseButton onClose={ () => this.toggleIsOpen() } /> }\n                    >\n                        <p>\n                            { this.buildBody() }\n                        </p>\n                    </Alert>\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nGlobalFilterAlert.propTypes = {\n    globalFilterState: PropTypes.object\n};\n\nexport default GlobalFilterAlert;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Pagination } from '@patternfly/react-core';\n\nexport class TablePagination extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onSetPage = this.onSetPage.bind(this);\n        this.onPerPageSelect = this.onPerPageSelect.bind(this);\n    }\n\n    onSetPage(event, page) {\n        const { tableId, updatePagination } = this.props;\n\n        const { perPage } = this.props;\n        const pagination = { page, perPage };\n        tableId\n            ? updatePagination(pagination, tableId)\n            : updatePagination(pagination);\n    }\n\n    onPerPageSelect(event, perPage) {\n        const { tableId, updatePagination } = this.props;\n\n        const page = 1;\n        const pagination = { page, perPage };\n        tableId\n            ? updatePagination(pagination, tableId)\n            : updatePagination(pagination);\n    }\n\n    render() {\n        const { total, page, perPage, isCompact, widgetId, variant } = this.props;\n\n        return (\n            <Pagination\n                itemCount={ total ? total : 0 }\n                widgetId={ widgetId }\n                page={ total === 0 ? 0 : page }\n                perPage={ perPage }\n                variant={ variant }\n                onSetPage={ this.onSetPage }\n                onPerPageSelect={ this.onPerPageSelect }\n                isCompact={ isCompact }\n            />\n        );\n    }\n}\n\nTablePagination.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    updatePagination: PropTypes.func,\n    total: PropTypes.number,\n    isCompact: PropTypes.bool,\n    tableId: PropTypes.string,\n    widgetId: PropTypes.string,\n    variant: PropTypes.any\n};\n\nexport default TablePagination;\n","/* eslint-disable camelcase */\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/cjs/Inventory';\nimport { LockIcon } from '@patternfly/react-icons';\n\nimport selectedReducer from '../../store/reducers';\nimport { addNewListener } from '../../store';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport systemsTableActions from './actions';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport helpers from '../helpers';\n\nexport const SystemsTable = ({\n    selectedSystemIds,\n    setSelectedSystemIds,\n    driftClearFilters,\n    createBaselineModal,\n    hasHistoricalDropdown,\n    historicalProfiles,\n    hasMultiSelect,\n    selectHistoricProfiles,\n    updateColumns,\n    hasInventoryReadPermissions,\n    entities,\n    selectEntities,\n    selectVariant\n}) => {\n    const tagsFilter = useSelector(({ globalFilterState }) => globalFilterState?.tagsFilter);\n    const workloadsFilter = useSelector(({ globalFilterState }) => globalFilterState?.workloadsFilter);\n    const sidsFilter = useSelector(({ globalFilterState }) => globalFilterState?.sidsFilter);\n\n    const deselectHistoricalProfiles = () => {\n        if (!hasMultiSelect) {\n            updateColumns('display_name');\n            selectHistoricProfiles([]);\n        }\n    };\n\n    const onSelect = (event) => {\n        let toSelect = [];\n        switch (event) {\n            case 'none': {\n                toSelect = { id: 0, selected: false, bulk: true };\n\n                break;\n            }\n\n            case 'page': {\n                toSelect = { id: 0, selected: true };\n\n                break;\n            }\n        }\n\n        selectEntities(toSelect);\n    };\n\n    useEffect(() => {\n        window.entityListener = addNewListener({\n            actionType: 'SELECT_ENTITY',\n            callback: () => {\n                !hasMultiSelect ? deselectHistoricalProfiles() : null;\n            }\n        });\n    }, []);\n\n    return (\n        hasInventoryReadPermissions ? (\n            <InventoryTable\n                onLoad={ ({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n                    driftClearFilters();\n                    getRegistry().register(mergeWithEntities(\n                        selectedReducer(\n                            INVENTORY_ACTION_TYPES, createBaselineModal, historicalProfiles,\n                            hasMultiSelect, hasHistoricalDropdown, deselectHistoricalProfiles\n                        )\n                    ));\n                    setSelectedSystemIds(selectedSystemIds);\n                } }\n                showTags\n                noDetail\n                customFilters={{\n                    tags: tagsFilter,\n                    filter: {\n                        system_profile: {\n                            ...workloadsFilter?.SAP?.isSelected && { sap_system: true },\n                            ...sidsFilter?.length > 0 && { sap_sids: sidsFilter }\n                        }\n                    }\n                }}\n                tableProps={{\n                    canSelectAll: false,\n                    selectVariant\n                }}\n                total={ entities?.total }\n                bulkSelect={ onSelect && {\n                    isDisabled: !hasMultiSelect,\n                    count: entities && entities.selectedSystemIds ? entities.selectedSystemIds.length : 0,\n                    items: [{\n                        title: `Select none (0)`,\n                        onClick: () => {\n                            onSelect('none');\n                        }\n                    }, {\n                        title: `Select page (${ entities?.count || 0 })`,\n                        onClick: () => {\n                            onSelect('page');\n                        }\n                    }],\n                    onSelect: (value) => {\n                        value ? onSelect('page') : onSelect('none');\n                    },\n                    checked: entities && entities.selectedSystemIds\n                        ? helpers.findCheckedValue(entities?.total, entities?.selectedSystemIds.length)\n                        : null\n                } }\n            />\n        )\n            : <EmptyStateDisplay\n                icon={ LockIcon }\n                color='#6a6e73'\n                title={ 'You do not have access to the inventory' }\n                text={ [ 'Contact your organization administrator(s) for more information.' ] }\n            />\n    );\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        setSelectedSystemIds: (systemIds) => dispatch(compareActions.setSelectedSystemIds(systemIds)),\n        driftClearFilters: () => dispatch(systemsTableActions.clearAllFilters()),\n        updateColumns: (key) => dispatch(systemsTableActions.updateColumns(key)),\n        selectEntities: (toSelect) => dispatch({ type: 'SELECT_ENTITY', payload: toSelect })\n    };\n}\n\nSystemsTable.propTypes = {\n    setSelectedSystemIds: PropTypes.func,\n    selectedSystemIds: PropTypes.array,\n    selectHistoricProfiles: PropTypes.func,\n    createBaselineModal: PropTypes.bool,\n    driftClearFilters: PropTypes.func,\n    hasHistoricalDropdown: PropTypes.bool,\n    historicalProfiles: PropTypes.array,\n    hasMultiSelect: PropTypes.bool,\n    updateColumns: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    hasInventoryReadPermissions: PropTypes.bool,\n    entities: PropTypes.object,\n    selectEntities: PropTypes.func,\n    selectVariant: PropTypes.string\n};\n\nSystemsTable.defaultProps = {\n    selectedSystemIds: []\n};\n\nexport default connect(null, mapDispatchToProps)(SystemsTable);\n"],"sourceRoot":""}