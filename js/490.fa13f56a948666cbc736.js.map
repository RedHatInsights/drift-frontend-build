{"version":3,"sources":["webpack://drift-frontend/./src/Utilities/SetHistory.js","webpack://drift-frontend/./src/SmartComponents/AddSystemModal/AddSystemModal.js","webpack://drift-frontend/./src/SmartComponents/StateIcon/StateIcon.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ReferenceSelector/ReferenceSelector.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/ComparisonHeader/ComparisonHeader.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftTable/DriftTable.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/AddSystemButton/AddSystemButton.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/redux/actions.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/FilterDropDown/FilterDropDown.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/SearchBar/SearchBar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftToolbar/DriftToolbar.js","webpack://drift-frontend/./src/SmartComponents/DriftPage/DriftPage.js"],"names":["setHistory","history","systemIds","baselineIds","hspIds","referenceId","activeFactFilters","factFilter","stateFilters","factSort","stateSort","nameFilters","includes","filterState","filter","selected","map","toLowerCase","sort","ASC","DESC","searchPrefix","push","search","queryString","system_ids","baseline_ids","hsp_ids","reference_id","length","location","arrayFormat","encode","AddSystemModal","props","onSelect","event","isSelected","rowId","baselineTableData","selectBaseline","item","onBulkSelect","ids","forEach","baseline","confirmModal","bind","cancelSelection","changeActiveTab","state","columns","title","transforms","sortable","cellWidth","window","insights","chrome","auth","getUser","this","entities","selectedBaselineIds","toggleAddSystemModal","selectedHSPIds","selectedSystemIds","systems","id","tabIndex","selectActiveTab","activeTab","addSystemModalOpened","globalFilterState","hasBaselinesReadPermissions","hasBaselinesWritePermissions","hasInventoryReadPermissions","historicalProfiles","loading","totalBaselines","Modal","className","width","ouiaId","isOpen","onClose","actions","Button","key","variant","onClick","isDisabled","GlobalFilterAlert","Tabs","activeKey","Tab","eventKey","data-ouia-component-id","SystemsTable","hasHistoricalDropdown","hasMultiSelect","selectVariant","BaselinesTable","tableId","tableData","hasReadPermissions","hasWritePermissions","kebab","Component","propTypes","showModal","PropTypes","baselines","connect","addSystemModalState","compareState","baselinesTableState","checkboxTable","historicProfilesState","dispatch","addSystemModalActions","newActiveTab","baselinesTableActions","StateIcon","fact","CheckCircleIcon","color","height","ExclamationCircleIcon","QuestionCircleIcon","Tooltip","name","position","content","tooltip","icon","ReferenceSelector","isReference","updateReferenceId","StarIcon","data-ouia-component-type","OutlinedStarIcon","type","renderMessage","renderIcon","ComparisonHeader","formatDate","dateString","moment","format","LongArrowAltUpIcon","LongArrowAltDownIcon","ArrowsAltVIcon","sortType","toggleFactSort","toggleStateSort","fetchCompare","masterList","removeSystem","row","typeIcon","ServerIcon","BlueprintIcon","ClockIcon","header-id","TimesIcon","display_name","system_profile_exists","ExclamationTriangleIcon","last_updated","updated","HistoricalProfilesPopover","system","hasCompareButton","toggleSort","renderSortButton","renderSystemHeaders","renderHeaderRow","DriftTable","shiftReferenceToFront","index","systemToMove","findIndex","splice","unshift","HSPIds","findHSPReference","newReferenceId","undefined","emptyStateMessage","setSystemIds","setBaselineIds","setHSPIds","setReferenceId","setFilters","setSort","nextProps","emptyState","appAction","fullHistoricalSystemList","historicalGroups","hsp","Object","prototype","hasOwnProperty","call","system_id","hsps","find","indexOf","slice","concat","entries","searchParams","URLSearchParams","getAll","Array","isArray","setSelectedBaselines","selectHistoricProfiles","get","addStateFilter","handleFactFilter","split","newStateFilters","stateFilter","isFirstReference","setIsFirstReference","profile","clearComparison","reference","facts","rows","renderRow","rowData","i","Skeleton","size","SkeletonSize","sys","is_obfuscated","join","value","style","float","LockIcon","factName","isMultiFact","expandedRows","renderExpandableRowButton","comparisons","renderFact","renderState","comparison","renderRowChild","category","multivalues","subFactItem","rowValue","cell","findSystem","AngleDownIcon","expandRow","AngleRightIcon","compareData","renderLoadingRows","renderRows","filteredCompareData","formatEntities","renderTable","fullCompareData","error","withRouter","compareActions","historicProfileIds","historicProfilesActions","AddSystemButton","isTable","types","FilterDropDown","onToggle","createDropdownItem","toggleDropDown","DropdownItem","display","Checkbox","label","isChecked","onChange","dropdownItems","dropdownItem","selectedViewsArray","selectedViews","createDropdownArray","createSelectedViewsString","Dropdown","toggle","DropdownToggle","filterDropdownOpened","filterDropdownActions","SearchBar","updateFactFilter","setState","setFactFilter","filterByFact","checkKeyPress","preventDefault","addToActiveFactFilters","prevProps","Form","FormGroup","isRequired","fieldId","onKeyPress","TextInput","placeholder","aria-label","DriftToolbar","setFactFilterChips","factFilterChips","setStateChips","stateChips","clearAllStateChips","removeChip","clearAllFactFilters","clearAllFactChips","setIsEmpty","isEmpty","dropdownOpen","clearFilters","clearComparisonFilters","clearSelectedBaselines","actionKebabItems","component","exportToCSV","page","perPage","totalFacts","updatePagination","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","ToolbarItem","ExportCSVButton","ActionKebab","align","default","total","isCompact","widgetId","PaginationVariant","DriftPage","revertCompareData","previousStateSystems","renderEmptyState","status","EmptyStateDisplay","text","detail","button","PlusCircleIcon","PageHeader","PageHeaderTitle","Main","permissions","compareRead","ErrorAlert","Card","CardBody","baselinesRead","baselinesWrite","inventoryRead","pagination"],"mappings":"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","file":"js/490.fa13f56a948666cbc736.js","sourcesContent":["import queryString from 'query-string';\nimport { ASC, DESC } from '../constants';\n\nexport function setHistory(\n    history, systemIds = [], baselineIds = [], hspIds = [], referenceId, activeFactFilters = [], factFilter, stateFilters, factSort, stateSort\n) {\n    let nameFilters = [ ...activeFactFilters, ...factFilter && !activeFactFilters.includes(factFilter) ? [ factFilter ] : [] ];\n    let filterState = [ ...stateFilters?.filter(({ selected }) => selected)?.map(({ filter }) => filter?.toLowerCase()) || [] ];\n    let sort = [\n        ...[ ASC, DESC ].includes(stateSort) ? [ `${ stateSort === DESC ? '-' : '' }state` ] : [],\n        ...[ ASC, DESC ].includes(factSort) ? [ `${ factSort === DESC ? '-' : '' }fact` ] : []\n    ];\n    let searchPrefix = '?';\n\n    /*eslint-disable camelcase*/\n    history.push({\n        search: searchPrefix + queryString.stringify({\n            system_ids: systemIds,\n            baseline_ids: baselineIds,\n            hsp_ids: hspIds,\n            reference_id: referenceId\n        })\n    });\n\n    searchPrefix = '&';\n\n    if (!systemIds.length && !baselineIds.length && !hspIds.length && !referenceId) {\n        searchPrefix = '';\n    }\n\n    history.push({\n        search: history.location.search + searchPrefix + queryString.stringify({\n            'filter[name]': nameFilters,\n            'filter[state]': filterState,\n            sort\n        }, { arrayFormat: 'comma', encode: false })\n    });\n    /*eslint-enable camelcase*/\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Tab, Tabs } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { sortable, cellWidth } from '@patternfly/react-table';\n\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport BaselinesTable from '../BaselinesTable/BaselinesTable';\nimport GlobalFilterAlert from '../GlobalFilterAlert/GlobalFilterAlert';\nimport { addSystemModalActions } from './redux';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\n\nexport class AddSystemModal extends Component {\n    constructor(props) {\n        super(props);\n        this.confirmModal = this.confirmModal.bind(this);\n        this.cancelSelection = this.cancelSelection.bind(this);\n        this.changeActiveTab = this.changeActiveTab.bind(this);\n\n        this.state = {\n            columns: [\n                { title: 'Name', transforms: [ sortable ]},\n                { title: 'Last updated', transforms: [ sortable, cellWidth(20) ]}\n            ]\n        };\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    onSelect = (event, isSelected, rowId) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids;\n\n        if (rowId === -1) {\n            ids = baselineTableData.map(function(item) {\n                return item[0];\n            });\n        } else {\n            ids = [ baselineTableData[rowId][0] ];\n        }\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    confirmModal() {\n        const { confirmModal, entities, selectedBaselineIds, toggleAddSystemModal, selectedHSPIds, referenceId } = this.props;\n\n        confirmModal(\n            entities.selectedSystemIds,\n            selectedBaselineIds,\n            selectedHSPIds,\n            referenceId\n        );\n        toggleAddSystemModal();\n    }\n\n    cancelSelection() {\n        const { toggleAddSystemModal } = this.props;\n\n        toggleAddSystemModal();\n    }\n\n    selectedSystemIds() {\n        return this.props.systems?.map(({ id }) => id) || [];\n    }\n\n    changeActiveTab(event, tabIndex) {\n        const { selectActiveTab } = this.props;\n\n        selectActiveTab(tabIndex);\n    }\n\n    onBulkSelect = (isSelected) => {\n        const { baselineTableData, selectBaseline } = this.props;\n        let ids = [];\n\n        baselineTableData.forEach(function(baseline) {\n            ids.push(baseline[0]);\n        });\n\n        selectBaseline(ids, isSelected, 'CHECKBOX');\n    }\n\n    render() {\n        const { activeTab, addSystemModalOpened, baselineTableData, globalFilterState, hasBaselinesReadPermissions,\n            hasBaselinesWritePermissions, hasInventoryReadPermissions, historicalProfiles, loading, entities, selectedBaselineIds,\n            selectedHSPIds, totalBaselines } = this.props;\n        const { columns } = this.state;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    className=\"drift\"\n                    width={ '950px' }\n                    title=\"Add to comparison\"\n                    ouiaId='add-to-comparison-modal'\n                    isOpen={ addSystemModalOpened }\n                    onClose={ this.cancelSelection }\n                    actions={ [\n                        <Button\n                            key=\"confirm\"\n                            variant=\"primary\"\n                            onClick={ this.confirmModal }\n                            isDisabled={ ((entities && entities.selectedSystemIds && entities.selectedSystemIds.length === 0) || !entities) &&\n                                selectedBaselineIds.length === 0 &&\n                                selectedHSPIds.length === 0 }\n                            ouiaId=\"add-to-comparison-submit-button\"\n                        >\n                            Submit\n                        </Button>,\n                        <Button\n                            key=\"cancel\"\n                            variant=\"link\"\n                            onClick={ this.cancelSelection }\n                            ouiaId=\"add-to-comparison-cancel-button\"\n                        >\n                            Cancel\n                        </Button>\n                    ] }\n                >\n\n                    <GlobalFilterAlert globalFilterState={ globalFilterState } />\n                    <Tabs\n                        activeKey={ activeTab }\n                        onSelect={ this.changeActiveTab }\n                    >\n                        <Tab\n                            eventKey={ 0 }\n                            title=\"Systems\"\n                            id='systems-tab'\n                            data-ouia-component-id='systems-tab-button'\n                        >\n                            <SystemsTable\n                                selectedSystemIds={ this.selectedSystemIds() }\n                                hasHistoricalDropdown={ true }\n                                historicalProfiles={ historicalProfiles }\n                                hasMultiSelect={ true }\n                                hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                                entities={ entities }\n                                selectVariant='checkbox'\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey={ 1 }\n                            title=\"Baselines\"\n                            id='baselines-tab'\n                            data-ouia-component-id='baselines-tab-button'\n                        >\n                            <BaselinesTable\n                                tableId='CHECKBOX'\n                                hasMultiSelect={ true }\n                                onSelect={ this.onSelect }\n                                tableData={ baselineTableData }\n                                loading={ loading }\n                                columns={ columns }\n                                onBulkSelect={ this.onBulkSelect }\n                                selectedBaselineIds={ selectedBaselineIds }\n                                totalBaselines={ totalBaselines }\n                                hasReadPermissions={ hasBaselinesReadPermissions }\n                                hasWritePermissions={ hasBaselinesWritePermissions }\n                                kebab={ false }\n                            />\n                        </Tab>\n                    </Tabs>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nAddSystemModal.propTypes = {\n    showModal: PropTypes.bool,\n    addSystemModalOpened: PropTypes.bool,\n    activeTab: PropTypes.number,\n    confirmModal: PropTypes.func,\n    cancelSelection: PropTypes.func,\n    toggleAddSystemModal: PropTypes.func,\n    selectActiveTab: PropTypes.func,\n    entities: PropTypes.object,\n    systems: PropTypes.array,\n    selectedBaselineIds: PropTypes.array,\n    baselines: PropTypes.array,\n    selectedHSPIds: PropTypes.array,\n    loading: PropTypes.bool,\n    baselineTableData: PropTypes.array,\n    selectBaseline: PropTypes.func,\n    historicalProfiles: PropTypes.array,\n    referenceId: PropTypes.string,\n    totalBaselines: PropTypes.number,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    globalFilterState: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        systems: state.compareState.systems,\n        activeTab: state.addSystemModalState.activeTab,\n        entities: state.entities,\n        selectedBaselineIds: state.baselinesTableState.checkboxTable.selectedBaselineIds,\n        baselines: state.compareState.baselines,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        loading: state.baselinesTableState.checkboxTable.loading,\n        baselineTableData: state.baselinesTableState.checkboxTable.baselineTableData,\n        historicalProfiles: state.compareState.historicalProfiles,\n        totalBaselines: state.baselinesTableState.checkboxTable.totalBaselines,\n        globalFilterState: state.globalFilterState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: () => dispatch(addSystemModalActions.toggleAddSystemModal()),\n        selectActiveTab: (newActiveTab) => dispatch(addSystemModalActions.selectActiveTab(newActiveTab)),\n        selectBaseline: (id, isSelected, tableId) => dispatch(baselinesTableActions.selectBaseline(id, isSelected, tableId))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSystemModal);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckCircleIcon, QuestionCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nclass StateIcon extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    icon() {\n        let iconClass = '';\n\n        if (this.props.fact.state === 'SAME') {\n            iconClass = <CheckCircleIcon color='#3E8635' height='16px' width='16px'/>;\n        } else if (this.props.fact.state === 'DIFFERENT') {\n            iconClass = <ExclamationCircleIcon color='#C9190B' height='16px' width='16px'/>;\n        } else {\n            iconClass = <QuestionCircleIcon color='#151515' height='16px' width='16px'/>;\n        }\n\n        return iconClass;\n    };\n\n    render() {\n        const { fact, stateSort } = this.props;\n\n        return (\n            <Tooltip\n                key={ fact.name + '-' + stateSort }\n                position=\"top\"\n                content={ <div>{ fact.tooltip }</div> }\n            >\n                { this.icon() }\n            </Tooltip>\n        );\n    }\n}\n\nStateIcon.propTypes = {\n    fact: PropTypes.object,\n    stateSort: PropTypes.string\n};\n\nexport default StateIcon;\n","import React, { Component } from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedStarIcon, StarIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nclass ReferenceSelector extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isReference: this.props.isReference\n        };\n    }\n\n    renderIcon() {\n        const { updateReferenceId, item } = this.props;\n        const { isReference } = this.state;\n\n        return (\n            isReference\n                ? <StarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId() }\n                />\n                : <OutlinedStarIcon\n                    className='reference-selector pointer'\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id={ 'reference-selector-' + item.id }\n                    onClick={ () => updateReferenceId(item.id) }\n                />\n        );\n    }\n\n    renderMessage() {\n        const { isReference } = this.state;\n        const { item } = this.props;\n        let type = item.type;\n\n        if (item.type === 'historical-system-profile') {\n            type = 'historical system';\n        }\n\n        if (isReference) {\n            return <div>This is the reference the other items are being compared against.</div>;\n        } else {\n            return <div>Use this { type } as a reference to compare.</div>;\n        }\n    }\n\n    render() {\n        return (\n            <Tooltip\n                position='top'\n                content={ this.renderMessage() }\n            >\n                { this.renderIcon() }\n            </Tooltip>\n        );\n    }\n}\n\nReferenceSelector.propTypes = {\n    isReference: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    item: PropTypes.object\n};\n\nexport default ReferenceSelector;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ClockIcon, TimesIcon, ExclamationTriangleIcon, ServerIcon, BlueprintIcon } from '@patternfly/react-icons';\nimport { LongArrowAltUpIcon, LongArrowAltDownIcon, ArrowsAltVIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\n\nimport { ASC, DESC } from '../../../../constants';\n\nimport HistoricalProfilesPopover from '../../../HistoricalProfilesPopover/HistoricalProfilesPopover';\nimport ReferenceSelector from '../ReferenceSelector/ReferenceSelector';\n\nclass ComparisonHeader extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    formatDate = (dateString) => {\n        return moment.utc(dateString).format('DD MMM YYYY, HH:mm UTC');\n    }\n\n    renderSortButton(sort) {\n        let sortIcon;\n\n        if (sort === ASC) {\n            sortIcon = <LongArrowAltUpIcon className=\"active-blue\" />;\n        }\n        else if (sort === DESC) {\n            sortIcon = <LongArrowAltDownIcon className=\"active-blue\" />;\n        }\n        else {\n            sortIcon = <ArrowsAltVIcon className=\"not-active\" />;\n        }\n\n        return sortIcon;\n    }\n\n    async toggleSort(sortType, sort) {\n        const { setHistory, toggleFactSort, toggleStateSort } = this.props;\n\n        if (sortType === 'fact') {\n            await toggleFactSort(sort);\n        } else {\n            await toggleStateSort(sort);\n        }\n\n        setHistory();\n    }\n\n    renderSystemHeaders() {\n        const { fetchCompare, masterList, referenceId, removeSystem, systemIds, updateReferenceId } = this.props;\n\n        let row = [];\n        let typeIcon = '';\n\n        masterList.forEach(item => {\n            if (item.type === 'system') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>System</div> }\n                >\n                    <ServerIcon/>\n                </Tooltip>;\n            } else if (item.type === 'baseline') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Baseline</div> }\n                >\n                    <BlueprintIcon/>\n                </Tooltip>;\n            } else if (item.type === 'historical-system-profile') {\n                typeIcon = <Tooltip\n                    position='top'\n                    content={ <div>Historical system</div> }\n                >\n                    <ClockIcon />\n                </Tooltip>;\n            }\n\n            row.push(\n                <th\n                    header-id={ item.id }\n                    key={ item.id }\n                    className={ item.id === referenceId\n                        ? 'drift-header reference-header'\n                        : `drift-header ${item.type}-header` }\n                >\n                    <div>\n                        <a\n                            onClick={ () => removeSystem(item) }\n                            className=\"remove-system-icon\"\n                            data-ouia-component-type='PF4/Button'\n                            data-ouia-component-id={ 'remove-system-button-' + item.id } >\n                            <TimesIcon/>\n                        </a>\n                    </div>\n                    <div className='comparison-header'>\n                        <div className=\"drift-header-icon\">\n                            { typeIcon }\n                        </div>\n                        <div className=\"system-name\">{ item.display_name }</div>\n                        <div className=\"system-updated-and-reference\">\n                            <ReferenceSelector\n                                updateReferenceId={ updateReferenceId }\n                                item={ item }\n                                isReference= { item.id === referenceId }\n                            />\n                            { item.system_profile_exists === false ?\n                                <Tooltip\n                                    position='top'\n                                    content={ <div>System profile does not exist. Please run insights-client on system to upload archive.</div> }\n                                >\n                                    <ExclamationTriangleIcon color=\"#f0ab00\"/>\n                                </Tooltip> : ''\n                            }\n                            { item.last_updated\n                                ? this.formatDate(item.last_updated)\n                                : this.formatDate(item.updated)\n                            }\n                            { item.type === 'system' || item.type === 'historical-system-profile'\n                                ? <HistoricalProfilesPopover\n                                    system={ item }\n                                    systemIds={ systemIds }\n                                    referenceId={ referenceId }\n                                    fetchCompare={ fetchCompare }\n                                    hasCompareButton={ true }\n                                    hasMultiSelect={ true }\n                                />\n                                : null\n                            }\n                        </div>\n                    </div>\n                </th>\n            );\n        });\n\n        return row;\n    }\n\n    renderHeaderRow() {\n        const { factSort, stateSort } = this.props;\n\n        return (\n            <tr className=\"sticky-column-header\" data-ouia-component-type='PF4/TableRow' data-ouia-component-id='comparison-table-header-row'>\n                <th\n                    className=\"fact-header sticky-column fixed-column-1 pointer\"\n                    key='fact-header'\n                    id={ factSort }\n                    onClick={ () => this.toggleSort('fact', factSort) }\n                    data-ouia-component-type=\"PF4/Button\"\n                    data-ouia-component-id=\"fact-sort-button\"\n                >\n                    <div className=\"active-blue\">Fact { this.renderSortButton(factSort) }</div>\n                </th>\n                <th\n                    className=\"state-header sticky-column fixed-column-2 pointer\"\n                    key='state-header'\n                    id={ stateSort || 'disabled' }\n                    data-ouia-component-type='PF4/Button'\n                    data-ouia-component-id='state-sort-button'\n                    onClick={ () => this.toggleSort('state', stateSort) }\n                >\n                    { stateSort !== ''\n                        ? <div className=\"active-blue\">State { this.renderSortButton(stateSort) }</div>\n                        : <div>State { this.renderSortButton(stateSort) }</div>\n                    }\n                </th>\n                { this.renderSystemHeaders() }\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                { this.renderHeaderRow() }\n            </React.Fragment>\n        );\n    }\n}\n\nComparisonHeader.propTypes = {\n    factSort: PropTypes.string,\n    fetchCompare: PropTypes.func,\n    masterList: PropTypes.array,\n    referenceId: PropTypes.string,\n    removeSystem: PropTypes.func,\n    stateSort: PropTypes.string,\n    systemIds: PropTypes.array,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nexport default ComparisonHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport { AngleDownIcon, AngleRightIcon, LockIcon } from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components';\nimport { ASC, DESC } from '../../../constants';\n\nimport AddSystemModal from '../../AddSystemModal/AddSystemModal';\nimport StateIcon from '../../StateIcon/StateIcon';\nimport ComparisonHeader from './ComparisonHeader/ComparisonHeader';\n\nimport { compareActions } from '../../modules';\nimport { baselinesTableActions } from '../../BaselinesTable/redux';\nimport { historicProfilesActions } from '../../HistoricalProfilesPopover/redux';\n\nexport class DriftTable extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ]\n        };\n\n        this.masterList = [];\n\n        this.setSystemIds();\n        this.setBaselineIds();\n        this.setHSPIds();\n        this.setReferenceId();\n        this.setFilters();\n        this.setSort();\n        this.fetchCompare = this.fetchCompare.bind(this);\n        this.removeSystem = this.removeSystem.bind(this);\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n\n        if (this.systemIds.length > 0 || this.baselineIds.length > 0 || this.HSPIds.length > 0) {\n            this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, this.props.referenceId);\n        }\n    }\n\n    async shouldComponentUpdate(nextProps) {\n        if (!nextProps.emptyState) {\n            await window.insights?.chrome?.appAction?.('comparison-view');\n        }\n    }\n\n    shiftReferenceToFront = (masterList) => {\n        let index;\n        let systemToMove;\n\n        index = masterList.findIndex((item) => {\n            return item.id === this.props.referenceId;\n        });\n\n        systemToMove = masterList.splice(index, 1);\n        masterList.unshift(systemToMove[0]);\n\n        return masterList;\n    }\n\n    formatEntities(systems, baselines, historicalProfiles) {\n        /*eslint-disable camelcase*/\n        let fullHistoricalSystemList = [];\n        let historicalGroups = {};\n        let masterList;\n\n        if (systems.length === 0 && baselines.length === 0 && historicalProfiles.length === 0) {\n            return [];\n        }\n\n        systems = systems.map(function(system) {\n            system.type = 'system';\n            return system;\n        });\n        baselines = baselines.map(function(baseline) {\n            baseline.type = 'baseline';\n            return baseline;\n        });\n        historicalProfiles = historicalProfiles.map(function(hsp) {\n            hsp.type = 'historical-system-profile';\n            return hsp;\n        });\n\n        historicalProfiles.forEach(function(hsp) {\n            if (Object.prototype.hasOwnProperty.call(historicalGroups, hsp.system_id)) {\n                historicalGroups[hsp.system_id].push(hsp);\n            } else {\n                historicalGroups[hsp.system_id] = [ hsp ];\n            }\n        });\n\n        fullHistoricalSystemList = systems;\n\n        // eslint-disable-next-line no-unused-vars\n        for (const [ system_id, hsps ] of Object.entries(historicalGroups)) {\n            let system = systems.find(item => system_id === item.id);\n            let index;\n\n            if (system !== undefined) {\n                index = fullHistoricalSystemList.indexOf(system);\n                fullHistoricalSystemList = [\n                    ...fullHistoricalSystemList.slice(0, index + 1),\n                    ...hsps,\n                    ...fullHistoricalSystemList.slice(index + 1, fullHistoricalSystemList.length)\n                ];\n            } else {\n                fullHistoricalSystemList = fullHistoricalSystemList.concat(hsps);\n            }\n        }\n        /*eslint-enable camelcase*/\n\n        masterList = baselines.concat(fullHistoricalSystemList);\n\n        if (this.props.referenceId) {\n            masterList = this.shiftReferenceToFront(masterList);\n        }\n\n        return masterList;\n    }\n\n    /*eslint-disable*/\n    setSystemIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.systemIds = searchParams.getAll('system_ids');\n        this.systemIds = Array.isArray(this.systemIds) ? this.systemIds : [ this.systemIds ];\n        this.systemIds = this.systemIds.filter(item => item !== undefined);\n    }\n\n    setBaselineIds() {\n        let searchParams = new URLSearchParams(this.props.location.search);\n\n        this.baselineIds = searchParams.getAll('baseline_ids');\n        this.baselineIds = Array.isArray(this.baselineIds) ? this.baselineIds : [ this.baselineIds ];\n        this.baselineIds = this.baselineIds.filter(item => item !== undefined);\n        this.props.setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n    }\n\n    setHSPIds() {\n        const { location, selectHistoricProfiles } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        this.HSPIds = searchParams.getAll('hsp_ids');\n        this.HSPIds = Array.isArray(this.HSPIds) ? this.HSPIds : [ this.HSPIds ];\n        this.HSPIds = this.HSPIds.filter(item => item !== undefined);\n        selectHistoricProfiles(this.HSPIds);\n    }\n\n    setReferenceId() {\n        const { location, updateReferenceId } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n        let referenceId = searchParams.get('reference_id');\n\n        updateReferenceId(referenceId === null ? undefined : referenceId);\n    }\n\n    setFilters() {\n        const { addStateFilter, handleFactFilter, location, stateFilters } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        searchParams.get('filter[name]')?.split(',').forEach(function(factFilter) {\n            handleFactFilter(factFilter);\n        });\n\n        let newStateFilters = searchParams.get('filter[state]')?.split(',');\n\n        if (newStateFilters?.length > 0) {\n            stateFilters.forEach(function(stateFilter) {\n                let filter = { ...stateFilter };\n\n                if (newStateFilters?.includes(stateFilter.filter.toLowerCase())) {\n                    filter.selected = false;\n                }\n\n                addStateFilter(filter);\n            });\n        }\n    }\n\n    setSort() {\n        const { location, toggleFactSort, toggleStateSort } = this.props;\n        let searchParams = new URLSearchParams(location.search);\n\n        let sort = searchParams.get('sort')?.split(',');\n\n        sort?.forEach(function(sort) {\n            if (sort.includes('fact')) {\n                if (sort[0] === '-') {\n                    toggleFactSort(ASC);\n                } else {\n                    toggleFactSort(DESC);\n                }\n            } else {\n                if (sort[0] === '-') {\n                    toggleStateSort(ASC);\n                } else if (sort === 'state') {\n                    toggleStateSort('');\n                }\n            }\n        });\n\n        if (sort?.length === 1 && sort[0]?.includes('fact')) {\n            toggleStateSort(DESC);\n        }\n    }\n\n    updateReferenceId = (id) => {\n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, id);\n    }\n\n    findHSPReference = () => {\n        const { referenceId } = this.props;\n        let newReferenceId = referenceId;\n\n        this.HSPIds.forEach((id) => {\n            if (id === referenceId) {\n                newReferenceId = undefined;\n            }\n        });\n\n        return newReferenceId;\n    }\n\n    async removeSystem(item) {\n        const { historicalProfiles, isFirstReference, referenceId, selectHistoricProfiles, setIsFirstReference } = this.props;\n        let newReferenceId;\n\n        if (item.type === 'system') {\n            this.systemIds = this.systemIds.filter(id => id !== item.id);\n            newReferenceId = await this.findHSPReference();\n\n            this.HSPIds = await historicalProfiles.filter((profile) => {\n                return profile.system_id !== item.id;\n            }).map(profile => profile.id);\n\n        } else if (item.type === 'baseline') {\n            this.baselineIds = this.baselineIds.filter(id => id !== item.id);\n        } else if (item.type === 'historical-system-profile') {\n            this.HSPIds = this.HSPIds.filter(id => id !== item.id);\n        }\n\n        if (item.id === newReferenceId) {\n            newReferenceId = undefined;\n        }\n\n        selectHistoricProfiles(this.HSPIds);\n        if (!this.systemIds.length && !this.baselineIds.length\n            && !this.HSPIds.length && !referenceId && !isFirstReference) {\n            setIsFirstReference(true);\n        }\n\n        \n        this.fetchCompare(this.systemIds, this.baselineIds, this.HSPIds, newReferenceId);\n    }\n\n    async fetchCompare(systemIds, baselineIds, HSPIds, referenceId) {\n        const { clearComparison, fetchCompare, isFirstReference, setHistory, setIsFirstReference, setSelectedBaselines, updateReferenceId } = this.props;\n        let reference;\n\n        this.systemIds = systemIds;\n        this.baselineIds = baselineIds;\n        this.HSPIds = HSPIds;\n\n        if (isFirstReference) {\n            if (!referenceId && this.baselineIds.length) {\n                reference = baselineIds[0];\n            } else if (referenceId) {\n                reference = referenceId;\n            }\n        } else {\n            reference = referenceId;\n        }\n\n        setSelectedBaselines(this.baselineIds, 'CHECKBOX');\n        updateReferenceId(reference);\n\n        if (systemIds.length || baselineIds.length || HSPIds.length || reference) {\n            await fetchCompare(systemIds, baselineIds, HSPIds, reference);\n            await setIsFirstReference(false);\n        } else {\n            await clearComparison();\n        }\n\n        setHistory();\n    }\n    /*eslint-enable*/\n\n    renderRows(facts) {\n        let rows = [];\n\n        if (facts !== undefined) {\n            facts.forEach(fact => {\n                rows.push(this.renderRow(fact));\n            });\n        }\n\n        return rows;\n    }\n\n    renderLoadingRows() {\n        let rows = [];\n        let rowData = [];\n\n        for (let i = 0; i < 3; i += 1) {\n            rowData.push(<td><Skeleton size={ SkeletonSize.md } /></td>);\n        }\n\n        for (let i = 0; i < 10; i += 1) {\n            rows.push(<tr>{ rowData }</tr>);\n        }\n\n        return rows;\n    }\n\n    findSystem(fact) {\n        let row = [];\n        let system = undefined;\n        let className;\n\n        this.masterList.forEach(item => {\n            className = [ 'comparison-cell' ];\n            system = fact.systems.find(function(sys) {\n                return sys.id === item.id;\n            });\n\n            if (this.props.referenceId) {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                } else {\n                    if (system.state === 'DIFFERENT') {\n                        className.push('highlight');\n                        className.push('different-fact-cell');\n                    }\n                }\n            } else {\n                if (system?.is_obfuscated) {\n                    className.push('obfuscated');\n                }\n                else if (fact.state === 'DIFFERENT') {\n                    className.push('highlight');\n                }\n            }\n\n            row.push(<td className={ className.join(' ') }>\n                { system?.value === null ? 'No Data' : system?.value }\n                { system?.is_obfuscated ?\n                    <span\n                        style={{ float: 'right' }}\n                    >\n                        <Tooltip\n                            position='top'\n                            content={ <div>This data has been redacted from the insights-client upload.</div> }\n                        >\n                            <LockIcon color=\"#737679\"/>\n                        </Tooltip>\n                    </span> : ''\n                }\n            </td>);\n        });\n\n        return row;\n    }\n\n    renderFact(factName, className, isMultiFact) {\n        const { expandedRows } = this.props;\n\n        return <td className={ className }>\n            { this.renderExpandableRowButton(expandedRows, factName, isMultiFact) } { factName }\n        </td>;\n    }\n\n    renderState(fact, className) {\n        const { stateSort } = this.props;\n\n        return <td className={ className }>\n            <StateIcon fact={ fact } stateSort={ stateSort ? stateSort : null } />\n        </td>;\n    }\n\n    renderRow(fact) {\n        const { expandedRows, stateSort } = this.props;\n        let row = [];\n        let rows = [];\n\n        if (fact.comparisons) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1'\n                )\n            );\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }>\n                { row }\n            </tr>);\n\n            if (expandedRows.includes(fact.name)) {\n                fact.comparisons.forEach(comparison => {\n                    row = this.renderRowChild(comparison);\n                    rows.push(<tr\n                        data-ouia-component-type='PF4/TableRow'\n                        data-ouia-component-id={ 'comparison-table-row-' + comparison.name }\n                        category={ fact.name }\n                        className={ comparison.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                        { row }\n                    </tr>);\n                    if (comparison.multivalues) {\n                        if (expandedRows.includes(comparison.name)) {\n                            comparison.multivalues.forEach(subFactItem => {\n                                row = this.renderRowChild(subFactItem);\n                                let rowValue = subFactItem.systems.filter(cell => cell.value !== '')[0].value;\n                                rows.push(<tr\n                                    className={ subFactItem.state === 'DIFFERENT' ? 'unexpected-row' : '' }\n                                    data-ouia-component-type='PF4/TableRow'\n                                    data-ouia-component-id={ 'comparison-table-row-multivalue-' + comparison.name + '-' + rowValue }>{ row }</tr>);\n                            });\n                        }\n                    }\n                });\n            }\n        } else {\n            row.push(<td className=\"sticky-column fixed-column-1\">{ fact.name }</td>);\n            row.push(\n                <td className=\"fact-state sticky-column fixed-column-2\">\n                    <StateIcon fact={ fact } stateSort={ stateSort }/>\n                </td>\n            );\n\n            row = row.concat(this.findSystem(fact));\n\n            rows.push(<tr\n                data-ouia-component-type='PF4/TableRow'\n                data-ouia-component-id={ 'comparison-table-row-' + fact.name }\n                className={ fact.state === 'DIFFERENT' ? 'unexpected-row' : '' }>\n                { row }\n            </tr>);\n        }\n\n        return rows;\n    }\n\n    renderRowChild(fact) {\n        const { expandedRows } = this.props;\n        let row = [];\n\n        if (fact.multivalues) {\n            row.push(\n                this.renderFact(\n                    fact.name,\n                    expandedRows.includes(fact.name)\n                        ? 'nested-fact sticky-column fixed-column-1'\n                        : 'sticky-column fixed-column-1',\n                    true\n                )\n            );\n\n            row.push(\n                this.renderState(fact, 'fact-state sticky-column fixed-column-2')\n            );\n\n            this.masterList.forEach(() => {\n                row.push(<td className=\"comparison-cell\"></td>);\n            });\n        } else {\n            row.push(<td className=\"nested-fact sticky-column fixed-column-1\">\n                <p className=\"child-row\">{ fact.name }</p>\n            </td>);\n            row.push(<td className=\"fact-state sticky-column fixed-column-2\"><StateIcon fact={ fact }/></td>);\n\n            row = row.concat(this.findSystem(fact));\n        }\n\n        return row;\n    }\n\n    renderExpandableRowButton(expandedRows, factName, isMultiFact) {\n        let expandIcon;\n\n        if (expandedRows.includes(factName)) {\n            expandIcon = <AngleDownIcon\n                className={ 'carat-margin pointer active-blue' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        } else {\n            expandIcon = <AngleRightIcon\n                className={ 'carat-margin pointer' + (isMultiFact ? ' child-row' : null) }\n                data-ouia-component-type='PF4/Button'\n                data-ouia-component-id={ 'expand-category-button-' + factName }\n                onClick={ () => this.props.expandRow(factName) }\n            />;\n        }\n\n        return expandIcon;\n    }\n\n    renderTable(compareData, loading) {\n        const { factSort, referenceId, setHistory, stateSort, toggleFactSort, toggleStateSort } = this.props;\n\n        return (\n            <React.Fragment>\n                <div className=\"drift-table-wrapper\">\n                    <table\n                        className=\"pf-c-table pf-m-compact drift-table\"\n                        data-ouia-component-type='PF4/Table'\n                        data-ouia-component-id='comparison-table'>\n                        <thead>\n                            <ComparisonHeader\n                                factSort={ factSort }\n                                fetchCompare={ this.fetchCompare }\n                                masterList={ this.masterList }\n                                referenceId={ referenceId }\n                                removeSystem={ this.removeSystem }\n                                stateSort={ stateSort }\n                                systemIds={ this.systemIds }\n                                toggleFactSort={ toggleFactSort }\n                                toggleStateSort={ toggleStateSort }\n                                updateReferenceId={ this.updateReferenceId }\n                                setHistory={ setHistory }\n                            />\n                        </thead>\n                        <tbody>\n                            { loading ? this.renderLoadingRows() : this.renderRows(compareData) }\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    render() {\n        const { emptyState, filteredCompareData, systems, baselines, hasBaselinesReadPermissions, hasBaselinesWritePermissions,\n            hasInventoryReadPermissions, historicalProfiles, loading } = this.props;\n\n        this.masterList = this.formatEntities(systems, baselines, historicalProfiles);\n\n        return (\n            <React.Fragment>\n                <AddSystemModal\n                    selectedSystemIds={ systems.map(system => system.id) }\n                    confirmModal={ this.fetchCompare }\n                    referenceId={ this.props.referenceId }\n                    hasInventoryReadPermissions={ hasInventoryReadPermissions }\n                    hasBaselinesReadPermissions={ hasBaselinesReadPermissions }\n                    hasBaselinesWritePermissions={ hasBaselinesWritePermissions }\n                />\n                { !emptyState\n                    ? this.renderTable(filteredCompareData, loading)\n                    : null\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addSystemModalOpened: state.addSystemModalState.addSystemModalOpened,\n        fullCompareData: state.compareState.fullCompareData,\n        filteredCompareData: state.compareState.filteredCompareData,\n        loading: state.compareState.loading,\n        expandedRows: state.compareState.expandedRows,\n        emptyState: state.compareState.emptyState\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchCompare: ((systemIds, baselineIds, historicalProfiles, referenceId) =>\n            dispatch(compareActions.fetchCompare(systemIds, baselineIds, historicalProfiles, referenceId))\n        ),\n        toggleFactSort: (sortType) => dispatch(compareActions.toggleFactSort(sortType)),\n        toggleStateSort: (sortType) => dispatch(compareActions.toggleStateSort(sortType)),\n        expandRow: (factName) => dispatch(compareActions.expandRow(factName)),\n        setSelectedBaselines: ((selectedBaselineIds, tableId) =>\n            dispatch(baselinesTableActions.setSelectedBaselines(selectedBaselineIds, tableId))\n        ),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds))\n    };\n}\n\nDriftTable.propTypes = {\n    addSystemModalOpened: PropTypes.bool,\n    location: PropTypes.object,\n    history: PropTypes.object,\n    fetchCompare: PropTypes.func,\n    fullCompareData: PropTypes.array,\n    filteredCompareData: PropTypes.array,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    loading: PropTypes.bool,\n    toggleFactSort: PropTypes.func,\n    toggleStateSort: PropTypes.func,\n    expandRow: PropTypes.func,\n    expandedRows: PropTypes.array,\n    setSelectedBaselines: PropTypes.func,\n    selectHistoricProfiles: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updateReferenceId: PropTypes.func,\n    referenceId: PropTypes.string,\n    error: PropTypes.object,\n    isFirstReference: PropTypes.bool,\n    setIsFirstReference: PropTypes.func,\n    clearComparison: PropTypes.func,\n    hasInventoryReadPermissions: PropTypes.bool,\n    hasBaselinesReadPermissions: PropTypes.bool,\n    hasBaselinesWritePermissions: PropTypes.bool,\n    stateFilters: PropTypes.object,\n    addStateFilter: PropTypes.func,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    factFilter: PropTypes.string,\n    setHistory: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftTable));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\n\nimport { addSystemModalActions } from '../../AddSystemModal/redux';\n\nexport class AddSystemButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { loading, toggleAddSystemModal, isTable } = this.props;\n\n        return (\n            <Button\n                variant='primary'\n                onClick={ toggleAddSystemModal }\n                isDisabled={ loading ? true : false }\n                ouiaId={ isTable ? 'add-to-comparison' : 'add-to-comparison-empty' }\n            >\n                { isTable ? 'Add' : 'Add to comparison' }\n            </Button>\n        );\n    }\n}\n\nAddSystemButton.propTypes = {\n    toggleAddSystemModal: PropTypes.func,\n    isTable: PropTypes.bool,\n    loading: PropTypes.bool\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleAddSystemModal: (() => dispatch(addSystemModalActions.toggleAddSystemModal()))\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(AddSystemButton);\n","import types from './types';\n\nfunction toggleFilterDropDown() {\n    return {\n        type: types.OPEN_FILTER_DROPDOWN\n    };\n}\n\nexport default {\n    toggleFilterDropDown\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nimport { compareActions } from '../../modules';\nimport { filterDropdownActions } from './redux';\n\nclass FilterDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.onToggle = this.onToggle.bind(this);\n        this.createDropdownItem = this.createDropdownItem.bind(this);\n    }\n\n    onToggle() {\n        this.props.toggleDropDown();\n    }\n\n    addStateFilter = async (stateFilter) => {\n        const { addStateFilter, setHistory } = this.props;\n\n        await addStateFilter(stateFilter);\n        setHistory();\n    }\n\n    createDropdownItem(stateFilter) {\n        let dropdownItem =\n            <DropdownItem\n                data-ouia-component-id={ 'state-filter-option-' + stateFilter.display } >\n                <Checkbox\n                    id={ stateFilter.display }\n                    data-ouia-component-type='PF4/Checkbox'\n                    data-ouia-component-id={ 'state-filter-option-checkbox-' + stateFilter.display }\n                    label={ stateFilter.display }\n                    isChecked={ stateFilter.selected }\n                    onChange={ () => this.addStateFilter(stateFilter) }\n                />\n            </DropdownItem>;\n        return dropdownItem;\n    }\n\n    createDropdownArray(stateFilters) {\n        let dropdownItems = [];\n\n        stateFilters.forEach(function(stateFilter) {\n            let dropdownItem = this.createDropdownItem(stateFilter);\n            dropdownItems.push(dropdownItem);\n        }.bind(this));\n\n        return dropdownItems;\n    }\n\n    createSelectedViewsString(stateFilters) {\n        let selectedViewsArray = [];\n        let selectedViews = '';\n\n        for (let i = 0; i < stateFilters.length; i++) {\n            if (stateFilters[i].selected) {\n                selectedViewsArray.push(stateFilters[i].display);\n            }\n        }\n\n        for (let i = 0; i < selectedViewsArray.length; i++) {\n            selectedViews += selectedViewsArray[i];\n\n            if ((i + 1) < selectedViewsArray.length) {\n                selectedViews += ', ';\n            }\n        }\n\n        return selectedViews;\n    }\n\n    render() {\n        const { stateFilters } = this.props;\n        let dropdownItems = [];\n        let selectedViews = '';\n\n        dropdownItems = this.createDropdownArray(stateFilters);\n        selectedViews = this.createSelectedViewsString(stateFilters);\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    ouiaId='state-filter-dropdown'\n                    toggle={ <DropdownToggle\n                        onToggle={ this.onToggle }\n                        ouiaId='state-filter-dropdown-toggle' >\n                                    View: { selectedViews }\n                    </DropdownToggle> }\n                    isOpen={ this.props.filterDropdownOpened }\n                    dropdownItems={ dropdownItems }\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nFilterDropDown.propTypes = {\n    toggleDropDown: PropTypes.func,\n    filterDropdownOpened: PropTypes.bool,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n    return {\n        filterDropdownOpened: state.filterDropdownOpened,\n        stateFilters: state.compareState.stateFilters\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        toggleDropDown: () => dispatch(filterDropdownActions.toggleFilterDropDown()),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter))\n    };\n}\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(FilterDropDown));\n","import React, { Component } from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nexport class SearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filter: this.props.factFilter\n        };\n\n        this.setFactFilter = this.setFactFilter.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.factFilter !== '' && this.props.factFilter === '') {\n            this.setState({ filter: this.props.factFilter });\n        }\n    }\n\n    async addToActiveFactFilters(filter) {\n        const { handleFactFilter, setHistory } = this.props;\n\n        await handleFactFilter(filter);\n        setHistory();\n    }\n\n    updateFactFilter = (filter) => {\n        this.setState({ filter });\n        this.setFactFilter(filter);\n    }\n\n    setFactFilter = _.debounce(async function(filter) {\n        await this.props.filterByFact(filter);\n        this.props.setHistory();\n    }, 250);\n\n    checkKeyPress = (event) => {\n        const { activeFactFilters } = this.props;\n        const { filter } = this.state;\n\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            if (!activeFactFilters.includes(filter)) {\n                this.addToActiveFactFilters(filter);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form>\n                    <FormGroup\n                        isRequired\n                        type=\"text\"\n                        fieldId=\"filter\"\n                        onKeyPress={ this.checkKeyPress }\n                    >\n                        <TextInput\n                            value={ this.state.filter }\n                            id=\"filterByFact\"\n                            placeholder=\"Filter by fact\"\n                            onChange={ this.updateFactFilter }\n                            aria-label=\"filter by fact\"\n                            data-ouia-component-type=\"PF4/TextInput\"\n                            data-ouia-component-id=\"fact-filter-input-comparison\"\n                        />\n                    </FormGroup>\n                </Form>\n            </React.Fragment>\n        );\n    }\n}\n\nSearchBar.propTypes = {\n    filterByFact: PropTypes.func,\n    factFilter: PropTypes.string,\n    handleFactFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    setHistory: PropTypes.func\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DropdownItem, PaginationVariant, Toolbar, ToolbarGroup, ToolbarItem,\n    ToolbarContent, ToolbarFilter } from '@patternfly/react-core';\n\nimport FilterDropDown from '../FilterDropDown/FilterDropDown';\nimport SearchBar from '../SearchBar/SearchBar';\nimport ActionKebab from '../ActionKebab/ActionKebab';\nimport AddSystemButton from '../AddSystemButton/AddSystemButton';\nimport ExportCSVButton from '../../ExportCSVButton/ExportCSVButton';\nimport { TablePagination } from '../../Pagination/Pagination';\n\nexport class DriftToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionKebabItems: [\n                <DropdownItem\n                    key=\"remove-systems\"\n                    component=\"button\"\n                    data-ouia-component-id='clear-all-comparisons-dropdown-item'\n                    onClick={ this.clearComparison }>Clear all comparisons</DropdownItem>\n            ],\n            dropdownItems: [\n                <DropdownItem\n                    key='export-to-CSV'\n                    component='button'\n                    data-ouia-component-id='export-to-csv-dropdown-item-comparison'\n                    onClick={ () => this.props.exportToCSV() }\n                >\n                    Export to CSV\n                </DropdownItem>\n            ],\n            isEmpty: true,\n            dropdownOpen: false\n        };\n    }\n\n    setFactFilterChips = () => {\n        const { activeFactFilters, factFilter } = this.props;\n        let factFilterChips = [ ...activeFactFilters ];\n\n        if (factFilter.length && !activeFactFilters.includes(factFilter)) {\n            factFilterChips.push(factFilter);\n        }\n\n        return factFilterChips;\n    }\n\n    async clearAllFactChips() {\n        const { activeFactFilters, filterByFact, handleFactFilter } = this.props;\n\n        await activeFactFilters.forEach(function (filter) {\n            handleFactFilter(filter);\n        });\n\n        filterByFact('');\n    }\n\n    setStateChips = (stateFilters) => {\n        let stateChips = [];\n\n        stateFilters.forEach(function(filter) {\n            if (filter.selected) {\n                stateChips.push(filter.display);\n            }\n        });\n\n        return stateChips;\n    }\n\n    clearAllStateChips = async () => {\n        const { addStateFilter, stateFilters } = this.props;\n\n        stateFilters.forEach(function(stateFilter) {\n            stateFilter.selected = true;\n            addStateFilter(stateFilter);\n        });\n    }\n\n    removeChip = async (type = '', id = '') => {\n        const { activeFactFilters, addStateFilter, clearAllFactFilters, filterByFact, handleFactFilter, setHistory, stateFilters } = this.props;\n\n        if (type) {\n            if (type === 'State') {\n                if (id === '') {\n                    this.clearAllStateChips();\n                } else {\n                    stateFilters.forEach(async function(stateFilter) {\n                        if (stateFilter.display === id) {\n                            await addStateFilter(stateFilter);\n                        }\n                    });\n                }\n            } else {\n                if (id === '') {\n                    await clearAllFactFilters();\n                } else if (activeFactFilters.includes(id)) {\n                    await handleFactFilter(id);\n                } else {\n                    await filterByFact('');\n                }\n            }\n        } else {\n            await this.clearAllStateChips();\n            await this.clearAllFactChips();\n        }\n\n        setHistory();\n    }\n\n    setIsEmpty = (isEmpty) => {\n        this.setState({ isEmpty });\n    }\n\n    onToggle = () => {\n        const { dropdownOpen } = this.state;\n\n        this.setState({\n            dropdownOpen: !dropdownOpen\n        });\n    }\n\n    clearFilters = async () => {\n        const { clearComparisonFilters, setHistory } = this.props;\n\n        await clearComparisonFilters();\n        setHistory();\n    }\n\n    clearComparison = async () => {\n        const { clearComparison, clearSelectedBaselines, setHistory, setIsFirstReference, updateReferenceId } = this.props;\n\n        await clearComparison();\n        await clearSelectedBaselines('CHECKBOX');\n        await setIsFirstReference(true);\n        await updateReferenceId();\n        setHistory();\n\n    }\n\n    render() {\n        const { activeFactFilters, factFilter, filterByFact, handleFactFilter, loading,\n            page, perPage, setHistory, stateFilters, totalFacts, updatePagination } = this.props;\n        const { actionKebabItems, dropdownItems, dropdownOpen/*, isEmpty*/ } = this.state;\n\n        return (\n            <React.Fragment>\n                <Toolbar className=\"drift-toolbar\" clearAllFilters={ this.removeChip }>\n                    <ToolbarContent>\n                        <ToolbarGroup variant='filter-group'>\n                            <ToolbarFilter\n                                chips={ this.setFactFilterChips() }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"Fact name\"\n                            >\n                                <SearchBar\n                                    factFilter={ factFilter }\n                                    activeFactFilters={ activeFactFilters }\n                                    handleFactFilter={ handleFactFilter }\n                                    filterByFact={ filterByFact }\n                                    setHistory={ setHistory }\n                                />\n                            </ToolbarFilter>\n                            <ToolbarFilter\n                                chips={ this.setStateChips(stateFilters) }\n                                deleteChip={ this.removeChip }\n                                deleteChipGroup={ this.removeChip }\n                                categoryName=\"State\"\n                            >\n                                <FilterDropDown setHistory={ setHistory } />\n                            </ToolbarFilter>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='button-group'>\n                            <ToolbarItem>\n                                <AddSystemButton loading={ loading } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarGroup variant='icon-button-group'>\n                            <ToolbarItem>\n                                <ExportCSVButton\n                                    dropdownItems={ dropdownItems }\n                                    ouiaId='export-dropdown-comparison'\n                                    isOpen={ dropdownOpen }\n                                    onToggle={ this.onToggle }\n                                />\n                            </ToolbarItem>\n                            <ToolbarItem>\n                                <ActionKebab\n                                    ouiaId='clear-comparison-dropdown'\n                                    dropdownItems={ actionKebabItems } />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <ToolbarItem variant='pagination' align={{ default: 'alignRight' }}>\n                            <TablePagination\n                                page={ page }\n                                perPage={ perPage }\n                                total={ totalFacts }\n                                isCompact={ true }\n                                updatePagination={ updatePagination }\n                                widgetId='drift-pagination-top'\n                                ouiaId='comparison-pagination-top'\n                                variant={ PaginationVariant.top }\n                            />\n                        </ToolbarItem>\n                    </ToolbarContent>\n                </Toolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftToolbar.propTypes = {\n    loading: PropTypes.bool,\n    history: PropTypes.object,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    totalFacts: PropTypes.number,\n    updatePagination: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    clearComparison: PropTypes.func,\n    exportToCSV: PropTypes.func,\n    clearSelectedBaselines: PropTypes.func,\n    setIsFirstReference: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    factFilter: PropTypes.string,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    setHistory: PropTypes.func\n};\n\nexport default DriftToolbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { Main, PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components';\nimport { Card, CardBody, Toolbar, ToolbarGroup, ToolbarItem, PaginationVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon, LockIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { baselinesTableActions } from '../BaselinesTable/redux';\nimport { compareActions } from '../modules';\nimport { historicProfilesActions } from '../HistoricalProfilesPopover/redux';\nimport { setHistory } from '../../Utilities/SetHistory';\n\nimport DriftTable from './DriftTable/DriftTable';\nimport ErrorAlert from '../ErrorAlert/ErrorAlert';\nimport TablePagination from '../Pagination/Pagination';\nimport AddSystemButton from './AddSystemButton/AddSystemButton';\nimport DriftToolbar from './DriftToolbar/DriftToolbar';\nimport EmptyStateDisplay from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { PermissionContext } from '../../App';\n\nexport class DriftPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            emptyStateMessage: [\n                'You currently have no system or baselines displayed. Add at least two',\n                'systems or baselines to compare their facts.'\n            ],\n            isFirstReference: true\n        };\n\n        this.props.clearSelectedBaselines('CHECKBOX');\n    }\n\n    async componentDidMount() {\n        await window.insights.chrome.auth.getUser();\n    }\n\n    setHistory = () => {\n        const { activeFactFilters, baselines, factFilter, factSort, historicalProfiles, history, referenceId, stateFilters,\n            stateSort, systems } = this.props;\n\n        let systemIds = systems.map(system => system.id);\n        let baselineIds = baselines.map(baseline => baseline.id);\n        let HSPIds = historicalProfiles.map(hsp => hsp.id);\n\n        setHistory(\n            history, systemIds, baselineIds, HSPIds, referenceId, activeFactFilters, factFilter, stateFilters, factSort, stateSort\n        );\n    }\n\n    setIsFirstReference = (value) => {\n        this.setState({\n            isFirstReference: value\n        });\n    }\n\n    onClose = () => {\n        const { revertCompareData, history, previousStateSystems } = this.props;\n\n        revertCompareData();\n        setHistory(history, previousStateSystems.map(system => system.id));\n    }\n\n    renderEmptyState = () => {\n        const { emptyStateMessage } = this.state;\n        const { error } = this.props;\n\n        if (error.status) {\n            return <EmptyStateDisplay\n                icon={ ExclamationCircleIcon }\n                color='#c9190b'\n                title={ 'Comparison cannot be displayed' }\n                text={ emptyStateMessage }\n                error={ 'Error ' + error.status + ': ' + error.detail }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        } else {\n            return <EmptyStateDisplay\n                icon={ PlusCircleIcon }\n                color='#6a6e73'\n                title={ 'Add systems or baselines to compare' }\n                text={ emptyStateMessage }\n                button={ <AddSystemButton isTable={ false }/> }\n            />;\n        }\n    }\n\n    render() {\n        const { activeFactFilters, addStateFilter, baselines, clearAllFactFilters, clearComparison, clearComparisonFilters, clearSelectedBaselines,\n            emptyState, error, exportToCSV, factFilter, factSort, filterByFact, handleFactFilter, historicalProfiles, history, loading, page, perPage,\n            referenceId, stateFilters, stateSort, systems, totalFacts, updatePagination, updateReferenceId } = this.props;\n        const { isFirstReference } = this.state;\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Comparison'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.compareRead === false\n                                ? <EmptyStateDisplay\n                                    icon={ LockIcon }\n                                    color='#6a6e73'\n                                    title={ 'You do not have access to Drift comparison' }\n                                    text={ [ 'Contact your organization administrator(s) for more information.' ] }\n                                />\n                                : <React.Fragment>\n                                    <ErrorAlert\n                                        error={ error }\n                                        onClose={ this.onClose }\n                                    />\n                                    { emptyState && !loading\n                                        ? this.renderEmptyState()\n                                        : <div></div>\n                                    }\n                                    <Card className='pf-t-light pf-m-opaque-100'>\n                                        <CardBody>\n                                            <div>\n                                                { !emptyState\n                                                    ? <DriftToolbar\n                                                        loading={ loading }\n                                                        history={ history }\n                                                        page={ page }\n                                                        perPage={ perPage }\n                                                        totalFacts={ totalFacts }\n                                                        updatePagination={ updatePagination }\n                                                        clearComparison={ clearComparison }\n                                                        clearComparisonFilters={ clearComparisonFilters }\n                                                        exportToCSV={ exportToCSV }\n                                                        updateReferenceId={ updateReferenceId }\n                                                        setIsFirstReference={ this.setIsFirstReference }\n                                                        clearSelectedBaselines={ clearSelectedBaselines }\n                                                        factFilter={ factFilter }\n                                                        filterByFact={ filterByFact }\n                                                        stateFilters={ stateFilters }\n                                                        addStateFilter={ addStateFilter }\n                                                        activeFactFilters={ activeFactFilters }\n                                                        handleFactFilter={ handleFactFilter }\n                                                        clearAllFactFilters={ clearAllFactFilters }\n                                                        setHistory={ this.setHistory }\n                                                    />\n                                                    : null\n                                                }\n                                                <DriftTable\n                                                    updateReferenceId={ updateReferenceId }\n                                                    error={ error }\n                                                    isFirstReference={ isFirstReference }\n                                                    setIsFirstReference={ this.setIsFirstReference }\n                                                    clearComparison= { clearComparison }\n                                                    hasBaselinesReadPermissions={ value.permissions.baselinesRead }\n                                                    hasBaselinesWritePermissions={ value.permissions.baselinesWrite }\n                                                    hasInventoryReadPermissions={ value.permissions.inventoryRead }\n                                                    handleFactFilter={ handleFactFilter }\n                                                    addStateFilter={ addStateFilter }\n                                                    stateFilters={ stateFilters }\n                                                    activeFactFilters={ activeFactFilters }\n                                                    factFilter={ factFilter }\n                                                    setHistory={ this.setHistory }\n                                                    factSort={ factSort }\n                                                    stateSort={ stateSort }\n                                                    referenceId={ referenceId }\n                                                    systems={ systems }\n                                                    baselines={ baselines }\n                                                    historicalProfiles={ historicalProfiles }\n                                                />\n                                                { !emptyState && !loading ?\n                                                    <Toolbar className=\"drift-toolbar\">\n                                                        <ToolbarGroup className=\"pf-c-pagination\">\n                                                            <ToolbarItem>\n                                                                <TablePagination\n                                                                    page={ page }\n                                                                    perPage={ perPage }\n                                                                    total={ totalFacts }\n                                                                    isCompact={ false }\n                                                                    updatePagination={ updatePagination }\n                                                                    widgetId='drift-pagination-bottom'\n                                                                    ouiaId='drift-pagination-bottom'\n                                                                    variant={ PaginationVariant.bottom }\n                                                                />\n                                                            </ToolbarItem>\n                                                        </ToolbarGroup>\n                                                    </Toolbar>\n                                                    : null\n                                                }\n                                            </div>\n                                        </CardBody>\n                                    </Card>\n                                </React.Fragment>\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    }\n}\n\nDriftPage.propTypes = {\n    perPage: PropTypes.number,\n    page: PropTypes.number,\n    totalFacts: PropTypes.number,\n    error: PropTypes.object,\n    loading: PropTypes.bool,\n    clearSelectedBaselines: PropTypes.func,\n    emptyState: PropTypes.bool,\n    updatePagination: PropTypes.func,\n    updateReferenceId: PropTypes.func,\n    clearComparison: PropTypes.func,\n    clearComparisonFilters: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    selectHistoricProfiles: PropTypes.func,\n    selectedHSPIds: PropTypes.array,\n    revertCompareData: PropTypes.func,\n    previousStateSystems: PropTypes.array,\n    exportToCSV: PropTypes.func,\n    factFilter: PropTypes.string,\n    activeFactFilters: PropTypes.array,\n    handleFactFilter: PropTypes.func,\n    filterByFact: PropTypes.func,\n    stateFilters: PropTypes.array,\n    addStateFilter: PropTypes.func,\n    clearAllFactFilters: PropTypes.func,\n    factSort: PropTypes.string,\n    stateSort: PropTypes.string,\n    referenceId: PropTypes.number,\n    systems: PropTypes.array,\n    baselines: PropTypes.array,\n    historicalProfiles: PropTypes.array\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        clearSelectedBaselines: (tableId) => dispatch(baselinesTableActions.clearSelectedBaselines(tableId)),\n        updatePagination: (pagination) => dispatch(compareActions.updatePagination(pagination)),\n        updateReferenceId: (id) => dispatch(compareActions.updateReferenceId(id)),\n        clearComparison: () => dispatch(compareActions.clearComparison()),\n        clearComparisonFilters: () => dispatch(compareActions.clearComparisonFilters()),\n        selectHistoricProfiles: (historicProfileIds) => dispatch(historicProfilesActions.selectHistoricProfiles(historicProfileIds)),\n        revertCompareData: () => dispatch(compareActions.revertCompareData()),\n        exportToCSV: () => dispatch(compareActions.exportToCSV()),\n        filterByFact: (filter) => dispatch(compareActions.filterByFact(filter)),\n        addStateFilter: (filter) => dispatch(compareActions.addStateFilter(filter)),\n        handleFactFilter: (filter) => dispatch(compareActions.handleFactFilter(filter)),\n        clearAllFactFilters: () => dispatch(compareActions.clearAllFactFilters())\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        page: state.compareState.page,\n        perPage: state.compareState.perPage,\n        totalFacts: state.compareState.totalFacts,\n        error: state.compareState.error,\n        loading: state.compareState.loading,\n        emptyState: state.compareState.emptyState,\n        selectedHSPIds: state.historicProfilesState.selectedHSPIds,\n        previousStateSystems: state.compareState.previousStateSystems,\n        factFilter: state.compareState.factFilter,\n        stateFilters: state.compareState.stateFilters,\n        activeFactFilters: state.compareState.activeFactFilters,\n        factSort: state.compareState.factSort,\n        stateSort: state.compareState.stateSort,\n        referenceId: state.compareState.referenceId,\n        systems: state.compareState.systems,\n        baselines: state.compareState.baselines,\n        historicalProfiles: state.compareState.historicalProfiles\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriftPage));\n"],"sourceRoot":""}